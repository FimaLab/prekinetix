import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import math
import statistics  
import seaborn as sns
import statsmodels.api as sm
import streamlit.components as stc
import base64 
import time
from io import BytesIO
from pyxlsb import open_workbook as open_xlsb
from docx import Document
from docx.shared import Pt
import tempfile
import os

#–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–µ
#cd C:\Users\–ü–∞–≤–µ–ª\OneDrive\Worktable\pyt\Bioavailability
#–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥—É my_env_name\scripts\activate
#streamlit run "C:\Users\–ü–∞–≤–µ–ª\OneDrive\Worktable\pyt\Bioavailability\bioavailability.py"
#–ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª—å, –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –≤–∫–ª–∞–¥–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
#–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∞–π–ª .py –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∫–ª–∞–¥–∫—É

#C:\Users\–ü–∞–≤–µ–ª\AppData\Local\Programs\Python\Python310\Lib\site-packages –ø—É—Ç—å –∫–æ –≤—Å–µ–º –ø–∞–∫–µ—Ç–∞–º


###########################################################
#–æ–±–ª–∞—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

#—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ 
def save_uploadedfile(uploadedfile):
    with open(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",uploadedfile.name),"wb") as f:
       f.write(uploadedfile.getbuffer())
    return st.success("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")


#############################################################

st.sidebar.title('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—á—ë—Ç—É –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ üìà')

st.sidebar.title('–ú–µ–Ω—é')

st.sidebar.subheader('–ö–∞–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è?')

option = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
    ('–ò–∑—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞', '–ò–∑—É—á–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö', '–õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è'),disabled = False, key = "–í–∏–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

############### —Ñ–∞–π–ª –ø—Ä–∏–º–µ—Ä

df_example_file = pd.read_excel("server_example_file.xlsx")

def to_excel(df_example_file):
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df_example_file.to_excel(writer, index=False, sheet_name='Sheet1')
    workbook = writer.book
    worksheet = writer.sheets['Sheet1']
    format1 = workbook.add_format({'num_format': '0.00'}) 
    worksheet.set_column('A:A', None, format1)
    writer.save()  
    processed_data = output.getvalue()
    return processed_data
df_example_file_xlsx = to_excel(df_example_file)
st.sidebar.download_button(label='–ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ üíæ', data=df_example_file_xlsx , file_name= 'example_file.xlsx')

############ –ø–∞–º—è—Ç–∫–∞

text_contents = '''1)–û–≥–ª–∞–≤–ª—è—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ —Å–ª–æ–≤–æ ¬´–ù–æ–º–µ—Ä¬ª (–≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ).
2)–ó–Ω–∞–∫ ¬´‚Ññ¬ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. 
3) –ù–µ —Å—Ç–∞–≤–∏—Ç—å –≤ —è—á–µ–π–∫–∏ –∑–Ω–∞–∫ ¬´-¬ª –≤ —Å–ª—É—á–∞–µ –Ω—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –°—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ ¬´0¬ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. 
'''
st.sidebar.download_button('–ü–∞–º—è—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è üìÑ', text_contents)
      
if option == '–ò–∑—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞':
 
    panel = st.radio(
        "‚öôÔ∏è–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "–¢–∞–±–ª–∏—Ü—ã","–ì—Ä–∞—Ñ–∏–∫–∏"),
        horizontal=True, key= "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ - –ò–∑—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"
    )

    ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "measure_unit" not in st.session_state:
       st.session_state["measure_unit"] = ""
    if "dose_iv" not in st.session_state:
       st.session_state["dose_iv"] = ""
    if "dose_po_sub" not in st.session_state:   
       st.session_state["dose_po_sub"] = ""
    if "dose_po_tab" not in st.session_state:   
       st.session_state["dose_po_tab"] = ""
       
    #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
    list_heading_word=[]
    list_table_word=[]
    list_graphics_word=[]
    list_heading_graphics_word=[]

    if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
   
       st.title('–ò–∑—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')
       
       st.subheader('–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏')
       
       measure_unit = st.text_input("–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏", key='–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞', value = st.session_state["measure_unit"])
       
       st.session_state["measure_unit"] = measure_unit

       st.info('‚ùï‚ùóÔ∏è‚ùï –í–≤–µ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏')
       
       #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
       if "index_method_auc - –ò–ë" not in st.session_state:
           st.session_state["index_method_auc - –ò–ë"] = 0

       method_auc = st.radio("üìå–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t",('linear',"linear-up/log-down"),key = "–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t - –ò–ë", index = st.session_state["index_method_auc - –ò–ë"])
       
       if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t - –ò–ë"] == 'linear':
          st.session_state["index_method_auc - –ò–ë"] = 0
       if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t - –ò–ë"] == "linear-up/log-down":
          st.session_state["index_method_auc - –ò–ë"] = 1

       st.title('–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
       
       st.subheader('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ XLSX')
       uploaded_file_1 = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è", key='–§–∞–π–ª –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')
       
       #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
       if uploaded_file_1 is not None:
          save_uploadedfile(uploaded_file_1)
          st.session_state["uploaded_file_1"] = uploaded_file_1.name
          
       dose_iv = st.text_input("–î–æ–∑–∞ –ø—Ä–∏ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏", key='–î–æ–∑–∞ –ø—Ä–∏ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞', value = st.session_state["dose_iv"])
       
       st.session_state["dose_iv"] = dose_iv

       if "uploaded_file_1" in st.session_state and dose_iv and measure_unit:
          df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_1"])) 
          st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
          st.write(df)
          
          table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
          list_heading_word.append(table_heading)

          col_mapping = df.columns.tolist()
          col_mapping.remove('–ù–æ–º–µ—Ä')

          list_gmean=[]
          list_cv=[] 
          for i in col_mapping:

              list_ser=df[i].tolist()
              list_ser_cv = list_ser#–Ω—É–∂–Ω–æ —Å –Ω—É–ª—è–º–∏ –¥–ª—è CV

              #—É–±—Ä–∞—Ç—å –Ω—É–ª–∏, —Ç.–∫ –Ω—É–ª–∏ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å –Ω—É–ª–µ–≤–æ–µ gmean
              count_for_range_ser=len(list_ser)
              list_range_ser=range(0,count_for_range_ser)
              
              list_ser_without_0=[]
              for i in list_range_ser:
                  if list_ser[i] !=0:
                     list_ser_without_0.append(list_ser[i])

              list_ser = list_ser_without_0


              def g_mean(list_ser):
                  a=np.log(list_ser)
                  return np.exp(a.mean())
              Gmean=g_mean(list_ser)
              list_gmean.append(Gmean)
              
              ####CV

              cv_std=lambda x: np.std(x, ddof= 1 )
              cv_mean=lambda x: np.mean(x)
              CV_std=cv_std(list_ser_cv)

              CV_mean=cv_mean(list_ser_cv)

              CV=CV_std/CV_mean * 100
              list_cv.append(CV)
              
          #–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è None –∏–∑ —Ñ—Ä–µ–π–º–∞
          list_gmean.pop(0)
          list_gmean.insert(0,0)
          list_cv.pop(0)
          list_cv.insert(0,0)
          
          df_averaged_concentrations=df.describe()
          df_averaged_concentrations_1= df_averaged_concentrations.drop(['count', '25%','75%'],axis=0)
          df_averaged_concentrations_2= df_averaged_concentrations_1.rename(index={"50%": "median"})
          df_averaged_concentrations_2.loc[len(df_averaged_concentrations_2.index )] = list_gmean
          df_averaged_3 = df_averaged_concentrations_2.rename(index={5 : "Gmean"})
          df_averaged_3.loc[len(df_averaged_3.index )] = list_cv
          df_averaged_3 = df_averaged_3.rename(index={6 : "CV, %"})

          df_index=df.set_index('–ù–æ–º–µ—Ä')
          df_concat= pd.concat([df_index,df_averaged_3],sort=False,axis=0)
          df_concat_round=df_concat.round(2)

          ###–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–∞ —Å –Ω—É–ª—è–º–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
          col_mapping = df_concat_round.columns.tolist()

          list_list_series=[]
          for i in col_mapping:
              list_series = df_concat_round[i].tolist()
               
              list_series_round = []
              for i in list_series:
                  value = "%.2f" % round(i,2)
                  list_series_round.append(value)
                   
              list_list_series.append(list_series_round)

          df_concat_round_str = pd.DataFrame(list_list_series, columns = df_concat_round.index.tolist(),index=col_mapping) 
          df_concat_round_str_transpose = df_concat_round_str.transpose()
          df_concat_round_str_transpose.index.name = '–ù–æ–º–µ—Ä'
          
          ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

          df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
          df_concat_round_str_transpose1.iloc[-6,:],df_concat_round_str_transpose1.iloc[-2,:]=df_concat_round_str_transpose.iloc[-2,:],df_concat_round_str_transpose.iloc[-6,:]

          df_concat_round_str_transpose=df_concat_round_str_transpose1

          df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
          df_concat_round_str_transpose1.iloc[-4,:],df_concat_round_str_transpose1.iloc[-5,:]=df_concat_round_str_transpose.iloc[-5,:],df_concat_round_str_transpose.iloc[-4,:]

          df_concat_round_str_transpose=df_concat_round_str_transpose1

          df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')
          

          #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–±–ª—Ü–æ–≤
          list_time_round =["%.2f" % round(v,2) for v in df_concat_round_str_transpose.columns.tolist()]
          df_concat_round_str_transpose.columns = list_time_round


          list_table_word.append(df_concat_round_str_transpose)
       ########### –≥—Ä–∞—Ñ–∏–∫–∏    

       ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

          # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
          count_row_df = len(df.axes[0])

          list_time = []
          for i in col_mapping:
              numer=float(i)
              list_time.append(numer)

          for r in range(0,count_row_df):

              list_concentration=df.iloc[r].tolist()

              numer_animal=list_concentration[0]

              list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

              list_concentration = [float(v) for v in list_concentration]

              fig, ax = plt.subplots()
              plt.plot(list_time,list_concentration,marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue")
              plt.xlabel("–í—Ä–µ–º—è, —á")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
              
              list_graphics_word.append(fig) 
              
              #–ø–µ—Ä–µ–æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
              graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏,  '+numer_animal
              list_heading_graphics_word.append(graphic)

           #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
              count_for_0_1=len(list_concentration)
              list_range_for_0_1=range(0,count_for_0_1)

              list_time_0=[]
              list_for_log_1=[]
              for i in list_range_for_0_1:
                  if list_concentration[i] !=0:
                     list_for_log_1.append(list_concentration[i])
                     list_time_0.append(list_time[i]) 

              fig, ax = plt.subplots()
              plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue")
              ax.set_yscale("log")
              plt.xlabel("–í—Ä–µ–º—è, —á")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
              
              
              list_graphics_word.append(fig)
              
              graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏,  '+numer_animal
              list_heading_graphics_word.append(graphic)

       # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

          df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
          df_for_plot_conc_1 = df_for_plot_conc.transpose()
          list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()

          fig, ax = plt.subplots()

          plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

          ax.set_xlabel("–í—Ä–µ–º—è, —á")
          ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
          ax.legend()
          
          list_graphics_word.append(fig)

          graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏"
          list_heading_graphics_word.append(graphic)    
       # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
          df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)


          fig, ax = plt.subplots()

          plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

          ax.set_xlabel("–í—Ä–µ–º—è, —á")
          ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
          ax.set_yscale("log")
          ax.legend()
          
          list_graphics_word.append(fig)

          graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏"
          list_heading_graphics_word.append(graphic)
           ###—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ    
       # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
          list_time = []
          for i in col_mapping:
              numer=float(i)
              list_time.append(numer)


          list_concentration=df_averaged_concentrations.loc['mean'].tolist()
          err_y_1=df_averaged_concentrations.loc['std'].tolist()


          fig, ax = plt.subplots()
          plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
          plt.xlabel("–í—Ä–µ–º—è, —á")
          plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
          
          list_graphics_word.append(fig) 

          graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
          list_heading_graphics_word.append(graphic)



       #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
          #–¥–ª—è –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º. –ø–æ—Å—Ç–æ—Ä–∏–º –±–µ–∑ –Ω—É–ª—è
          list_time.remove(0)
          list_concentration.remove(0)
          err_y_1.remove(0) 


          fig, ax = plt.subplots()
          plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
          ax.set_yscale("log")
          plt.xlabel("–í—Ä–µ–º—è, —á")
          plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)

          
          list_graphics_word.append(fig)

          graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
          list_heading_graphics_word.append(graphic)


       ############### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

          ###Cmax
          df_without_numer=df.drop(['–ù–æ–º–µ—Ä'],axis=1)
          count_row=df_without_numer.shape[0]
          list_cmax=[]
          for i in range(0,count_row):
              cmax=float(max(df_without_numer.iloc[[i]].iloc[0].tolist()))
              list_cmax.append(cmax)

          ###Tmax   
          list_Tmax=[]
          for cmax in list_cmax:
              for column in df.columns:
                  for num, row in df.iterrows():
                      if df.iloc[num][column] == cmax:
                         list_Tmax.append(f"{column}")
        
          list_Tmax_float=[]           
          for i in list_Tmax:
              Tmax=float(i)
              list_Tmax_float.append(Tmax)
          
          ###AUC0-t
          list_AUC_0_T=[]
          if method_auc == 'linear':
             for i in range(0,count_row):
                 list_columns_T=[]
                 for column in df_without_numer.columns:
                     list_columns_T.append(float(column))
                 list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                 
                 AUC_0_T=np.trapz(list_concentration,x=list_columns_T)
                 list_AUC_0_T.append(AUC_0_T)
          if method_auc == 'linear-up/log-down':
             for i in range(0,count_row):
                 list_columns_T=[]
                 for column in df_without_numer.columns:
                     list_columns_T.append(float(column))
                 list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                 
                 list_c = list_concentration
                 list_t = list_columns_T
                 
                 cmax=max(list_c)
                 cmax_index = list_c.index(cmax)
                 ### cmax –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –∏ –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–π —á–∞—Å—Ç–∏ 
                 list_before_cmax_—Å=list_c[:cmax_index+1]
                 list_after_cmax_—Å=list_c[cmax_index:]
                 list_before_cmax_t=list_t[:cmax_index+1]
                 list_after_cmax_t=list_t[cmax_index:]
                 
                 ####–≤–æ—Å—Ö–æ–¥—è—â–∞—è —á–∞—Å—Ç—å
                 AUC_0_T_before=np.trapz(list_before_cmax_—Å,x=list_before_cmax_t)
                 
                 #####–Ω–∏—Å—Ö–æ–¥—è—â–∞—è (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .py –Ω–µ–≤–µ—Ä–Ω–æ–µ)
                 count_i = len(list_after_cmax_—Å)

                 list_range= range(0,count_i)
                 list_AUC_0_T_after=[]
                 AUC_0_T=0
                 b=0
                 for i in list_range:
                     if b<count_i-1:
                         AUC_0_T+=(list_after_cmax_t[i+1]-list_after_cmax_t[i])/(np.log(np.asarray(list_after_cmax_—Å[i])/np.asarray(list_after_cmax_—Å[i+1]))) *(list_after_cmax_—Å[i]-list_after_cmax_—Å[i+1])
                         b+=1
                         list_AUC_0_T_after.append(AUC_0_T)
                         
                 AUC_0_T_after = list_AUC_0_T_after[-1]
                 
                 AUC_O_T = AUC_0_T_before + AUC_0_T_after
                 
                 list_AUC_0_T.append(AUC_O_T)

          ####–°max/AUC0-t
          list_–°max_division_AUC0_t_for_division=zip(list_cmax,list_AUC_0_T)
          list_–°max_division_AUC0_t=[]
          for i,j in list_–°max_division_AUC0_t_for_division:
                  list_–°max_division_AUC0_t.append(i/j)

          ####KEL
          list_kel_total=[]
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
              list_concentration.remove(0)
              list_c=list_concentration

              list_time=df_without_numer.columns.tolist()
              list_time.remove(0) 

              list_t=[]
              for i in list_time:
                  i=float(i)
                  list_t.append(i)

              #—Å—Ä–µ–∑_–±–µ–∑_cmax
              max_value_c=max(list_c)
              index_cmax=list_c.index(max_value_c)

              list_c_without_cmax=list_c[index_cmax+1:]
              list_t_without_cmax=list_t[index_cmax+1:]

              #—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
              count_for_0_1=len(list_c_without_cmax)
              list_range_for_0_1=range(0,count_for_0_1)

              list_time_0=[]
              list_conc_0=[]
              for i in list_range_for_0_1:
                  if list_c_without_cmax[i] !=0:
                     list_conc_0.append(list_c_without_cmax[i])
                     list_time_0.append(list_t_without_cmax[i]) 
              ################################

              n_points=len(list_conc_0)
              list_n_points = range(0,n_points)

              #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —É–º–µ–Ω—å—â–∞—é—â–µ–º—Å—è –∫–æ–ª, —Ç–æ—á–µ–∫
              list_for_kel_c=[]
              for j in list_n_points:
                  if j<n_points:
                     list_c_new=list_conc_0[j:n_points]
                     list_for_kel_c.append(list_c_new)
              list_for_kel_c.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
              list_for_kel_c.pop(-1)  #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏     

              list_for_kel_t=[]
              for j in list_n_points:
                  if j<n_points:
                     list_t_new=list_time_0[j:n_points]
                     list_for_kel_t.append(list_t_new)
              list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
              list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ 

              list_ct_zip=zip(list_for_kel_c,list_for_kel_t)

              list_kel=[]
              list_r=[]
              for i,j in list_ct_zip:

                  n_points_r=len(i)

                  np_c=np.asarray(i)
                  np_t_1=np.asarray(j).reshape((-1,1))

                  np_c_log=np.log(np_c)

                  model = LinearRegression().fit(np_t_1,np_c_log)

                  np_t=np.asarray(j)
                  a=np.corrcoef(np_t, np_c_log)
                  cor=((a[0])[1])
                  r_sq=cor**2

                  adjusted_r_sq=1-((1-r_sq)*((n_points_r-1))/(n_points_r-2))

                  ########################################
                  kel=abs(model.coef_[0])
                  list_kel.append(kel)
                  list_r.append(adjusted_r_sq)

              #–¥–µ–ª–∞–µ–º —Å—Ä–µ–∑—ã —Å–ø–∏—Å–æ–∫–æ–≤ –¥–æ rmax
              max_r=max(list_r)

              index_max_r= list_r.index(max_r)

              list_r1=list_r
              list_kel1=list_kel

              number_elem_list_r1=len(list_r1)

              list_range_kel=range(0,number_elem_list_r1) 

              list_kel_total_1=[]
              for i in list_range_kel:

                  if abs(list_r[index_max_r] - list_r1[i]) < 0.0001: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç rmax
                     list_kel_total.append(list_kel1[i]*math.log(math.exp(1))) #–æ—Ç–¥–∞—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ rmax —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
                     break #—Å–∞–º–∞—è —Ä–∞–Ω–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–æ–≤—Ä—è—é—â–∞—è —É—Å–ª–æ–≤–∏—é

              for i in list_kel_total_1:
                  list_kel_total.append(i) 

          ####T1/2
          list_half_live=[]
          for i in list_kel_total:
              half_live=math.log(2)/i
              list_half_live.append(half_live)


          ###AUC0-inf 

          list_auc0_inf=[] 

          list_of_list_c=[]
          for i in range(0,count_row):
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
              list_concentration.remove(0)
              list_c = list_concentration
              list_c.reverse() ### –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∏—Å–∫–∞ Clast –Ω–µ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é
              list_of_list_c.append(list_c)

          list_zip_c_AUCt_inf=zip(list_kel_total,list_of_list_c)

              #AUCt-inf 
          list_auc_t_inf=[]     
          for i,j in list_zip_c_AUCt_inf:
              for clast in j:
                  if clast != 0:
                     clast_true=clast
                     break
              auc_t_inf=clast_true/i
              list_auc_t_inf.append(auc_t_inf)

          list_auc_t_inf_and_AUC_0_T_zip=zip(list_AUC_0_T,list_auc_t_inf)

          for i,j in list_auc_t_inf_and_AUC_0_T_zip:
              auc0_inf=i+j    
              list_auc0_inf.append(auc0_inf)

          ####CL
          list_cl=[]

          for i in list_auc0_inf:
              cl = float(dose_iv)/i * 1000
              list_cl.append(cl)


          ####Vd
          list_Vd=[]

          list_zip_kel_cl=zip(list_kel_total,list_cl)

          for i,j in list_zip_kel_cl:
              Vd = j/i
              list_Vd.append(Vd)


          ###AUMC
          list_AUMCO_inf=[]

          list_AUMC0_t=[]

          list_C_last=[]
          list_T_last=[]
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              list_C_last.append(list_concentration[-1]) 
              list_T_last.append(list_columns_T[-1]) 

              list_len=len(list_concentration)

              list_aumc_i=[]
              for i in range(0,list_len):
                  AUMC=(list_columns_T[i] - list_columns_T[i-1]) *  ((list_concentration[i] * list_columns_T[i] + list_concentration[i-1] * list_columns_T[i-1])/2)
                  list_aumc_i.append(AUMC)

              list_aumc_i.pop(0)

              a=0
              list_AUMC0_t_1=[]
              for i in list_aumc_i:
                  a+=i
                  list_AUMC0_t_1.append(a)
              list_AUMC0_t.append(list_AUMC0_t_1[-1])

          list_zip_for_AUMC_inf=zip(list_kel_total,list_C_last,list_T_last)

          list_AUMCt_inf=[]
          for k,c,t in list_zip_for_AUMC_inf:
              AUMCt_inf=c*t/k+c/(k*k)
              list_AUMCt_inf.append(AUMCt_inf)


          list_AUMC_zip=zip(list_AUMC0_t,list_AUMCt_inf)

          for i,j in list_AUMC_zip:
              AUMCO_inf=i+j
              list_AUMCO_inf.append(AUMCO_inf)

          ###MRT0-inf
          list_MRT0_inf=[]

          list_zip_AUMCO_inf_auc0_inf = zip(list_AUMCO_inf,list_auc0_inf)

          for i,j in list_zip_AUMCO_inf_auc0_inf:
              MRT0_inf=i/j
              list_MRT0_inf.append(MRT0_inf)


          ##################### –§—Ä–µ–π–º –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

          ### –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
          list_for_index=df["–ù–æ–º–µ—Ä"].tolist()

          df_PK=pd.DataFrame(list(zip(list_cmax,list_Tmax_float,list_MRT0_inf,list_half_live,list_AUC_0_T,list_auc0_inf,list_AUMCO_inf,list_–°max_division_AUC0_t,list_kel_total,list_cl,list_Vd)),columns=['Cmax','Tmax','MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-‚àû','–°max/AUC0-t','Kel','CL','Vd'],index=list_for_index) 
          
          ###–æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

          col_mapping_PK = df_PK.columns.tolist()

          list_gmean_PK=[]

          list_cv_PK=[] 

          for i in col_mapping_PK:

              list_ser_PK=df_PK[i].tolist()

              def g_mean(list_ser_PK):
                  a=np.log(list_ser_PK)
                  return np.exp(a.mean())
              Gmean_PK=g_mean(list_ser_PK)
              list_gmean_PK.append(Gmean_PK)

              cv_std_PK=lambda x: np.std(x, ddof= 1 )
              cv_mean_PK=lambda x: np.mean(x)
              CV_std_PK=cv_std(list_ser_PK)

              CV_mean_PK=cv_mean(list_ser_PK)

              CV_PK=(CV_std_PK/CV_mean_PK * 100)
              list_cv_PK.append(CV_PK)


          df_averaged_concentrations_PK=df_PK.describe()
          df_averaged_concentrations_1_PK= df_averaged_concentrations_PK.drop(['count', '25%','75%'],axis=0)
          df_averaged_concentrations_2_PK= df_averaged_concentrations_1_PK.rename(index={"50%": "median"})
          df_averaged_concentrations_2_PK.loc[len(df_averaged_concentrations_2_PK.index )] = list_gmean_PK
          df_averaged_3_PK = df_averaged_concentrations_2_PK.rename(index={5 : "Gmean"})
          df_round_without_CV_PK=df_averaged_3_PK
          df_round_without_CV_PK.loc[len(df_round_without_CV_PK.index )] = list_cv_PK
          df_averaged_3_PK = df_round_without_CV_PK.rename(index={6 : "CV, %"})


          df_concat_PK_iv= pd.concat([df_PK,df_averaged_3_PK],sort=False,axis=0)
          
          st.write(df_concat_PK_iv)

          ###–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

          series_Cmax=df_concat_PK_iv['Cmax']
          list_Cmax_str_f=["%.2f" % round(v,2) for v in series_Cmax.tolist()]
          series_Cmax=pd.Series(list_Cmax_str_f, index = df_concat_PK_iv.index.tolist(), name='Cmax ' +"("+measure_unit+")")

          series_Tmax=df_concat_PK_iv['Tmax']
          list_Tmax_str_f=["%.2f" % round(v,2) for v in series_Tmax.tolist()]
          series_Tmax=pd.Series(list_Tmax_str_f, index = df_concat_PK_iv.index.tolist(), name='Tmax ' +"("+"—á"+")")

          series_MRT0_inf= df_concat_PK_iv['MRT0‚Üí‚àû']
          list_MRT0_inf_str_f=["%.3f" % round(v,3) for v in series_MRT0_inf.tolist()]
          series_MRT0_inf=pd.Series(list_MRT0_inf_str_f, index = df_concat_PK_iv.index.tolist(), name='MRT0‚Üí‚àû '+"("+"—á"+")")

          series_half_live= df_concat_PK_iv['T1/2']
          list_half_live_str_f=["%.2f" % round(v,2) for v in series_half_live.tolist()]
          series_half_live=pd.Series(list_half_live_str_f, index = df_concat_PK_iv.index.tolist(), name='T1/2 '+"("+"—á"+")")

          series_AUC0_t= df_concat_PK_iv['AUC0-t']
          list_AUC0_t_str_f=["%.2f" % round(v,2) for v in series_AUC0_t.tolist()]
          series_AUC0_t=pd.Series(list_AUC0_t_str_f, index = df_concat_PK_iv.index.tolist(), name='AUC0-t '+"("+measure_unit+"√ó—á" +")")

          series_AUC0_inf= df_concat_PK_iv['AUC0‚Üí‚àû']
          list_AUC0_inf_str_f=["%.2f" % round(v,2) for v in series_AUC0_inf.tolist()]
          series_AUC0_inf=pd.Series(list_AUC0_inf_str_f, index = df_concat_PK_iv.index.tolist(), name='AUC0‚Üí‚àû '+"("+measure_unit+"√ó—á" +")")

          series_AUMC0_inf= df_concat_PK_iv['AUMC0-‚àû']
          list_AUMC0_inf_str_f=["%.2f" % round(v,2) for v in series_AUMC0_inf.tolist()]
          series_AUMC0_inf=pd.Series(list_AUMC0_inf_str_f, index = df_concat_PK_iv.index.tolist(), name='AUMC0-‚àû '+"("+measure_unit+"√ó—á\u00B2" +")")

          series_–°max_dev_AUC0_t= df_concat_PK_iv['–°max/AUC0-t']
          list_–°max_dev_AUC0_t_str_f=["%.4f" % round(v,4) for v in series_–°max_dev_AUC0_t.tolist()]
          series_–°max_dev_AUC0_t=pd.Series(list_–°max_dev_AUC0_t_str_f, index = df_concat_PK_iv.index.tolist(), name='–°max/AUC0-t '+"("+"—á\u207B\u00B9"+")")

          series_Kel= df_concat_PK_iv['Kel']
          list_Kel_str_f=["%.4f" % round(v,4) for v in series_Kel.tolist()]
          series_Kel=pd.Series(list_Kel_str_f, index = df_concat_PK_iv.index.tolist(), name='Kel '+"("+"—á\u207B\u00B9"+")")

          series_CL= df_concat_PK_iv['CL']
          list_CL_str_f=["%.2f" % round(v,2) for v in series_CL.tolist()]
          series_CL=pd.Series(list_CL_str_f, index = df_concat_PK_iv.index.tolist(), name='CL ' +"("+"–ª/—á"+")")

          series_Vd= df_concat_PK_iv['Vd']
          list_Vd_str_f=["%.1f" % round(v,1) for v in series_Vd.tolist()]
          series_Vd=pd.Series(list_Vd_str_f, index = df_concat_PK_iv.index.tolist(), name='Vd ' +"("+"–ª/–∫–≥"+")")

          df_total_PK_iv = pd.concat([series_Cmax, series_Tmax, series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_–°max_dev_AUC0_t,series_Kel,series_CL,series_Vd], axis= 1 ) 
          df_total_PK_iv.index.name = '–ù–æ–º–µ—Ä'

          ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

          df_total_PK_iv1=df_total_PK_iv.copy()
          df_total_PK_iv1.iloc[-6,:],df_total_PK_iv1.iloc[-2,:]=df_total_PK_iv.iloc[-2,:],df_total_PK_iv.iloc[-6,:]

          df_total_PK_iv=df_total_PK_iv1

          df_total_PK_iv1=df_total_PK_iv.copy()
          df_total_PK_iv1.iloc[-4,:],df_total_PK_iv1.iloc[-5,:]=df_total_PK_iv.iloc[-5,:],df_total_PK_iv.iloc[-4,:]

          df_total_PK_iv=df_total_PK_iv1

          df_total_PK_iv = df_total_PK_iv.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')

          table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
          list_heading_word.append(table_heading)

          list_table_word.append(df_total_PK_iv)

          ####–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          list_PK_Cmax_not_round = df_PK['Cmax'].tolist()
          list_PK_Tmax_not_round = df_PK['Tmax'].tolist() 
          list_PK_MRT0_inf_not_round = df_PK['MRT0‚Üí‚àû'].tolist() 
          list_PK_half_live_not_round = df_PK['T1/2'].tolist() 
          list_PK_AUC0_t_not_round = df_PK['AUC0-t'].tolist()
          list_PK_AUC0_inf_not_round = df_PK['AUC0‚Üí‚àû'].tolist()
          list_PK_AUMC0_inf_not_round = df_PK['AUMC0-‚àû'].tolist()
          list_PK_–°max_dev_AUC0_t_not_round = df_PK['–°max/AUC0-t'].tolist()
          list_PK_Kel_not_round = df_PK['Kel'].tolist()



          list_list_PK_parametr_iv=[list_PK_Cmax_not_round,list_PK_AUC0_t_not_round,list_PK_Kel_not_round,list_PK_AUC0_inf_not_round,list_PK_half_live_not_round,list_PK_AUMC0_inf_not_round,list_PK_MRT0_inf_not_round,list_PK_–°max_dev_AUC0_t_not_round]
          list_parametr_mean_h_iv=[]
          for i in list_list_PK_parametr_iv:
               n=len(i)

               def confidential_interval(i):
                   if n < 30:
                      h = statistics.stdev(i)
                      mean = np.mean(i)
                   else:
                      h = statistics.stdev(i) ### –ø—Ä–æ—è—Å–Ω–∏—Ç—å –º–æ–º–µ–Ω—Ç —Å n-1
                      mean = np.mean(i)
                   return ([mean,h]) 
               func_mean_h = confidential_interval(i)

               list_parametr_mean_h_iv.append(func_mean_h)


          list_mean_h_iv_Cmax_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_iv[0]]
          parametr_round_mean_h_Cmax=str(list_mean_h_iv_Cmax_round[0]) +"¬±"+str(list_mean_h_iv_Cmax_round[1])

          list_mean_h_iv_AUC0_t_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_iv[1]] 
          parametr_round_mean_h_AUC0_t=str(list_mean_h_iv_AUC0_t_round[0]) +"¬±"+str(list_mean_h_iv_AUC0_t_round[1]) 

          list_mean_h_iv_Kel_round=["%.4f" % round(v,4) for v in list_parametr_mean_h_iv[2]]
          parametr_round_mean_h_Kel=str(list_mean_h_iv_Kel_round[0]) +"¬±"+str(list_mean_h_iv_Kel_round[1])

          list_mean_h_iv_AUC0_inf_round= ["%.2f" % round(v,2) for v in list_parametr_mean_h_iv[3]]
          parametr_round_mean_h_AUC0_inf=str(list_mean_h_iv_AUC0_inf_round[0]) +"¬±"+str(list_mean_h_iv_AUC0_inf_round[1]) 

          list_mean_h_iv_half_live_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_iv[4]]
          parametr_round_mean_h_half_live=str(list_mean_h_iv_half_live_round[0]) +"¬±"+str(list_mean_h_iv_half_live_round[1])

          list_mean_h_iv_AUMC0_inf_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_iv[5]] 
          parametr_round_mean_h_AUMC0_inf=str(list_mean_h_iv_AUMC0_inf_round[0]) +"¬±"+str(list_mean_h_iv_AUMC0_inf_round[1]) 

          list_mean_h_iv_MRT0_inf_round=["%.3f" % round(v,3) for v in list_parametr_mean_h_iv[6]]
          parametr_round_mean_h_MRT0_inf=str(list_mean_h_iv_MRT0_inf_round[0]) +"¬±"+str(list_mean_h_iv_MRT0_inf_round[1])

          list_mean_h_iv_–°max_dev_AUC0_t_round=["%.4f" % round(v,4) for v in list_parametr_mean_h_iv[7]]
          parametr_round_mean_h_–°max_dev_AUC0_t=str(list_mean_h_iv_–°max_dev_AUC0_t_round[0]) +"¬±"+str(list_mean_h_iv_–°max_dev_AUC0_t_round[1])

          list_parametr_round_mean_h_iv= [parametr_round_mean_h_Cmax,parametr_round_mean_h_AUC0_t,parametr_round_mean_h_Kel,parametr_round_mean_h_AUC0_inf,parametr_round_mean_h_half_live,parametr_round_mean_h_AUMC0_inf,parametr_round_mean_h_MRT0_inf,parametr_round_mean_h_–°max_dev_AUC0_t]

          t_mean_iv = str("%.2f" % round(np.mean(list_PK_Tmax_not_round),2))     
          list_parametr_round_mean_h_iv.insert(1,t_mean_iv)


       else:
          st.info('‚ùï‚ùóÔ∏è‚ùï –ó–∞–≥—Ä—É–∑–∏—Ç—å XLSX —Ñ–∞–π–ª –∏ –≤–≤–µ—Å—Ç–∏ –¥–æ–∑—É –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞')


       ############################################################################################################### 
       st.title('–ü–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
       
       st.subheader('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ XLSX')
       uploaded_file_2 = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏", key='–§–∞–π–ª –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')
       
       #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
       if uploaded_file_2 is not None:
          save_uploadedfile(uploaded_file_2)
          st.session_state["uploaded_file_2"] = uploaded_file_2.name

       dose_po_sub = st.text_input("–î–æ–∑–∞ –ø—Ä–∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏", key='–î–æ–∑–∞ –ø—Ä–∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞', value = st.session_state["dose_po_sub"])
       
       st.session_state["dose_po_sub"] = dose_po_sub

       if "uploaded_file_2" in st.session_state and dose_po_sub and measure_unit:

          df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_2"]))
          st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
          st.write(df)

          table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
          list_heading_word.append(table_heading)

          col_mapping = df.columns.tolist()
          col_mapping.remove('–ù–æ–º–µ—Ä')

          list_gmean=[]
          list_cv=[] 
          for i in col_mapping:

              list_ser=df[i].tolist()
              list_ser_cv = list_ser#–Ω—É–∂–Ω–æ —Å –Ω—É–ª—è–º–∏ –¥–ª—è CV

              #—É–±—Ä–∞—Ç—å –Ω—É–ª–∏, —Ç.–∫ –Ω—É–ª–∏ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å –Ω—É–ª–µ–≤–æ–µ gmean
              count_for_range_ser=len(list_ser)
              list_range_ser=range(0,count_for_range_ser)
              
              list_ser_without_0=[]
              for i in list_range_ser:
                  if list_ser[i] !=0:
                     list_ser_without_0.append(list_ser[i])

              list_ser = list_ser_without_0

              def g_mean(list_ser):
                  a=np.log(list_ser)
                  return np.exp(a.mean())
              Gmean=g_mean(list_ser)
              list_gmean.append(Gmean)

              cv_std=lambda x: np.std(x, ddof= 1 )
              cv_mean=lambda x: np.mean(x)
              CV_std=cv_std(list_ser_cv)
              CV_mean=cv_mean(list_ser_cv)
              CV=CV_std/CV_mean * 100
              list_cv.append(CV)
          
          #–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è None –∏–∑ —Ñ—Ä–µ–π–º–∞
          list_gmean.pop(0)
          list_gmean.insert(0,0)
          list_cv.pop(0)
          list_cv.insert(0,0)

          df_averaged_concentrations=df.describe()
          df_averaged_concentrations_1= df_averaged_concentrations.drop(['count', '25%','75%'],axis=0)
          df_averaged_concentrations_2= df_averaged_concentrations_1.rename(index={"50%": "median"})
          df_averaged_concentrations_2.loc[len(df_averaged_concentrations_2.index )] = list_gmean
          df_averaged_3 = df_averaged_concentrations_2.rename(index={5 : "Gmean"})
          df_averaged_3.loc[len(df_averaged_3.index )] = list_cv
          df_averaged_3 = df_averaged_3.rename(index={6 : "CV, %"})

          df_index=df.set_index('–ù–æ–º–µ—Ä')
          df_concat= pd.concat([df_index,df_averaged_3],sort=False,axis=0)
          df_concat_round=df_concat.round(2)
          
          ###–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–∞ —Å –Ω—É–ª—è–º–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
          col_mapping = df_concat_round.columns.tolist()

          list_list_series=[]
          for i in col_mapping:
              list_series = df_concat_round[i].tolist()
               
              list_series_round = []
              for i in list_series:
                  value = "%.2f" % round(i,2)
                  list_series_round.append(value)
                   
              list_list_series.append(list_series_round)

          df_concat_round_str = pd.DataFrame(list_list_series, columns = df_concat_round.index.tolist(),index=col_mapping) 
          df_concat_round_str_transpose = df_concat_round_str.transpose()
          df_concat_round_str_transpose.index.name = '–ù–æ–º–µ—Ä'

          ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

          df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
          df_concat_round_str_transpose1.iloc[-6,:],df_concat_round_str_transpose1.iloc[-2,:]=df_concat_round_str_transpose.iloc[-2,:],df_concat_round_str_transpose.iloc[-6,:]

          df_concat_round_str_transpose=df_concat_round_str_transpose1

          df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
          df_concat_round_str_transpose1.iloc[-4,:],df_concat_round_str_transpose1.iloc[-5,:]=df_concat_round_str_transpose.iloc[-5,:],df_concat_round_str_transpose.iloc[-4,:]

          df_concat_round_str_transpose=df_concat_round_str_transpose1

          df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')
          
          #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–±–ª—Ü–æ–≤
          list_time_round =["%.2f" % round(v,2) for v in df_concat_round_str_transpose.columns.tolist()]
          df_concat_round_str_transpose.columns = list_time_round
          
          list_table_word.append(df_concat_round_str_transpose)

       ########### –≥—Ä–∞—Ñ–∏–∫–∏    

       ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

          # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
          count_row_df = len(df.axes[0])

          list_time = []
          for i in col_mapping:
              numer=float(i)
              list_time.append(numer)

          for r in range(0,count_row_df):

              list_concentration=df.iloc[r].tolist()

              numer_animal=list_concentration[0]

              list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

              list_concentration = [float(v) for v in list_concentration]


              fig, ax = plt.subplots()
              plt.plot(list_time,list_concentration,marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue")
              plt.xlabel("–í—Ä–µ–º—è, —á")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
             
              list_graphics_word.append(fig)  

              graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏,  '+numer_animal
              list_heading_graphics_word.append(graphic)

           #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
              count_for_0_1=len(list_concentration)
              list_range_for_0_1=range(0,count_for_0_1)

              list_time_0=[]
              list_for_log_1=[]
              for i in list_range_for_0_1:
                  if list_concentration[i] !=0:
                     list_for_log_1.append(list_concentration[i])
                     list_time_0.append(list_time[i]) 

              fig, ax = plt.subplots()
              plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue")
              ax.set_yscale("log")
              plt.xlabel("–í—Ä–µ–º—è, —á")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)

              list_graphics_word.append(fig) 

              graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏,  '+numer_animal
              list_heading_graphics_word.append(graphic)

       # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

          df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
          df_for_plot_conc_1 = df_for_plot_conc.transpose()
          list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()

          fig, ax = plt.subplots()

          plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

          ax.set_xlabel("–í—Ä–µ–º—è, —á")
          ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
          ax.legend()

          list_graphics_word.append(fig) 

          graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏"
          list_heading_graphics_word.append(graphic)    
       # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
          df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)


          fig, ax = plt.subplots()

          plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

          ax.set_xlabel("–í—Ä–µ–º—è, —á")
          ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
          ax.set_yscale("log")
          ax.legend()

          list_graphics_word.append(fig) 
   
          graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏"
          list_heading_graphics_word.append(graphic) 

       ### —É—Å—Ä–µ–¥–µ–Ω–Ω—ã–µ    
       #–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö    

          list_time = []
          for i in col_mapping:
              numer=float(i)
              list_time.append(numer)


          list_concentration=df_averaged_concentrations.loc['mean'].tolist()
          err_y_2=df_averaged_concentrations.loc['std'].tolist()


          fig, ax = plt.subplots()
          plt.errorbar(list_time,list_concentration,yerr=err_y_2, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
          plt.xlabel("–í—Ä–µ–º—è, —á")
          plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)

          list_graphics_word.append(fig) 

          graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
          list_heading_graphics_word.append(graphic)  

       #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
          list_time.remove(0)
          list_concentration.remove(0)
          err_y_2.remove(0) 


          fig, ax = plt.subplots()
          plt.errorbar(list_time,list_concentration,yerr=err_y_2, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
          ax.set_yscale("log")
          plt.xlabel("–í—Ä–µ–º—è, —á")
          plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)

          list_graphics_word.append(fig) 

          graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
          list_heading_graphics_word.append(graphic) 

       ############### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

          df_without_numer=df.drop(['–ù–æ–º–µ—Ä'],axis=1)
          count_row=df_without_numer.shape[0]

          list_count_row=range(count_row)


          ###Cmax
          list_cmax_1=[]
          list_cmax_2=[] #–º–µ–Ω—å—à–µ
          for i in list_count_row:
              cmax_1=float(max(df_without_numer.iloc[[i]].iloc[0].tolist()))
              list_cmax_1.append(cmax_1)

              list_c=df_without_numer.iloc[[i]].iloc[0].tolist()
              #—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤—Ç–æ—Ä—É—é –°max, –Ω—É–∂–Ω–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –°max1, –Ω–æ —Ç–∞–∫ –∂–µ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ –Ω–µ–≥–æ, —Ç.–∫ –≤–Ω–∞—á–∞–ª–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤–µ—â–µ—Å—Ç–≤–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç –∏ —Ç–æ—á–∫–∞ –¥–æ –ø–µ—Ä–≤–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –±–æ–ª—å—à–µ, –Ω–µ–∂–µ–ª–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–∏–∫, –∞ –ø–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç–∏—Ç—å —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫–∏ –Ω–∞ —Å–ø—É—Å–∫–µ –ø–µ—Ä–≤–æ–≥–æ –ø–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –°max2.

              index_cmax_1=list_c.index(cmax_1)
              list_for_cmax2_plus_descent=list_c[index_cmax_1+1:]

              size_list=len(list_for_cmax2_plus_descent)
              number_index=range(size_list)

              list_cmax2=[]
              for i in number_index:
                  #list_cmax2_2=[]
                  #if i-1 != -1:
                     #list_cmax2_1=[]
                  if ((list_for_cmax2_plus_descent[i-1])<(list_for_cmax2_plus_descent[i])) and ((list_for_cmax2_plus_descent[i])>(list_for_cmax2_plus_descent[i+1])) and ((i-1) != -1):
                     list_cmax2.append(list_for_cmax2_plus_descent[i])
                     break
                     #list_cmax_2_2.append(list_cmax2_1)
              list_cmax_2.append(list_cmax2)
          list_cmax_2=[x for l in list_cmax_2 for x in l]   

          ###Tmax   
          list_Tmax_1=[]
          for cmax in list_cmax_1:
              for column in df.columns:
                  for num, row in df.iterrows():
                      if df.iloc[num][column] == cmax:
                         list_Tmax_1.append(f"{column}")
        
          list_Tmax_float_1=[]           
          for i in list_Tmax_1:
              Tmax=float(i)
              list_Tmax_float_1.append(Tmax)

          list_Tmax_2=[]
          for cmax in list_cmax_2:
              for column in df.columns:
                  for num, row in df.iterrows():
                      if df.iloc[num][column] == cmax:
                         list_Tmax_2.append(f"{column}")
        
          list_Tmax_float_2=[]           
          for i in list_Tmax_2:
              Tmax=float(i)
              list_Tmax_float_2.append(Tmax)  

          ###AUC0-t
          list_AUC_0_T=[]
          if method_auc == 'linear':
             for i in range(0,count_row):
                 list_columns_T=[]
                 for column in df_without_numer.columns:
                     list_columns_T.append(float(column))
                 list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                 
                 AUC_0_T=np.trapz(list_concentration,x=list_columns_T)
                 list_AUC_0_T.append(AUC_0_T)
          if method_auc == 'linear-up/log-down':
             for i in range(0,count_row):
                 list_columns_T=[]
                 for column in df_without_numer.columns:
                     list_columns_T.append(float(column))
                 list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                 
                 list_c = list_concentration
                 list_t = list_columns_T
                 
                 cmax=max(list_c)
                 cmax_index = list_c.index(cmax)
                 ### cmax –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –∏ –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–π —á–∞—Å—Ç–∏ 
                 list_before_cmax_—Å=list_c[:cmax_index+1]
                 list_after_cmax_—Å=list_c[cmax_index:]
                 list_before_cmax_t=list_t[:cmax_index+1]
                 list_after_cmax_t=list_t[cmax_index:]
                 
                 ####–≤–æ—Å—Ö–æ–¥—è—â–∞—è —á–∞—Å—Ç—å
                 AUC_0_T_before=np.trapz(list_before_cmax_—Å,x=list_before_cmax_t)
                 
                 #####–Ω–∏—Å—Ö–æ–¥—è—â–∞—è (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .py –Ω–µ–≤–µ—Ä–Ω–æ–µ)
                 count_i = len(list_after_cmax_—Å)

                 list_range= range(0,count_i)
                 list_AUC_0_T_after=[]
                 AUC_0_T=0
                 b=0
                 for i in list_range:
                     if b<count_i-1:
                         AUC_0_T+=(list_after_cmax_t[i+1]-list_after_cmax_t[i])/(np.log(np.asarray(list_after_cmax_—Å[i])/np.asarray(list_after_cmax_—Å[i+1]))) *(list_after_cmax_—Å[i]-list_after_cmax_—Å[i+1])
                         b+=1
                         list_AUC_0_T_after.append(AUC_0_T)
                         
                 AUC_0_T_after = list_AUC_0_T_after[-1]
                 
                 AUC_O_T = AUC_0_T_before + AUC_0_T_after
                 
                 list_AUC_0_T.append(AUC_O_T)

          ####–°max/AUC0-t
          list_–°max_division_AUC0_t_for_division=zip(list_cmax_1,list_AUC_0_T)
          list_–°max_division_AUC0_t=[]
          for i,j in list_–°max_division_AUC0_t_for_division:
                  list_–°max_division_AUC0_t.append(i/j)


          ####KEL
          list_kel_total=[]
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
              list_concentration.remove(0)
              list_c=list_concentration

              list_time=df_without_numer.columns.tolist()
              list_time.remove(0) 

              list_t=[]
              for i in list_time:
                  i=float(i)
                  list_t.append(i)

              #—Å—Ä–µ–∑_–±–µ–∑_cmax
              max_value_c=max(list_c)
              index_cmax=list_c.index(max_value_c)

              list_c_without_cmax=list_c[index_cmax+1:]
              list_t_without_cmax=list_t[index_cmax+1:]

              #—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
              count_for_0_1=len(list_c_without_cmax)
              list_range_for_0_1=range(0,count_for_0_1)

              list_time_0=[]
              list_conc_0=[]
              for i in list_range_for_0_1:
                  if list_c_without_cmax[i] !=0:
                     list_conc_0.append(list_c_without_cmax[i])
                     list_time_0.append(list_t_without_cmax[i]) 
              ################################

              n_points=len(list_conc_0)
              list_n_points = range(0,n_points)

              #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —É–º–µ–Ω—å—â–∞—é—â–µ–º—Å—è –∫–æ–ª, —Ç–æ—á–µ–∫
              list_for_kel_c=[]
              for j in list_n_points:
                  if j<n_points:
                     list_c_new=list_conc_0[j:n_points]
                     list_for_kel_c.append(list_c_new)
              list_for_kel_c.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
              list_for_kel_c.pop(-1)  #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏     

              list_for_kel_t=[]
              for j in list_n_points:
                  if j<n_points:
                     list_t_new=list_time_0[j:n_points]
                     list_for_kel_t.append(list_t_new)
              list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
              list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ 

              list_ct_zip=zip(list_for_kel_c,list_for_kel_t)

              list_kel=[]
              list_r=[]
              for i,j in list_ct_zip:

                  n_points_r=len(i)

                  np_c=np.asarray(i)
                  np_t_1=np.asarray(j).reshape((-1,1))

                  np_c_log=np.log(np_c)

                  model = LinearRegression().fit(np_t_1,np_c_log)

                  np_t=np.asarray(j)
                  a=np.corrcoef(np_t, np_c_log)
                  cor=((a[0])[1])
                  r_sq=cor**2

                  adjusted_r_sq=1-((1-r_sq)*((n_points_r-1))/(n_points_r-2))

                  ########################################
                  kel=abs(model.coef_[0])
                  list_kel.append(kel)
                  list_r.append(adjusted_r_sq)

              #–¥–µ–ª–∞–µ–º —Å—Ä–µ–∑—ã —Å–ø–∏—Å–æ–∫–æ–≤ –¥–æ rmax
              max_r=max(list_r)

              index_max_r= list_r.index(max_r)

              list_r1=list_r
              list_kel1=list_kel

              number_elem_list_r1=len(list_r1)

              list_range_kel=range(0,number_elem_list_r1) 

              list_kel_total_1=[]
              for i in list_range_kel:

                  if abs(list_r[index_max_r] - list_r1[i]) < 0.0001: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç rmax
                     list_kel_total.append(list_kel1[i]*math.log(math.exp(1))) #–æ—Ç–¥–∞—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ rmax —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
                     break #—Å–∞–º–∞—è —Ä–∞–Ω–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–æ–≤—Ä—è—é—â–∞—è —É—Å–ª–æ–≤–∏—é

              for i in list_kel_total_1:
                  list_kel_total.append(i) 


          ####T1/2
          list_half_live=[]
          for i in list_kel_total:
              half_live=math.log(2)/i
              list_half_live.append(half_live)


          ###AUC0-inf 

          list_auc0_inf=[] 

          list_of_list_c=[]
          for i in range(0,count_row):
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
              list_concentration.remove(0)
              list_c = list_concentration
              list_c.reverse() ### –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∏—Å–∫–∞ Clast –Ω–µ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é
              list_of_list_c.append(list_c)

          list_zip_c_AUCt_inf=zip(list_kel_total,list_of_list_c)

              #AUCt-inf 
          list_auc_t_inf=[]     
          for i,j in list_zip_c_AUCt_inf:
              for clast in j:
                  if clast != 0:
                     clast_true=clast
                     break
              auc_t_inf=clast_true/i
              list_auc_t_inf.append(auc_t_inf)

          list_auc_t_inf_and_AUC_0_T_zip=zip(list_AUC_0_T,list_auc_t_inf)

          for i,j in list_auc_t_inf_and_AUC_0_T_zip:
              auc0_inf=i+j    
              list_auc0_inf.append(auc0_inf)


          ####CL
          list_cl=[]

          for i in list_auc0_inf:
              cl = float(dose_po_sub)/i * 1000
              list_cl.append(cl)


          ####Vd
          list_Vd=[]

          list_zip_kel_cl=zip(list_kel_total,list_cl)

          for i,j in list_zip_kel_cl:
              Vd = j/i
              list_Vd.append(Vd)


          ###AUMC
          list_AUMCO_inf=[]

          list_AUMC0_t=[]

          list_C_last=[]
          list_T_last=[]
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              list_C_last.append(list_concentration[-1]) 
              list_T_last.append(list_columns_T[-1]) 

              list_len=len(list_concentration)

              list_aumc_i=[]
              for i in range(0,list_len):
                  AUMC=(list_columns_T[i] - list_columns_T[i-1]) *  ((list_concentration[i] * list_columns_T[i] + list_concentration[i-1] * list_columns_T[i-1])/2)
                  list_aumc_i.append(AUMC)

              list_aumc_i.pop(0)

              a=0
              list_AUMC0_t_1=[]
              for i in list_aumc_i:
                  a+=i
                  list_AUMC0_t_1.append(a)
              list_AUMC0_t.append(list_AUMC0_t_1[-1])

          list_zip_for_AUMC_inf=zip(list_kel_total,list_C_last,list_T_last)

          list_AUMCt_inf=[]
          for k,c,t in list_zip_for_AUMC_inf:
              AUMCt_inf=c*t/k+c/(k*k)
              list_AUMCt_inf.append(AUMCt_inf)


          list_AUMC_zip=zip(list_AUMC0_t,list_AUMCt_inf)

          for i,j in list_AUMC_zip:
              AUMCO_inf=i+j
              list_AUMCO_inf.append(AUMCO_inf)

          ###MRT0-inf
          list_MRT0_inf=[]

          list_zip_AUMCO_inf_auc0_inf = zip(list_AUMCO_inf,list_auc0_inf)

          for i,j in list_zip_AUMCO_inf_auc0_inf:
              MRT0_inf=i/j
              list_MRT0_inf.append(MRT0_inf)

          ##################### –§—Ä–µ–π–º –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

          ### –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
          ### –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
          list_for_index=df["–ù–æ–º–µ—Ä"].tolist()
          df_PK=pd.DataFrame(list(zip(list_cmax_1,list_Tmax_float_1,list_cmax_2,list_Tmax_float_2,list_MRT0_inf,list_half_live,list_AUC_0_T,list_auc0_inf,list_AUMCO_inf,list_–°max_division_AUC0_t,list_kel_total,list_cl,list_Vd)),columns=['Cmax','Tmax','Cmax(2)','Tmax(2)','MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-‚àû','–°max/AUC0-t','Kel','CL','Vd'],index=list_for_index) 

          ###–æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

          col_mapping_PK = df_PK.columns.tolist()

          list_gmean_PK=[]

          list_cv_PK=[] 

          for i in col_mapping_PK:

              list_ser_PK=df_PK[i].tolist()

              def g_mean(list_ser_PK):
                  a=np.log(list_ser_PK)
                  return np.exp(a.mean())
              Gmean_PK=g_mean(list_ser_PK)
              list_gmean_PK.append(Gmean_PK)

              cv_std_PK=lambda x: np.std(x, ddof= 1 )
              cv_mean_PK=lambda x: np.mean(x)
              CV_std_PK=cv_std(list_ser_PK)

              CV_mean_PK=cv_mean(list_ser_PK)

              CV_PK=(CV_std_PK/CV_mean_PK * 100)
              list_cv_PK.append(CV_PK)


          df_averaged_concentrations_PK=df_PK.describe()

          df_averaged_concentrations_1_PK= df_averaged_concentrations_PK.drop(['count', '25%','75%'],axis=0)
          df_averaged_concentrations_2_PK= df_averaged_concentrations_1_PK.rename(index={"50%": "median"})
          df_averaged_concentrations_2_PK.loc[len(df_averaged_concentrations_2_PK.index )] = list_gmean_PK
          df_averaged_3_PK = df_averaged_concentrations_2_PK.rename(index={5 : "Gmean"})
          df_round_without_CV_PK=df_averaged_3_PK
          df_round_without_CV_PK.loc[len(df_round_without_CV_PK.index )] = list_cv_PK
          df_averaged_3_PK = df_round_without_CV_PK.rename(index={6 : "CV, %"})


          df_concat_PK_po_sub= pd.concat([df_PK,df_averaged_3_PK],sort=False,axis=0)

          ###–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

          series_Cmax=df_concat_PK_po_sub['Cmax']
          list_Cmax_str_f=["%.2f" % round(v,2) for v in series_Cmax.tolist()]
          series_Cmax=pd.Series(list_Cmax_str_f, index = df_concat_PK_po_sub.index.tolist(), name='Cmax ' +"("+measure_unit+")")

          series_Cmax_2=df_concat_PK_po_sub['Cmax(2)']
          list_Cmax_str_f_2=["%.2f" % round(v,2) for v in series_Cmax_2.tolist()]
          series_Cmax_2=pd.Series(list_Cmax_str_f_2, index = df_concat_PK_po_sub.index.tolist(), name='Cmax(2) ' +"("+measure_unit+")")

          series_Tmax=df_concat_PK_po_sub['Tmax']
          list_Tmax_str_f=["%.2f" % round(v,2) for v in series_Tmax.tolist()]
          series_Tmax=pd.Series(list_Tmax_str_f, index = df_concat_PK_po_sub.index.tolist(), name='Tmax ' +"("+"—á"+")")

          series_Tmax_2=df_concat_PK_po_sub['Tmax(2)']
          list_Tmax_str_f_2=["%.2f" % round(v,2) for v in series_Tmax_2.tolist()]
          series_Tmax_2=pd.Series(list_Tmax_str_f_2, index = df_concat_PK_po_sub.index.tolist(), name='Tmax(2) ' +"("+"—á"+")")

          series_MRT0_inf= df_concat_PK_po_sub['MRT0‚Üí‚àû']
          list_MRT0_inf_str_f=["%.3f" % round(v,3) for v in series_MRT0_inf.tolist()]
          series_MRT0_inf=pd.Series(list_MRT0_inf_str_f, index = df_concat_PK_po_sub.index.tolist(), name='MRT0‚Üí‚àû '+"("+"—á"+")")

          series_half_live= df_concat_PK_po_sub['T1/2']
          list_half_live_str_f=["%.2f" % round(v,2) for v in series_half_live.tolist()]
          series_half_live=pd.Series(list_half_live_str_f, index = df_concat_PK_po_sub.index.tolist(), name='T1/2 '+"("+"—á"+")")

          series_AUC0_t= df_concat_PK_po_sub['AUC0-t']
          list_AUC0_t_str_f=["%.2f" % round(v,2) for v in series_AUC0_t.tolist()]
          series_AUC0_t=pd.Series(list_AUC0_t_str_f, index = df_concat_PK_po_sub.index.tolist(), name='AUC0-t '+"("+measure_unit+"√ó—á" +")")

          series_AUC0_inf= df_concat_PK_po_sub['AUC0‚Üí‚àû']
          list_AUC0_inf_str_f=["%.2f" % round(v,2) for v in series_AUC0_inf.tolist()]
          series_AUC0_inf=pd.Series(list_AUC0_inf_str_f, index = df_concat_PK_po_sub.index.tolist(), name='AUC0‚Üí‚àû '+"("+measure_unit+"√ó—á" +")")

          series_AUMC0_inf= df_concat_PK_po_sub['AUMC0-‚àû']
          list_AUMC0_inf_str_f=["%.2f" % round(v,2) for v in series_AUMC0_inf.tolist()]
          series_AUMC0_inf=pd.Series(list_AUMC0_inf_str_f, index = df_concat_PK_po_sub.index.tolist(), name='AUMC0-‚àû '+"("+measure_unit+"√ó—á\u00B2" +")")

          series_–°max_dev_AUC0_t= df_concat_PK_po_sub['–°max/AUC0-t']
          list_–°max_dev_AUC0_t_str_f=["%.4f" % round(v,4) for v in series_–°max_dev_AUC0_t.tolist()]
          series_–°max_dev_AUC0_t=pd.Series(list_–°max_dev_AUC0_t_str_f, index = df_concat_PK_po_sub.index.tolist(), name='–°max/AUC0-t '+"("+"—á\u207B\u00B9"+")")

          series_Kel= df_concat_PK_po_sub['Kel']
          list_Kel_str_f=["%.4f" % round(v,4) for v in series_Kel.tolist()]
          series_Kel=pd.Series(list_Kel_str_f, index = df_concat_PK_po_sub.index.tolist(), name='Kel '+"("+"—á\u207B\u00B9"+")")

          series_CL= df_concat_PK_po_sub['CL']
          list_CL_str_f=["%.2f" % round(v,2) for v in series_CL.tolist()]
          series_CL=pd.Series(list_CL_str_f, index = df_concat_PK_po_sub.index.tolist(), name='CL ' +"("+"–ª/—á"+")")

          series_Vd= df_concat_PK_po_sub['Vd']
          list_Vd_str_f=["%.1f" % round(v,1) for v in series_Vd.tolist()]
          series_Vd=pd.Series(list_Vd_str_f, index = df_concat_PK_po_sub.index.tolist(), name='Vd ' +"("+"–ª/–∫–≥"+")")

          df_total_PK_po_sub = pd.concat([series_Cmax, series_Tmax, series_Cmax_2, series_Tmax_2, series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_–°max_dev_AUC0_t,series_Kel,series_CL,series_Vd], axis= 1 ) 
          df_total_PK_po_sub.index.name = '–ù–æ–º–µ—Ä'

          ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

          df_total_PK_po_sub1=df_total_PK_po_sub.copy()
          df_total_PK_po_sub1.iloc[-6,:],df_total_PK_po_sub1.iloc[-2,:]=df_total_PK_po_sub.iloc[-2,:],df_total_PK_po_sub.iloc[-6,:]

          df_total_PK_po_sub=df_total_PK_po_sub1

          df_total_PK_po_sub1=df_total_PK_po_sub.copy()
          df_total_PK_po_sub1.iloc[-4,:],df_total_PK_po_sub1.iloc[-5,:]=df_total_PK_po_sub.iloc[-5,:],df_total_PK_po_sub.iloc[-4,:]

          df_total_PK_po_sub=df_total_PK_po_sub1

          df_total_PK_po_sub = df_total_PK_po_sub.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')


          table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
          list_heading_word.append(table_heading)
          
          list_table_word.append(df_total_PK_po_sub)

          ####–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          list_PK_Cmax_1_not_round = df_PK['Cmax'].tolist()
          list_PK_Tmax_1_not_round = df_PK['Tmax'].tolist() 
          list_PK_MRT0_inf_not_round = df_PK['MRT0‚Üí‚àû'].tolist() 
          list_PK_half_live_not_round = df_PK['T1/2'].tolist() 
          list_PK_AUC0_t_not_round = df_PK['AUC0-t'].tolist()
          list_PK_AUC0_inf_not_round = df_PK['AUC0‚Üí‚àû'].tolist()
          list_PK_AUMC0_inf_not_round = df_PK['AUMC0-‚àû'].tolist()
          list_PK_–°max_dev_AUC0_t_not_round = df_PK['–°max/AUC0-t'].tolist()
          list_PK_Kel_not_round = df_PK['Kel'].tolist()



          list_list_PK_parametr_po_sub=[list_PK_Cmax_1_not_round,list_PK_AUC0_t_not_round,list_PK_Kel_not_round,list_PK_AUC0_inf_not_round,list_PK_half_live_not_round,list_PK_AUMC0_inf_not_round,list_PK_MRT0_inf_not_round,list_PK_–°max_dev_AUC0_t_not_round]
          list_parametr_mean_h_po_sub=[]
          for i in list_list_PK_parametr_po_sub:
               n=len(i)

               def confidential_interval(i):
                   if n < 30:
                      h = statistics.stdev(i)
                      mean = np.mean(i)
                   else:
                      h = statistics.stdev(i)  ### –ø—Ä–æ—è—Å–Ω–∏—Ç—å –º–æ–º–µ–Ω—Ç —Å n-1
                      mean = np.mean(i)
                   return ([mean,h]) 
               func_mean_h = confidential_interval(i)

               list_parametr_mean_h_po_sub.append(func_mean_h)


          list_mean_h_po_sub_Cmax_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_po_sub[0]]
          parametr_round_mean_h_Cmax=str(list_mean_h_po_sub_Cmax_round[0]) +"¬±"+str(list_mean_h_po_sub_Cmax_round[1])

          list_mean_h_po_sub_AUC0_t_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_po_sub[1]] 
          parametr_round_mean_h_AUC0_t=str(list_mean_h_po_sub_AUC0_t_round[0]) +"¬±"+str(list_mean_h_po_sub_AUC0_t_round[1]) 

          list_mean_h_po_sub_Kel_round=["%.4f" % round(v,4) for v in list_parametr_mean_h_po_sub[2]]
          parametr_round_mean_h_Kel=str(list_mean_h_po_sub_Kel_round[0]) +"¬±"+str(list_mean_h_po_sub_Kel_round[1])

          list_mean_h_po_sub_AUC0_inf_round= ["%.2f" % round(v,2) for v in list_parametr_mean_h_po_sub[3]]
          parametr_round_mean_h_AUC0_inf=str(list_mean_h_po_sub_AUC0_inf_round[0]) +"¬±"+str(list_mean_h_po_sub_AUC0_inf_round[1]) 

          list_mean_h_po_sub_half_live_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_po_sub[4]]
          parametr_round_mean_h_half_live=str(list_mean_h_po_sub_half_live_round[0]) +"¬±"+str(list_mean_h_po_sub_half_live_round[1])

          list_mean_h_po_sub_AUMC0_inf_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_po_sub[5]] 
          parametr_round_mean_h_AUMC0_inf=str(list_mean_h_po_sub_AUMC0_inf_round[0]) +"¬±"+str(list_mean_h_po_sub_AUMC0_inf_round[1]) 

          list_mean_h_po_sub_MRT0_inf_round=["%.3f" % round(v,3) for v in list_parametr_mean_h_po_sub[6]]
          parametr_round_mean_h_MRT0_inf=str(list_mean_h_po_sub_MRT0_inf_round[0]) +"¬±"+str(list_mean_h_po_sub_MRT0_inf_round[1])

          list_mean_h_po_sub_–°max_dev_AUC0_t_round=["%.4f" % round(v,4) for v in list_parametr_mean_h_po_sub[7]]
          parametr_round_mean_h_–°max_dev_AUC0_t=str(list_mean_h_po_sub_–°max_dev_AUC0_t_round[0]) +"¬±"+str(list_mean_h_po_sub_–°max_dev_AUC0_t_round[1])

          list_parametr_round_mean_h_po_sub= [parametr_round_mean_h_Cmax,parametr_round_mean_h_AUC0_t,parametr_round_mean_h_Kel,parametr_round_mean_h_AUC0_inf,parametr_round_mean_h_half_live,parametr_round_mean_h_AUMC0_inf,parametr_round_mean_h_MRT0_inf,parametr_round_mean_h_–°max_dev_AUC0_t]

          t_mean_po_sub = str("%.2f" % round(np.mean(list_PK_Tmax_1_not_round),2))     
          list_parametr_round_mean_h_po_sub.insert(1,t_mean_po_sub)


       else:
          st.info('‚ùï‚ùóÔ∏è‚ùï –ó–∞–≥—Ä—É–∑–∏—Ç—å XLSX —Ñ–∞–π–ª –∏ –≤–≤–µ—Å—Ç–∏ –¥–æ–∑—É –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞')

       ##############################################################################################################

       st.title('–ü–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏')

       st.subheader('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ XLSX')
       uploaded_file_3 = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏", key='–§–∞–π–ª –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')
       
       #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
       if uploaded_file_3 is not None:
          save_uploadedfile(uploaded_file_3)
          st.session_state["uploaded_file_3"] = uploaded_file_3.name

       dose_po_tab = st.text_input("–î–æ–∑–∞ –ø—Ä–∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏ —Ç–∞–±–ª–µ—Ç–∫–∏", key='–î–æ–∑–∞ –ø—Ä–∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏ —Ç–∞–±–ª–µ—Ç–∫–∏ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞', value = st.session_state["dose_po_tab"]) 
       
       st.session_state["dose_po_tab"] = dose_po_tab

       if "uploaded_file_3" in st.session_state and dose_po_tab and measure_unit:

          df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_3"]))
          st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏')
          st.write(df)

          table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏'
          list_heading_word.append(table_heading)

          col_mapping = df.columns.tolist()
          col_mapping.remove('–ù–æ–º–µ—Ä')

          list_gmean=[]
          list_cv=[] 
          for i in col_mapping:

              list_ser=df[i].tolist()
              list_ser_cv = list_ser#–Ω—É–∂–Ω–æ —Å –Ω—É–ª—è–º–∏ –¥–ª—è CV

              #—É–±—Ä–∞—Ç—å –Ω—É–ª–∏, —Ç.–∫ –Ω—É–ª–∏ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å –Ω—É–ª–µ–≤–æ–µ gmean
              count_for_range_ser=len(list_ser)
              list_range_ser=range(0,count_for_range_ser)
              
              list_ser_without_0=[]
              for i in list_range_ser:
                  if list_ser[i] !=0:
                     list_ser_without_0.append(list_ser[i])

              list_ser = list_ser_without_0

              def g_mean(list_ser):
                  a=np.log(list_ser)
                  return np.exp(a.mean())
              Gmean=g_mean(list_ser)
              list_gmean.append(Gmean)

              cv_std=lambda x: np.std(x, ddof= 1 )
              cv_mean=lambda x: np.mean(x)
              CV_std=cv_std(list_ser_cv)
              CV_mean=cv_mean(list_ser_cv)
              CV=CV_std/CV_mean * 100
              list_cv.append(CV)
          
          #–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è None –∏–∑ —Ñ—Ä–µ–π–º–∞
          list_gmean.pop(0)
          list_gmean.insert(0,0)
          list_cv.pop(0)
          list_cv.insert(0,0)

          df_averaged_concentrations=df.describe()
          df_averaged_concentrations_1= df_averaged_concentrations.drop(['count', '25%','75%'],axis=0)
          df_averaged_concentrations_2= df_averaged_concentrations_1.rename(index={"50%": "median"})
          df_averaged_concentrations_2.loc[len(df_averaged_concentrations_2.index )] = list_gmean
          df_averaged_3 = df_averaged_concentrations_2.rename(index={5 : "Gmean"})
          df_averaged_3.loc[len(df_averaged_3.index )] = list_cv
          df_averaged_3 = df_averaged_3.rename(index={6 : "CV, %"})

          df_index=df.set_index('–ù–æ–º–µ—Ä')
          df_concat= pd.concat([df_index,df_averaged_3],sort=False,axis=0)
          df_concat_round=df_concat.round(2)
          
          ###–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–∞ —Å –Ω—É–ª—è–º–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
          col_mapping = df_concat_round.columns.tolist()

          list_list_series=[]
          for i in col_mapping:
              list_series = df_concat_round[i].tolist()
               
              list_series_round = []
              for i in list_series:
                  value = "%.2f" % round(i,2)
                  list_series_round.append(value)
                   
              list_list_series.append(list_series_round)

          df_concat_round_str = pd.DataFrame(list_list_series, columns = df_concat_round.index.tolist(),index=col_mapping) 
          df_concat_round_str_transpose = df_concat_round_str.transpose()
          df_concat_round_str_transpose.index.name = '–ù–æ–º–µ—Ä'

          ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

          df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
          df_concat_round_str_transpose1.iloc[-6,:],df_concat_round_str_transpose1.iloc[-2,:]=df_concat_round_str_transpose.iloc[-2,:],df_concat_round_str_transpose.iloc[-6,:]

          df_concat_round_str_transpose=df_concat_round_str_transpose1

          df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
          df_concat_round_str_transpose1.iloc[-4,:],df_concat_round_str_transpose1.iloc[-5,:]=df_concat_round_str_transpose.iloc[-5,:],df_concat_round_str_transpose.iloc[-4,:]

          df_concat_round_str_transpose=df_concat_round_str_transpose1

          df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')
          
          #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–±–ª—Ü–æ–≤
          list_time_round =["%.2f" % round(v,2) for v in df_concat_round_str_transpose.columns.tolist()]
          df_concat_round_str_transpose.columns = list_time_round
          
          list_table_word.append(df_concat_round_str_transpose)

       ########### –≥—Ä–∞—Ñ–∏–∫–∏    

          ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

          # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
          count_row_df = len(df.axes[0])

          list_time = []
          for i in col_mapping:
              numer=float(i)
              list_time.append(numer)

          for r in range(0,count_row_df):

              list_concentration=df.iloc[r].tolist()

              numer_animal=list_concentration[0]

              list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

              list_concentration = [float(v) for v in list_concentration]


              fig, ax = plt.subplots()
              plt.plot(list_time,list_concentration,marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue")
              plt.xlabel("–í—Ä–µ–º—è, —á")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)

              list_graphics_word.append(fig) 

              graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏,  '+numer_animal
              list_heading_graphics_word.append(graphic) 

           #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
              count_for_0_1=len(list_concentration)
              list_range_for_0_1=range(0,count_for_0_1)

              list_time_0=[]
              list_for_log_1=[]
              for i in list_range_for_0_1:
                  if list_concentration[i] !=0:
                     list_for_log_1.append(list_concentration[i])
                     list_time_0.append(list_time[i]) 

              fig, ax = plt.subplots()
              plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue")
              ax.set_yscale("log")
              plt.xlabel("–í—Ä–µ–º—è, —á")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)

              list_graphics_word.append(fig) 

              graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏,  '+numer_animal
              list_heading_graphics_word.append(graphic)

       # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

          df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
          df_for_plot_conc_1 = df_for_plot_conc.transpose()
          list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()

          fig, ax = plt.subplots()

          plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

          ax.set_xlabel("–í—Ä–µ–º—è, —á")
          ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
          ax.legend()

          list_graphics_word.append(fig) 

          graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏"
          list_heading_graphics_word.append(graphic)    
       # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
          df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)


          fig, ax = plt.subplots()

          plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

          ax.set_xlabel("–í—Ä–µ–º—è, —á")
          ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
          ax.set_yscale("log")
          ax.legend()

          list_graphics_word.append(fig) 

          graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏"
          list_heading_graphics_word.append(graphic)      


       ### —É—Å—Ä–µ–¥–µ–Ω–Ω—ã–µ         
        #–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö   
          list_time = []
          for i in col_mapping:
              numer=float(i)
              list_time.append(numer)


          list_concentration=df_averaged_concentrations.loc['mean'].tolist()
          err_y_3=df_averaged_concentrations.loc['std'].tolist()


          fig, ax = plt.subplots()
          plt.errorbar(list_time,list_concentration,yerr=err_y_3, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
          plt.xlabel("–í—Ä–µ–º—è, —á")
          plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)

          list_graphics_word.append(fig) 

          graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏'
          list_heading_graphics_word.append(graphic) 

       #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
          list_time.remove(0)
          list_concentration.remove(0)
          err_y_3.remove(0)       

          fig, ax = plt.subplots()
          plt.errorbar(list_time,list_concentration,yerr=err_y_3, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
          ax.set_yscale("log")
          plt.xlabel("–í—Ä–µ–º—è, —á")
          plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)

          list_graphics_word.append(fig) 

          graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏'
          list_heading_graphics_word.append(graphic) 

       ############### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

          df_without_numer=df.drop(['–ù–æ–º–µ—Ä'],axis=1)
          count_row=df_without_numer.shape[0]

          list_count_row=range(count_row)

          ###Cmax
          list_cmax_1=[]
          list_cmax_2=[] #–º–µ–Ω—å—à–µ
          for i in list_count_row:
              cmax_1=float(max(df_without_numer.iloc[[i]].iloc[0].tolist()))
              list_cmax_1.append(cmax_1)

              list_c=df_without_numer.iloc[[i]].iloc[0].tolist()
              #—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤—Ç–æ—Ä—É—é –°max, –Ω—É–∂–Ω–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –°max1, –Ω–æ —Ç–∞–∫ –∂–µ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ –Ω–µ–≥–æ, —Ç.–∫ –≤–Ω–∞—á–∞–ª–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤–µ—â–µ—Å—Ç–≤–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç –∏ —Ç–æ—á–∫–∞ –¥–æ –ø–µ—Ä–≤–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –±–æ–ª—å—à–µ, –Ω–µ–∂–µ–ª–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–∏–∫, –∞ –ø–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç–∏—Ç—å —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫–∏ –Ω–∞ —Å–ø—É—Å–∫–µ –ø–µ—Ä–≤–æ–≥–æ –ø–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –°max2.

              index_cmax_1=list_c.index(cmax_1)
              list_for_cmax2_plus_descent=list_c[index_cmax_1+1:]

              size_list=len(list_for_cmax2_plus_descent)
              number_index=range(size_list)

              list_cmax2=[]
              for i in number_index:
                  #list_cmax2_2=[]
                  #if i-1 != -1:
                     #list_cmax2_1=[]
                  if ((list_for_cmax2_plus_descent[i-1])<(list_for_cmax2_plus_descent[i])) and ((list_for_cmax2_plus_descent[i])>(list_for_cmax2_plus_descent[i+1])) and ((i-1) != -1):
                     list_cmax2.append(list_for_cmax2_plus_descent[i])
                     break
                     #list_cmax_2_2.append(list_cmax2_1)
              list_cmax_2.append(list_cmax2)
          list_cmax_2=[x for l in list_cmax_2 for x in l]   

          ###Tmax   
          list_Tmax_1=[]
          for cmax in list_cmax_1:
              for column in df.columns:
                  for num, row in df.iterrows():
                      if df.iloc[num][column] == cmax:
                         list_Tmax_1.append(f"{column}")
        
          list_Tmax_float_1=[]           
          for i in list_Tmax_1:
              Tmax=float(i)
              list_Tmax_float_1.append(Tmax)

          list_Tmax_2=[]
          for cmax in list_cmax_2:
              for column in df.columns:
                  for num, row in df.iterrows():
                      if df.iloc[num][column] == cmax:
                         list_Tmax_2.append(f"{column}")
        
          list_Tmax_float_2=[]           
          for i in list_Tmax_2:
              Tmax=float(i)
              list_Tmax_float_2.append(Tmax)  

          ###AUC0-t
          list_AUC_0_T=[]
          if method_auc == 'linear':
             for i in range(0,count_row):
                 list_columns_T=[]
                 for column in df_without_numer.columns:
                     list_columns_T.append(float(column))
                 list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                 
                 AUC_0_T=np.trapz(list_concentration,x=list_columns_T)
                 list_AUC_0_T.append(AUC_0_T)
          if method_auc == 'linear-up/log-down':
             for i in range(0,count_row):
                 list_columns_T=[]
                 for column in df_without_numer.columns:
                     list_columns_T.append(float(column))
                 list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                 
                 list_c = list_concentration
                 list_t = list_columns_T
                 
                 cmax=max(list_c)
                 cmax_index = list_c.index(cmax)
                 ### cmax –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –∏ –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–π —á–∞—Å—Ç–∏ 
                 list_before_cmax_—Å=list_c[:cmax_index+1]
                 list_after_cmax_—Å=list_c[cmax_index:]
                 list_before_cmax_t=list_t[:cmax_index+1]
                 list_after_cmax_t=list_t[cmax_index:]
                 
                 ####–≤–æ—Å—Ö–æ–¥—è—â–∞—è —á–∞—Å—Ç—å
                 AUC_0_T_before=np.trapz(list_before_cmax_—Å,x=list_before_cmax_t)
                 
                 #####–Ω–∏—Å—Ö–æ–¥—è—â–∞—è (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .py –Ω–µ–≤–µ—Ä–Ω–æ–µ)
                 count_i = len(list_after_cmax_—Å)

                 list_range= range(0,count_i)
                 list_AUC_0_T_after=[]
                 AUC_0_T=0
                 b=0
                 for i in list_range:
                     if b<count_i-1:
                         AUC_0_T+=(list_after_cmax_t[i+1]-list_after_cmax_t[i])/(np.log(np.asarray(list_after_cmax_—Å[i])/np.asarray(list_after_cmax_—Å[i+1]))) *(list_after_cmax_—Å[i]-list_after_cmax_—Å[i+1])
                         b+=1
                         list_AUC_0_T_after.append(AUC_0_T)
                         
                 AUC_0_T_after = list_AUC_0_T_after[-1]
                 
                 AUC_O_T = AUC_0_T_before + AUC_0_T_after
                 
                 list_AUC_0_T.append(AUC_O_T)



          ####–°max/AUC0-t
          list_–°max_division_AUC0_t_for_division=zip(list_cmax_1,list_AUC_0_T)
          list_–°max_division_AUC0_t=[]
          for i,j in list_–°max_division_AUC0_t_for_division:
                  list_–°max_division_AUC0_t.append(i/j)


          ####KEL
          list_kel_total=[]
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
              list_concentration.remove(0)
              list_c=list_concentration

              list_time=df_without_numer.columns.tolist()
              list_time.remove(0) 

              list_t=[]
              for i in list_time:
                  i=float(i)
                  list_t.append(i)

              #—Å—Ä–µ–∑_–±–µ–∑_cmax
              max_value_c=max(list_c)
              index_cmax=list_c.index(max_value_c)

              list_c_without_cmax=list_c[index_cmax+1:]
              list_t_without_cmax=list_t[index_cmax+1:]

              #—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
              count_for_0_1=len(list_c_without_cmax)
              list_range_for_0_1=range(0,count_for_0_1)

              list_time_0=[]
              list_conc_0=[]
              for i in list_range_for_0_1:
                  if list_c_without_cmax[i] !=0:
                     list_conc_0.append(list_c_without_cmax[i])
                     list_time_0.append(list_t_without_cmax[i]) 
              ################################

              n_points=len(list_conc_0)
              list_n_points = range(0,n_points)

              #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —É–º–µ–Ω—å—â–∞—é—â–µ–º—Å—è –∫–æ–ª, —Ç–æ—á–µ–∫
              list_for_kel_c=[]
              for j in list_n_points:
                  if j<n_points:
                     list_c_new=list_conc_0[j:n_points]
                     list_for_kel_c.append(list_c_new)
              list_for_kel_c.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
              list_for_kel_c.pop(-1)  #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏     

              list_for_kel_t=[]
              for j in list_n_points:
                  if j<n_points:
                     list_t_new=list_time_0[j:n_points]
                     list_for_kel_t.append(list_t_new)
              list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
              list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ 

              list_ct_zip=zip(list_for_kel_c,list_for_kel_t)

              list_kel=[]
              list_r=[]
              for i,j in list_ct_zip:

                  n_points_r=len(i)

                  np_c=np.asarray(i)
                  np_t_1=np.asarray(j).reshape((-1,1))

                  np_c_log=np.log(np_c)

                  model = LinearRegression().fit(np_t_1,np_c_log)

                  np_t=np.asarray(j)
                  a=np.corrcoef(np_t, np_c_log)
                  cor=((a[0])[1])
                  r_sq=cor**2

                  adjusted_r_sq=1-((1-r_sq)*((n_points_r-1))/(n_points_r-2))

                  ########################################
                  kel=abs(model.coef_[0])
                  list_kel.append(kel)
                  list_r.append(adjusted_r_sq)

              #–¥–µ–ª–∞–µ–º —Å—Ä–µ–∑—ã —Å–ø–∏—Å–æ–∫–æ–≤ –¥–æ rmax
              max_r=max(list_r)

              index_max_r= list_r.index(max_r)

              list_r1=list_r
              list_kel1=list_kel

              number_elem_list_r1=len(list_r1)

              list_range_kel=range(0,number_elem_list_r1) 

              list_kel_total_1=[]
              for i in list_range_kel:

                  if abs(list_r[index_max_r] - list_r1[i]) < 0.0001: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç rmax
                     list_kel_total.append(list_kel1[i]*math.log(math.exp(1))) #–æ—Ç–¥–∞—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ rmax —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
                     break #—Å–∞–º–∞—è —Ä–∞–Ω–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–æ–≤—Ä—è—é—â–∞—è —É—Å–ª–æ–≤–∏—é

              for i in list_kel_total_1:
                  list_kel_total.append(i) 


          ####T1/2
          list_half_live=[]
          for i in list_kel_total:
              half_live=math.log(2)/i
              list_half_live.append(half_live)



          ###AUC0-inf 

          list_auc0_inf=[] 

          list_of_list_c=[]
          for i in range(0,count_row):
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
              list_concentration.remove(0)
              list_c = list_concentration
              list_c.reverse() ### –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∏—Å–∫–∞ Clast –Ω–µ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é
              list_of_list_c.append(list_c)

          list_zip_c_AUCt_inf=zip(list_kel_total,list_of_list_c)

              #AUCt-inf 
          list_auc_t_inf=[]     
          for i,j in list_zip_c_AUCt_inf:
              for clast in j:
                  if clast != 0:
                     clast_true=clast
                     break
              auc_t_inf=clast_true/i
              list_auc_t_inf.append(auc_t_inf)

          list_auc_t_inf_and_AUC_0_T_zip=zip(list_AUC_0_T,list_auc_t_inf)

          for i,j in list_auc_t_inf_and_AUC_0_T_zip:
              auc0_inf=i+j    
              list_auc0_inf.append(auc0_inf)



          ####CL
          list_cl=[]

          for i in list_auc0_inf:
              cl = float(dose_po_tab)/i * 1000
              list_cl.append(cl)


          ####Vd
          list_Vd=[]

          list_zip_kel_cl=zip(list_kel_total,list_cl)

          for i,j in list_zip_kel_cl:
              Vd = j/i
              list_Vd.append(Vd)


          ###AUMC
          list_AUMCO_inf=[]

          list_AUMC0_t=[]

          list_C_last=[]
          list_T_last=[]
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              list_C_last.append(list_concentration[-1]) 
              list_T_last.append(list_columns_T[-1]) 

              list_len=len(list_concentration)

              list_aumc_i=[]
              for i in range(0,list_len):
                  AUMC=(list_columns_T[i] - list_columns_T[i-1]) *  ((list_concentration[i] * list_columns_T[i] + list_concentration[i-1] * list_columns_T[i-1])/2)
                  list_aumc_i.append(AUMC)

              list_aumc_i.pop(0)

              a=0
              list_AUMC0_t_1=[]
              for i in list_aumc_i:
                  a+=i
                  list_AUMC0_t_1.append(a)
              list_AUMC0_t.append(list_AUMC0_t_1[-1])

          list_zip_for_AUMC_inf=zip(list_kel_total,list_C_last,list_T_last)

          list_AUMCt_inf=[]
          for k,c,t in list_zip_for_AUMC_inf:
              AUMCt_inf=c*t/k+c/(k*k)
              list_AUMCt_inf.append(AUMCt_inf)


          list_AUMC_zip=zip(list_AUMC0_t,list_AUMCt_inf)

          for i,j in list_AUMC_zip:
              AUMCO_inf=i+j
              list_AUMCO_inf.append(AUMCO_inf)




          ###MRT0-inf
          list_MRT0_inf=[]

          list_zip_AUMCO_inf_auc0_inf = zip(list_AUMCO_inf,list_auc0_inf)

          for i,j in list_zip_AUMCO_inf_auc0_inf:
              MRT0_inf=i/j
              list_MRT0_inf.append(MRT0_inf)

          ##################### –§—Ä–µ–π–º –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

          ### –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
          list_for_index=df["–ù–æ–º–µ—Ä"].tolist()  
          df_PK=pd.DataFrame(list(zip(list_cmax_1,list_Tmax_float_1,list_cmax_2,list_Tmax_float_2,list_MRT0_inf,list_half_live,list_AUC_0_T,list_auc0_inf,list_AUMCO_inf,list_–°max_division_AUC0_t,list_kel_total,list_cl,list_Vd)),columns=['Cmax','Tmax', 'Cmax(2)','Tmax(2)', 'MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-‚àû','–°max/AUC0-t','Kel','CL','Vd'],index=list_for_index) 

          ###–æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

          col_mapping_PK = df_PK.columns.tolist()

          list_gmean_PK=[]

          list_cv_PK=[] 

          for i in col_mapping_PK:

              list_ser_PK=df_PK[i].tolist()

              def g_mean(list_ser_PK):
                  a=np.log(list_ser_PK)
                  return np.exp(a.mean())
              Gmean_PK=g_mean(list_ser_PK)
              list_gmean_PK.append(Gmean_PK)

              cv_std_PK=lambda x: np.std(x, ddof= 1 )
              cv_mean_PK=lambda x: np.mean(x)
              CV_std_PK=cv_std(list_ser_PK)

              CV_mean_PK=cv_mean(list_ser_PK)

              CV_PK=(CV_std_PK/CV_mean_PK * 100)
              list_cv_PK.append(CV_PK)


          df_averaged_concentrations_PK=df_PK.describe()
          df_averaged_concentrations_1_PK= df_averaged_concentrations_PK.drop(['count', '25%','75%'],axis=0)
          df_averaged_concentrations_2_PK= df_averaged_concentrations_1_PK.rename(index={"50%": "median"})
          df_averaged_concentrations_2_PK.loc[len(df_averaged_concentrations_2_PK.index )] = list_gmean_PK
          df_averaged_3_PK = df_averaged_concentrations_2_PK.rename(index={5 : "Gmean"})
          df_round_without_CV_PK=df_averaged_3_PK
          df_round_without_CV_PK.loc[len(df_round_without_CV_PK.index )] = list_cv_PK
          df_averaged_3_PK = df_round_without_CV_PK.rename(index={6 : "CV, %"})


          df_concat_PK_po_tab= pd.concat([df_PK,df_averaged_3_PK],sort=False,axis=0)

          ###–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

          series_Cmax=df_concat_PK_po_tab['Cmax']
          list_Cmax_str_f=["%.2f" % round(v,2) for v in series_Cmax.tolist()]
          series_Cmax=pd.Series(list_Cmax_str_f, index = df_concat_PK_po_tab.index.tolist(), name='Cmax ' +"("+measure_unit+")")

          series_Cmax_2=df_concat_PK_po_tab['Cmax(2)']
          list_Cmax_str_f_2=["%.2f" % round(v,2) for v in series_Cmax_2.tolist()]
          series_Cmax_2=pd.Series(list_Cmax_str_f_2, index = df_concat_PK_po_tab.index.tolist(), name='Cmax(2) ' +"("+measure_unit+")")

          series_Tmax=df_concat_PK_po_tab['Tmax']
          list_Tmax_str_f=["%.2f" % round(v,2) for v in series_Tmax.tolist()]
          series_Tmax=pd.Series(list_Tmax_str_f, index = df_concat_PK_po_tab.index.tolist(), name='Tmax ' +"("+"—á"+")")

          series_Tmax_2=df_concat_PK_po_tab['Tmax(2)']
          list_Tmax_str_f_2=["%.2f" % round(v,2) for v in series_Tmax_2.tolist()]
          series_Tmax_2=pd.Series(list_Tmax_str_f_2, index = df_concat_PK_po_tab.index.tolist(), name='Tmax(2) ' +"("+"—á"+")")

          series_MRT0_inf= df_concat_PK_po_tab['MRT0‚Üí‚àû']
          list_MRT0_inf_str_f=["%.3f" % round(v,3) for v in series_MRT0_inf.tolist()]
          series_MRT0_inf=pd.Series(list_MRT0_inf_str_f, index = df_concat_PK_po_tab.index.tolist(), name='MRT0‚Üí‚àû '+"("+"—á"+")")

          series_half_live= df_concat_PK_po_tab['T1/2']
          list_half_live_str_f=["%.2f" % round(v,2) for v in series_half_live.tolist()]
          series_half_live=pd.Series(list_half_live_str_f, index = df_concat_PK_po_tab.index.tolist(), name='T1/2 '+"("+"—á"+")")

          series_AUC0_t= df_concat_PK_po_tab['AUC0-t']
          list_AUC0_t_str_f=["%.2f" % round(v,2) for v in series_AUC0_t.tolist()]
          series_AUC0_t=pd.Series(list_AUC0_t_str_f, index = df_concat_PK_po_tab.index.tolist(), name='AUC0-t '+"("+measure_unit+"√ó—á" +")")

          series_AUC0_inf= df_concat_PK_po_tab['AUC0‚Üí‚àû']
          list_AUC0_inf_str_f=["%.2f" % round(v,2) for v in series_AUC0_inf.tolist()]
          series_AUC0_inf=pd.Series(list_AUC0_inf_str_f, index = df_concat_PK_po_tab.index.tolist(), name='AUC0‚Üí‚àû '+"("+measure_unit+"√ó—á" +")")

          series_AUMC0_inf= df_concat_PK_po_tab['AUMC0-‚àû']
          list_AUMC0_inf_str_f=["%.2f" % round(v,2) for v in series_AUMC0_inf.tolist()]
          series_AUMC0_inf=pd.Series(list_AUMC0_inf_str_f, index = df_concat_PK_po_tab.index.tolist(), name='AUMC0-‚àû '+"("+measure_unit+"√ó—á\u00B2" +")")

          series_–°max_dev_AUC0_t= df_concat_PK_po_tab['–°max/AUC0-t']
          list_–°max_dev_AUC0_t_str_f=["%.4f" % round(v,4) for v in series_–°max_dev_AUC0_t.tolist()]
          series_–°max_dev_AUC0_t=pd.Series(list_–°max_dev_AUC0_t_str_f, index = df_concat_PK_po_tab.index.tolist(), name='–°max/AUC0-t '+"("+"—á\u207B\u00B9"+")")

          series_Kel= df_concat_PK_po_tab['Kel']
          list_Kel_str_f=["%.4f" % round(v,4) for v in series_Kel.tolist()]
          series_Kel=pd.Series(list_Kel_str_f, index = df_concat_PK_po_tab.index.tolist(), name='Kel '+"("+"—á\u207B\u00B9"+")")

          series_CL= df_concat_PK_po_tab['CL']
          list_CL_str_f=["%.2f" % round(v,2) for v in series_CL.tolist()]
          series_CL=pd.Series(list_CL_str_f, index = df_concat_PK_po_tab.index.tolist(), name='CL ' +"("+"–ª/—á"+")")

          series_Vd= df_concat_PK_po_tab['Vd']
          list_Vd_str_f=["%.1f" % round(v,1) for v in series_Vd.tolist()]
          series_Vd=pd.Series(list_Vd_str_f, index = df_concat_PK_po_tab.index.tolist(), name='Vd ' +"("+"–ª/–∫–≥"+")")

          df_total_PK_po_tab = pd.concat([series_Cmax, series_Tmax, series_Cmax_2, series_Tmax_2, series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_–°max_dev_AUC0_t,series_Kel,series_CL,series_Vd], axis= 1 ) 
          df_total_PK_po_tab.index.name = '–ù–æ–º–µ—Ä'

          ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

          df_total_PK_po_tab1=df_total_PK_po_tab.copy()
          df_total_PK_po_tab1.iloc[-6,:],df_total_PK_po_tab1.iloc[-2,:]=df_total_PK_po_tab.iloc[-2,:],df_total_PK_po_tab.iloc[-6,:]

          df_total_PK_po_tab=df_total_PK_po_tab1

          df_total_PK_po_tab1=df_total_PK_po_tab.copy()
          df_total_PK_po_tab1.iloc[-4,:],df_total_PK_po_tab1.iloc[-5,:]=df_total_PK_po_tab.iloc[-5,:],df_total_PK_po_tab.iloc[-4,:]

          df_total_PK_po_tab=df_total_PK_po_tab1

          df_total_PK_po_tab = df_total_PK_po_tab.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')


          table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏'
          list_heading_word.append(table_heading)
          
          list_table_word.append(df_total_PK_po_tab)

          ####–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          list_PK_Cmax_1_not_round = df_PK['Cmax'].tolist()
          list_PK_Tmax_1_not_round = df_PK['Tmax'].tolist() 
          list_PK_MRT0_inf_not_round = df_PK['MRT0‚Üí‚àû'].tolist() 
          list_PK_half_live_not_round = df_PK['T1/2'].tolist() 
          list_PK_AUC0_t_not_round = df_PK['AUC0-t'].tolist()
          list_PK_AUC0_inf_not_round = df_PK['AUC0‚Üí‚àû'].tolist()
          list_PK_AUMC0_inf_not_round = df_PK['AUMC0-‚àû'].tolist()
          list_PK_–°max_dev_AUC0_t_not_round = df_PK['–°max/AUC0-t'].tolist()
          list_PK_Kel_not_round = df_PK['Kel'].tolist()



          list_list_PK_parametr_po_tab=[list_PK_Cmax_1_not_round,list_PK_AUC0_t_not_round,list_PK_Kel_not_round,list_PK_AUC0_inf_not_round,list_PK_half_live_not_round,list_PK_AUMC0_inf_not_round,list_PK_MRT0_inf_not_round,list_PK_–°max_dev_AUC0_t_not_round]
          list_parametr_mean_h_po_tab=[]
          for i in list_list_PK_parametr_po_tab:
               n=len(i)

               def confidential_interval(i):
                   if n < 30:
                      h = statistics.stdev(i)
                      mean = np.mean(i)
                   else:
                      h = statistics.stdev(i)    ### –ø—Ä–æ—è—Å–Ω–∏—Ç—å –º–æ–º–µ–Ω—Ç —Å n-1
                      mean = np.mean(i)
                   return ([mean,h]) 
               func_mean_h = confidential_interval(i)

               list_parametr_mean_h_po_tab.append(func_mean_h)


          list_mean_h_po_tab_Cmax_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_po_tab[0]]
          parametr_round_mean_h_Cmax=str(list_mean_h_po_tab_Cmax_round[0]) +"¬±"+str(list_mean_h_po_tab_Cmax_round[1])

          list_mean_h_po_tab_AUC0_t_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_po_tab[1]] 
          parametr_round_mean_h_AUC0_t=str(list_mean_h_po_tab_AUC0_t_round[0]) +"¬±"+str(list_mean_h_po_tab_AUC0_t_round[1]) 

          list_mean_h_po_tab_Kel_round=["%.4f" % round(v,4) for v in list_parametr_mean_h_po_tab[2]]
          parametr_round_mean_h_Kel=str(list_mean_h_po_tab_Kel_round[0]) +"¬±"+str(list_mean_h_po_tab_Kel_round[1])

          list_mean_h_po_tab_AUC0_inf_round= ["%.2f" % round(v,2) for v in list_parametr_mean_h_po_tab[3]]
          parametr_round_mean_h_AUC0_inf=str(list_mean_h_po_tab_AUC0_inf_round[0]) +"¬±"+str(list_mean_h_po_tab_AUC0_inf_round[1]) 

          list_mean_h_po_tab_half_live_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_po_tab[4]]
          parametr_round_mean_h_half_live=str(list_mean_h_po_tab_half_live_round[0]) +"¬±"+str(list_mean_h_po_tab_half_live_round[1])

          list_mean_h_po_tab_AUMC0_inf_round=["%.2f" % round(v,2) for v in list_parametr_mean_h_po_tab[5]] 
          parametr_round_mean_h_AUMC0_inf=str(list_mean_h_po_tab_AUMC0_inf_round[0]) +"¬±"+str(list_mean_h_po_tab_AUMC0_inf_round[1]) 

          list_mean_h_po_tab_MRT0_inf_round=["%.3f" % round(v,3) for v in list_parametr_mean_h_po_tab[6]]
          parametr_round_mean_h_MRT0_inf=str(list_mean_h_po_tab_MRT0_inf_round[0]) +"¬±"+str(list_mean_h_po_tab_MRT0_inf_round[1])

          list_mean_h_po_tab_–°max_dev_AUC0_t_round=["%.4f" % round(v,4) for v in list_parametr_mean_h_po_tab[7]]
          parametr_round_mean_h_–°max_dev_AUC0_t=str(list_mean_h_po_tab_–°max_dev_AUC0_t_round[0]) +"¬±"+str(list_mean_h_po_tab_–°max_dev_AUC0_t_round[1])

          list_parametr_round_mean_h_po_tab= [parametr_round_mean_h_Cmax,parametr_round_mean_h_AUC0_t,parametr_round_mean_h_Kel,parametr_round_mean_h_AUC0_inf,parametr_round_mean_h_half_live,parametr_round_mean_h_AUMC0_inf,parametr_round_mean_h_MRT0_inf,parametr_round_mean_h_–°max_dev_AUC0_t]

          t_mean_po_tab = str("%.2f" % round(np.mean(list_PK_Tmax_1_not_round),2))     
          list_parametr_round_mean_h_po_tab.insert(1,t_mean_po_tab)

       else:
          st.info('‚ùï‚ùóÔ∏è‚ùï –ó–∞–≥—Ä—É–∑–∏—Ç—å XLSX —Ñ–∞–π–ª –∏ –≤–≤–µ—Å—Ç–∏ –¥–æ–∑—É –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞')


       ###–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å

       if ("uploaded_file_1" in st.session_state) and ("uploaded_file_2" in st.session_state) and ("uploaded_file_3" in st.session_state) and measure_unit and dose_iv and dose_po_sub and dose_po_tab :
           
           table_heading='–£—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏, –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏, –∞ —Ç–∞–∫–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'
           list_heading_word.append(table_heading)

           AUCT_inf_mean_iv = df_concat_PK_iv["AUC0-t"].loc["mean"]
           AUCT_inf_mean_po_sub = df_concat_PK_po_sub["AUC0-t"].loc["mean"]
           AUCT_inf_mean_po_tab = df_concat_PK_po_tab["AUC0-t"].loc["mean"]

           #–∞–±—Å–æ–ª—é—Ç–Ω–∞—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å

           F_po_sub_iv=round((AUCT_inf_mean_po_sub * float(dose_iv))/(AUCT_inf_mean_iv*float(dose_po_sub))*100,2)
           F_po_tab_iv=round((AUCT_inf_mean_po_tab * float(dose_iv))/(AUCT_inf_mean_iv*float(dose_po_tab))*100,2)

           #–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
           RF_po_sub_tab=round((AUCT_inf_mean_po_tab*float(dose_po_sub))/(AUCT_inf_mean_po_sub*float(dose_po_tab))*100,2)

           df_intravenous_substance = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_1"]))
           df_oral_substance = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_2"]))
           df_oral_pill = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_3"]))

           df_averaged_concentrations_intravenous_substance=df_intravenous_substance.describe()
           list_concentration__intravenous_substance=df_averaged_concentrations_intravenous_substance.loc['mean'].tolist()

           df_averaged_concentrations_oral_substance=df_oral_substance.describe()
           list_concentration__oral_substance=df_averaged_concentrations_oral_substance.loc['mean'].tolist()

           df_averaged_concentrations_oral_pill=df_oral_pill.describe()
           list_concentration__oral_pill=df_averaged_concentrations_oral_pill.loc['mean'].tolist()

       ### –∏—Ç–æ–≥–æ–≤—ã–π —Ñ—Ä–µ–π–º –ø–æ PK –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∫—Ä–æ–≤–∏

           list_index_for_df_total_PK_mean = ['Cmax ' +"("+measure_unit+")",'Tmax ' +"("+"—á"+")",'AUC0-t '+"("+measure_unit+"√ó—á" +")",'Kel '+"("+"—á\u207B\u00B9"+")",'AUC0‚Üí‚àû '+"("+measure_unit+"√ó—á" +")",'T1/2 '+"("+"—á"+")",'AUMC0-‚àû '+"("+measure_unit+"√ó—á\u00B2"+")",'MRT0‚Üí‚àû '+"("+"—á"+")",'–°max/AUC0-t '+"("+"—á\u207B\u00B9"+")","F(–∞–±—Å–æ–ª—é—Ç–Ω–∞—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å),%","–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å,% (–ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–µ—Ä–æ—Ä–∞–ª—å–Ω—ã–º –≤–≤–µ–¥–µ–Ω–∏–µ–º —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏)"]
           
           #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
           list_parametr_round_mean_h_iv.append("-")
           list_parametr_round_mean_h_iv.append("-")

           list_parametr_round_mean_h_po_sub.append(F_po_sub_iv)
           list_parametr_round_mean_h_po_sub.append("-")

           list_parametr_round_mean_h_po_tab.append(F_po_tab_iv)
           list_parametr_round_mean_h_po_tab.append(RF_po_sub_tab)


           df_total_PK_mean = pd.DataFrame(list(zip(list_parametr_round_mean_h_iv,list_parametr_round_mean_h_po_sub,list_parametr_round_mean_h_po_tab)),columns=['–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏','–ü–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏','–ü–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏'],index=list_index_for_df_total_PK_mean)
           df_total_PK_mean.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å'
           
           list_table_word.append(df_total_PK_mean)

       #####–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏

       ### –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
           col_mapping = df_intravenous_substance.columns.tolist() ### –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π —Ñ—Ä–µ–π–º
           col_mapping.remove('–ù–æ–º–µ—Ä')
           list_time = []
           for i in col_mapping:
               numer=float(i)
               list_time.append(numer)

           err_y_1=df_averaged_concentrations_intravenous_substance.loc['std'].tolist()
           err_y_2=df_averaged_concentrations_oral_substance.loc['std'].tolist()
           err_y_3=df_averaged_concentrations_oral_pill.loc['std'].tolist()

           fig, ax = plt.subplots()

           plt.errorbar(list_time,list_concentration__intravenous_substance,yerr=err_y_1,color= "black", marker='o',markersize=4.0,markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0, label = '–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ')
           plt.errorbar(list_time,list_concentration__oral_substance,yerr=err_y_2,color= "red", marker='o',markersize=4.0,markeredgecolor="red",markerfacecolor="red",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0, label = '–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
           plt.errorbar(list_time,list_concentration__oral_pill,yerr=err_y_3,color= "blue", marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0, label = '–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏')

           ax.set_xlabel("–í—Ä–µ–º—è, —á")
           ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
           ax.legend()

           list_graphics_word.append(fig) 

           graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏, –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏"
           list_heading_graphics_word.append(graphic) 
       ### –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
           list_time.remove(0)

           list_concentration__intravenous_substance.remove(0)
           list_concentration__oral_substance.remove(0)
           list_concentration__oral_pill.remove(0)

           err_y_1.remove(0)
           err_y_2.remove(0) 
           err_y_3.remove(0) 

           fig, ax = plt.subplots()    

           plt.errorbar(list_time,list_concentration__intravenous_substance,yerr=err_y_1,color="black", marker='o',markersize=4.0,markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0, label = '–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ')
           plt.errorbar(list_time,list_concentration__oral_substance,yerr=err_y_2,color= "red", marker='o',markersize=4.0,markeredgecolor="red",markerfacecolor="red",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0, label = '–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
           plt.errorbar(list_time,list_concentration__oral_pill,yerr=err_y_3,color= "blue", marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0, label = '–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏')

           ax.set_yscale("log")
           ax.set_xlabel("–í—Ä–µ–º—è, —á")
           ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)
           ax.legend()

           list_graphics_word.append(fig) 

           graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏, –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏"
           list_heading_graphics_word.append(graphic)
       else:
          st.write("")

       ##############################################################################################################

       #############–∫–∞–ª

       st.title('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –∫–∞–ª–æ–º')

       st.subheader('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –∫–∞–ª–æ–º —Ñ–æ—Ä–º–∞—Ç–∞ XLSX')
       uploaded_file_4 = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –∫–∞–ª–æ–º", key='–§–∞–π–ª —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –∫–∞–ª–æ–º –∏–∑—É—á–µ–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')
       
       if uploaded_file_4 is not None:
          save_uploadedfile(uploaded_file_4)
          st.session_state["uploaded_file_4"] = uploaded_file_4.name

       if "uploaded_file_4" in st.session_state and measure_unit:

          df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_4"]))
          st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫–∞–ª–µ')
          st.write(df)

          table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫–∞–ª–µ'
          list_heading_word.append(table_heading)
          col_mapping = df.columns.tolist()
          col_mapping.remove('–ù–æ–º–µ—Ä')

          list_gmean=[]
          list_cv=[] 
          for i in col_mapping:

              list_ser=df[i].tolist()
              list_ser_cv = list_ser#–Ω—É–∂–Ω–æ —Å –Ω—É–ª—è–º–∏ –¥–ª—è CV

              #—É–±—Ä–∞—Ç—å –Ω—É–ª–∏, —Ç.–∫ –Ω—É–ª–∏ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å –Ω—É–ª–µ–≤–æ–µ gmean
              count_for_range_ser=len(list_ser)
              list_range_ser=range(0,count_for_range_ser)
              
              list_ser_without_0=[]
              for i in list_range_ser:
                  if list_ser[i] !=0:
                     list_ser_without_0.append(list_ser[i])

              list_ser = list_ser_without_0

              def g_mean(list_ser):
                  a=np.log(list_ser)
                  return np.exp(a.mean())
              Gmean=g_mean(list_ser)
              list_gmean.append(Gmean)

              cv_std=lambda x: np.std(x, ddof= 1 )
              cv_mean=lambda x: np.mean(x)
              CV_std=cv_std(list_ser_cv)

              CV_mean=cv_mean(list_ser_cv)

              CV=CV_std/CV_mean * 100
              list_cv.append(CV)
          
          #–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è None –∏–∑ —Ñ—Ä–µ–π–º–∞
          list_gmean.pop(0)
          list_gmean.insert(0,0)
          list_cv.pop(0)
          list_cv.insert(0,0)

          df_averaged_concentrations=df.describe()
          df_averaged_concentrations_1= df_averaged_concentrations.drop(['count', '25%','75%'],axis=0)
          df_averaged_concentrations_2= df_averaged_concentrations_1.rename(index={"50%": "median"})
          df_averaged_concentrations_2.loc[len(df_averaged_concentrations_2.index )] = list_gmean
          df_averaged_3 = df_averaged_concentrations_2.rename(index={5 : "Gmean"})
          df_averaged_3.loc[len(df_averaged_3.index )] = list_cv
          df_averaged_3 = df_averaged_3.rename(index={6 : "CV, %"})

          df_index=df.set_index('–ù–æ–º–µ—Ä')
          df_concat= pd.concat([df_index,df_averaged_3],sort=False,axis=0)
          df_concat_round=df_concat.round(2)
          
          ###–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–∞ —Å –Ω—É–ª—è–º–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
          col_mapping = df_concat_round.columns.tolist()

          list_list_series=[]
          for i in col_mapping:
              list_series = df_concat_round[i].tolist()
               
              list_series_round = []
              for i in list_series:
                  value = "%.2f" % round(i,2)
                  list_series_round.append(value)
                   
              list_list_series.append(list_series_round)

          df_concat_round_str = pd.DataFrame(list_list_series, columns = df_concat_round.index.tolist(),index=col_mapping) 
          df_concat_round_str_transpose = df_concat_round_str.transpose()
          df_concat_round_str_transpose.index.name = '–ù–æ–º–µ—Ä'

          ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

          df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
          df_concat_round_str_transpose1.iloc[-6,:],df_concat_round_str_transpose1.iloc[-2,:]=df_concat_round_str_transpose.iloc[-2,:],df_concat_round_str_transpose.iloc[-6,:]

          df_concat_round_str_transpose=df_concat_round_str_transpose1

          df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
          df_concat_round_str_transpose1.iloc[-4,:],df_concat_round_str_transpose1.iloc[-5,:]=df_concat_round_str_transpose.iloc[-5,:],df_concat_round_str_transpose.iloc[-4,:]

          df_concat_round_str_transpose=df_concat_round_str_transpose1

          df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')
          
          #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–±–ª—Ü–æ–≤
          list_time_round =["%.2f" % round(v,2) for v in df_concat_round_str_transpose.columns.tolist()]
          df_concat_round_str_transpose.columns = list_time_round
          
          list_table_word.append(df_concat_round_str_transpose)

       ########### –¥–∏–∞–≥—Ä–∞–º–º–∞    


          list_time = []
          for i in col_mapping:
              numer=float(i)
              list_time.append(numer)

          list_concentration=df_averaged_concentrations.loc['mean'].tolist()

          list_concentration.remove(0)
          list_time.remove(0)



          fig, ax = plt.subplots()

          sns.barplot(x=list_time, y=list_concentration,color='blue',width=0.5)
          plt.xlabel("–í—Ä–µ–º—è, —á")
          plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit)

          list_graphics_word.append(fig) 

          graphic='–í—ã–≤–µ–¥–µ–Ω–∏–µ —Å –∫–∞–ª–æ–º'
          list_heading_graphics_word.append(graphic)    


       else:
          st.info('‚ùï‚ùóÔ∏è‚ùï –ó–∞–≥—Ä—É–∑–∏—Ç—å XLSX —Ñ–∞–π–ª')


       #############–º–æ—á–∞


       st.title('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –º–æ—á–æ–π')

       st.subheader('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –º–æ—á–æ–π —Ñ–æ—Ä–º–∞—Ç–∞ XLSX')
       uploaded_file_5 = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –º–æ—á–æ–π", key='–§–∞–π–ª —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –º–æ—á–æ–π –∏–∑—É—á–µ–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')
       
       if uploaded_file_5 is not None:
          save_uploadedfile(uploaded_file_5)
          st.session_state["uploaded_file_5"] = uploaded_file_5.name

       if "uploaded_file_5" in st.session_state and measure_unit:

          df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_5"]))
          st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –º–æ—á–µ')
          st.write(df)
          
          table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –º–æ—á–µ'
          list_heading_word.append(table_heading)
          col_mapping = df.columns.tolist()
          col_mapping.remove('–ù–æ–º–µ—Ä')

          list_gmean=[]
          list_cv=[] 
          for i in col_mapping:

              list_ser=df[i].tolist()
              list_ser_cv = list_ser#–Ω—É–∂–Ω–æ —Å –Ω—É–ª—è–º–∏ –¥–ª—è CV

              #—É–±—Ä–∞—Ç—å –Ω—É–ª–∏, —Ç.–∫ –Ω—É–ª–∏ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å –Ω—É–ª–µ–≤–æ–µ gmean
              count_for_range_ser=len(list_ser)
              list_range_ser=range(0,count_for_range_ser)
              
              list_ser_without_0=[]
              for i in list_range_ser:
                  if list_ser[i] !=0:
                     list_ser_without_0.append(list_ser[i])

              list_ser = list_ser_without_0

              def g_mean(list_ser):
                  a=np.log(list_ser)
                  return np.exp(a.mean())
              Gmean=g_mean(list_ser)
              list_gmean.append(Gmean)

              cv_std=lambda x: np.std(x, ddof= 1 )
              cv_mean=lambda x: np.mean(x)
              CV_std=cv_std(list_ser_cv)

              CV_mean=cv_mean(list_ser_cv)

              CV=CV_std/CV_mean * 100
              list_cv.append(CV)
          
          #–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è None –∏–∑ —Ñ—Ä–µ–π–º–∞
          list_gmean.pop(0)
          list_gmean.insert(0,0)
          list_cv.pop(0)
          list_cv.insert(0,0)

          df_averaged_concentrations=df.describe()
          df_averaged_concentrations_1= df_averaged_concentrations.drop(['count', '25%','75%'],axis=0)
          df_averaged_concentrations_2= df_averaged_concentrations_1.rename(index={"50%": "median"})
          df_averaged_concentrations_2.loc[len(df_averaged_concentrations_2.index )] = list_gmean
          df_averaged_3 = df_averaged_concentrations_2.rename(index={5 : "Gmean"})
          df_averaged_3.loc[len(df_averaged_3.index )] = list_cv
          df_averaged_3 = df_averaged_3.rename(index={6 : "CV, %"})

          df_index=df.set_index('–ù–æ–º–µ—Ä')
          df_concat= pd.concat([df_index,df_averaged_3],sort=False,axis=0)
          df_concat_round=df_concat.round(2)
          
          ###–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–∞ —Å –Ω—É–ª—è–º–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
          col_mapping = df_concat_round.columns.tolist()

          list_list_series=[]
          for i in col_mapping:
              list_series = df_concat_round[i].tolist()
               
              list_series_round = []
              for i in list_series:
                  value = "%.2f" % round(i,2)
                  list_series_round.append(value)
                   
              list_list_series.append(list_series_round)

          df_concat_round_str = pd.DataFrame(list_list_series, columns = df_concat_round.index.tolist(),index=col_mapping) 
          df_concat_round_str_transpose = df_concat_round_str.transpose()
          df_concat_round_str_transpose.index.name = '–ù–æ–º–µ—Ä'

          ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

          df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
          df_concat_round_str_transpose1.iloc[-6,:],df_concat_round_str_transpose1.iloc[-2,:]=df_concat_round_str_transpose.iloc[-2,:],df_concat_round_str_transpose.iloc[-6,:]

          df_concat_round_str_transpose=df_concat_round_str_transpose1

          df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
          df_concat_round_str_transpose1.iloc[-4,:],df_concat_round_str_transpose1.iloc[-5,:]=df_concat_round_str_transpose.iloc[-5,:],df_concat_round_str_transpose.iloc[-4,:]

          df_concat_round_str_transpose=df_concat_round_str_transpose1

          df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')
          
          #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–±–ª—Ü–æ–≤
          list_time_round =["%.2f" % round(v,2) for v in df_concat_round_str_transpose.columns.tolist()]
          df_concat_round_str_transpose.columns = list_time_round

          list_table_word.append(df_concat_round_str_transpose)

       ###########–¥–∏–∞–≥—Ä–∞–º–º–∞    


          list_time = []
          for i in col_mapping:
              numer=float(i)
              list_time.append(numer)

          list_concentration=df_averaged_concentrations.loc['mean'].tolist()

          list_concentration.remove(0)
          list_time.remove(0)



          fig, ax = plt.subplots()
          sns.barplot(x=list_time, y=list_concentration,color='blue',width=0.5)
          plt.xlabel("–í—Ä–µ–º—è, —á")
          plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit) 

          list_graphics_word.append(fig) 

          graphic='–í—ã–≤–µ–¥–µ–Ω–∏–µ —Å –º–æ—á–æ–π'
          list_heading_graphics_word.append(graphic)  
          
       else:
          st.info('‚ùï‚ùóÔ∏è‚ùï –ó–∞–≥—Ä—É–∑–∏—Ç—å XLSX —Ñ–∞–π–ª')

       ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
       st.session_state["list_heading_word"] = list_heading_word
       st.session_state["list_table_word"] = list_table_word
       st.session_state["list_graphics_word"] = list_graphics_word
       st.session_state["list_heading_graphics_word"] = list_heading_graphics_word
       
    
    #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
    if panel == "–¢–∞–±–ª–∏—Ü—ã":

          list_heading_word = st.session_state["list_heading_word"]
          list_table_word = st.session_state["list_table_word"]

          ### —Ç–∞–±–ª–∏—Ü—ã
          zip_heading_table = zip(list_heading_word,list_table_word)

          doc = Document()

          # Settings
          style = doc.styles['Normal']
          font = style.font
          font.name = 'Times New Roman'
          font.size = Pt(8)
          
          for heading, df in zip_heading_table:
              doc.add_paragraph(heading)

              name_columns = pd.DataFrame(df.columns.tolist()).T
              # add columns
              name_columns.columns = df.columns.tolist()
              df_columns = pd.concat([name_columns, df]).reset_index(drop = True)
              # add indexes
              total_name_index = df.index.name
              list_index_names = df.index.tolist()
              list_index_names.insert(0,total_name_index)
              series_index_names=pd.Series(list_index_names, name=total_name_index)
              df_series_index_names = series_index_names.to_frame()
              
              df_columns_indexes=pd.concat([df_series_index_names, df_columns], axis=1)
              
              t = doc.add_table(rows=1, cols=df_columns_indexes.shape[1])
              t.style = 'TableGrid'
              # Add the body of the data frame
              for i in range(df_columns_indexes.shape[0]):
                  row = t.add_row()
                  for j in range(df_columns_indexes.shape[1]):
                      cell = df_columns_indexes.iat[i, j]
                      row.cells[j].text = str(cell)

          bio = BytesIO()
          doc.save(bio)
          if doc:
              st.download_button(
                  label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã üìÉ",
                  data=bio.getvalue(),
                  file_name="–¢–∞–±–ª–∏—Ü—ã.docx",
                  mime="docx"
              )
          
          zip_heading_table = zip(list_heading_word,list_table_word) ###–µ—â–µ —Ä–∞–∑ –æ–±—ä—è–≤–ª—è–µ–º, –∏–Ω–∞—á–µ –Ω–µ –≤–∏–¥–∏—Ç zip-–æ–±—ä–µ–∫—Ç
          #####–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
          for heading, df in zip_heading_table:
              st.subheader(heading)
              st.write(df)

    if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
          
          list_graphics_word = st.session_state["list_graphics_word"]
          list_heading_graphics_word = st.session_state["list_heading_graphics_word"]

          ### –¥–æ–∫—É–º–µ–Ω—Ç Word
          zip_graphics_heading = zip(list_graphics_word,list_heading_graphics_word)
          doc = Document()

          # Settings
          style = doc.styles['Normal']
          font = style.font
          font.name = 'Times New Roman'
          font.size = Pt(12)

          buf = BytesIO() #–∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–∞–∑–∏–ª–∞ –æ—à–∏–±–∫–∞
          for fig, heading in zip_graphics_heading:
              buf = BytesIO()
              fig.savefig(buf, format="jpg", dpi=300, bbox_inches='tight')
              fp = tempfile.NamedTemporaryFile() 
              with open(f"{fp.name}.jpg",'wb') as ff:
                   ff.write(buf.getvalue()) 
              doc.add_picture(buf)
              doc.add_paragraph(heading)
          
          doc.save(buf)
          if doc:
              st.download_button(
                  label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ üìà",
                  data=buf.getvalue(),
                  file_name="–ì—Ä–∞—Ñ–∏–∫–∏.docx",
                  mime="docx",
                  key = "graphics"
              )

          #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

          #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
          type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
    ('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–∞—Ö –≤–≤–µ–¥–µ–Ω–∏—è", "–î–∏–∞–≥—Ä–∞–º–º—ã —ç–∫—Å–∫—Ä–µ—Ü–∏–∏"),disabled = False, key = "–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - –ò–ë" )

          count_graphics_for_visual = len(list_heading_graphics_word)
          list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)
          
          for i in list_range_count_graphics_for_visual:
              if list_heading_graphics_word[i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
                 if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                    st.pyplot(list_graphics_word[i])
                    st.subheader(list_heading_graphics_word[i])
              if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
                 if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                    st.pyplot(list_graphics_word[i])
                    st.subheader(list_heading_graphics_word[i])
              if list_heading_graphics_word[i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
                 if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                    st.pyplot(list_graphics_word[i])
                    st.subheader(list_heading_graphics_word[i])
              if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö"):
                 if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–∞—Ö –≤–≤–µ–¥–µ–Ω–∏—è':
                    st.pyplot(list_graphics_word[i])
                    st.subheader(list_heading_graphics_word[i])
              if list_heading_graphics_word[i].__contains__("–í—ã–≤–µ–¥–µ–Ω–∏–µ"):
                 if type_graphics == '–î–∏–∞–≥—Ä–∞–º–º—ã —ç–∫—Å–∫—Ä–µ—Ü–∏–∏':
                    st.pyplot(list_graphics_word[i])
                    st.subheader(list_heading_graphics_word[i])

#####################################################################   

if option == '–ò–∑—É—á–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö':
   
   panel = st.radio(
        "‚öôÔ∏è–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "–¢–∞–±–ª–∏—Ü—ã","–ì—Ä–∞—Ñ–∏–∫–∏"),
        horizontal=True, key= "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ - –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö"
    )

   ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   if "measure_unit_org_blood" not in st.session_state:
      st.session_state["measure_unit_org_blood"] = ""
   if "measure_unit_org_organs" not in st.session_state:
      st.session_state["measure_unit_org_organs"] = ""
   if "dose_org" not in st.session_state:
      st.session_state["dose_org"] = ""

   #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
   list_heading_word=[]
   list_table_word=[]
   list_graphics_word=[]
   list_heading_graphics_word=[]
    
   if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":

      st.title('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö')

      measure_unit_org_blood = st.text_input("–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤ –∫—Ä–æ–≤–∏", key='–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –∫—Ä–æ–≤–∏', value = st.session_state["measure_unit_org_blood"])
      
      st.session_state["measure_unit_org_blood"] = measure_unit_org_blood

      measure_unit_org_organs = st.text_input("–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö", key='–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –æ—Ä–≥–∞–Ω–∞—Ö', value = st.session_state["measure_unit_org_organs"])
      
      st.session_state["measure_unit_org_organs"] = measure_unit_org_organs

      st.info('‚ùï‚ùóÔ∏è‚ùï –í–≤–µ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏')

      dose = st.text_input("–î–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞", key='–î–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö', value = st.session_state["dose_org"])
      
      st.session_state["dose_org"] = dose

      st.info('‚ùï‚ùóÔ∏è‚ùï –í–≤–µ—Å—Ç–∏ –¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')

      #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
      if "index_method_auc - –ò–û" not in st.session_state:
          st.session_state["index_method_auc - –ò–û"] = 0

      method_auc = st.radio("üìå–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t",('linear',"linear-up/log-down"),key = "–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t - –ò–û", index = st.session_state["index_method_auc - –ò–û"])
      
      if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t - –ò–û"] == 'linear':
         st.session_state["index_method_auc - –ò–û"] = 0
      if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t - –ò–û"] == "linear-up/log-down":
         st.session_state["index_method_auc - –ò–û"] = 1

      file_uploader = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤(–≤ —Ç–æ–º —á–∏—Å–ª–µ —Ñ–∞–π–ª –¥–ª—è –∫—Ä–æ–≤–∏); —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ä–≥–∞–Ω—É;–∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∫—Ä–æ–≤–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω '–ö—Ä–æ–≤—å'",accept_multiple_files=True, key='–§–∞–π–ª—ã –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö')
      
      ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      if file_uploader is not None:
         for i in file_uploader:
             save_uploadedfile(i)
             st.session_state[str(i.name)] = i.name
      
      list_keys_file_org = []
      for i in st.session_state.keys():
          if i.__contains__("xlsx") and (not i.__contains__("–î–æ–∑–∏—Ä–æ–≤–∫–∞")):### —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–æ—Å—å —Å lin
             list_keys_file_org.append(i)

      if (list_keys_file_org != []) and dose and measure_unit_org_blood and measure_unit_org_organs:

          list_name_organs=[]
          list_df_unrounded=[]
          list_df_for_mean_unround_for_graphics=[]
          list_t_graph=[]

          for i in list_keys_file_org:
              df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",i))

              file_name=st.session_state[i][:-5]

              st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π ' + "("+file_name+")")
              st.write(df)

              table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π ' + "("+file_name+")"
              list_heading_word.append(table_heading)
              col_mapping = df.columns.tolist()
              col_mapping.remove('–ù–æ–º–µ—Ä')

              list_gmean=[]
              list_cv=[] 
              for i in col_mapping:

                  list_ser=df[i].tolist()
                  list_ser_cv = list_ser#–Ω—É–∂–Ω–æ —Å –Ω—É–ª—è–º–∏ –¥–ª—è CV

                  #—É–±—Ä–∞—Ç—å –Ω—É–ª–∏, —Ç.–∫ –Ω—É–ª–∏ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å –Ω—É–ª–µ–≤–æ–µ gmean
                  count_for_range_ser=len(list_ser)
                  list_range_ser=range(0,count_for_range_ser)
                  
                  list_ser_without_0=[]
                  for i in list_range_ser:
                      if list_ser[i] !=0:
                         list_ser_without_0.append(list_ser[i])

                  list_ser = list_ser_without_0

                  def g_mean(list_ser):
                      a=np.log(list_ser)
                      return np.exp(a.mean())
                  Gmean=g_mean(list_ser)
                  list_gmean.append(Gmean)

                  cv_std=lambda x: np.std(x, ddof= 1 )
                  cv_mean=lambda x: np.mean(x)
                  CV_std=cv_std(list_ser_cv)

                  CV_mean=cv_mean(list_ser_cv)

                  CV=CV_std/CV_mean * 100
                  list_cv.append(CV)
              
              #–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è None –∏–∑ —Ñ—Ä–µ–π–º–∞
              list_gmean.pop(0)
              list_gmean.insert(0,0)
              list_cv.pop(0)
              list_cv.insert(0,0)

              df_averaged_concentrations=df.describe()
              df_averaged_concentrations_1= df_averaged_concentrations.drop(['count', '25%','75%'],axis=0)
              df_averaged_concentrations_2= df_averaged_concentrations_1.rename(index={"50%": "median"})
              df_averaged_concentrations_2.loc[len(df_averaged_concentrations_2.index )] = list_gmean
              df_averaged_3 = df_averaged_concentrations_2.rename(index={5 : "Gmean"})
              df_averaged_3.loc[len(df_averaged_3.index )] = list_cv
              df_averaged_3 = df_averaged_3.rename(index={6 : "CV, %"})

              df_index=df.set_index('–ù–æ–º–µ—Ä')
              df_concat= pd.concat([df_index,df_averaged_3],sort=False,axis=0)
              df_concat_round=df_concat.round(2)
              
              ###–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–∞ —Å –Ω—É–ª—è–º–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
              col_mapping = df_concat_round.columns.tolist()

              list_list_series=[]
              for i in col_mapping:
                  list_series = df_concat_round[i].tolist()
                      
                  list_series_round = []
                  for i in list_series:
                      value = "%.2f" % round(i,2)
                      list_series_round.append(value)
                          
                  list_list_series.append(list_series_round)

              df_concat_round_str = pd.DataFrame(list_list_series, columns = df_concat_round.index.tolist(),index=col_mapping) 
              df_concat_round_str_transpose = df_concat_round_str.transpose()
              df_concat_round_str_transpose.index.name = '–ù–æ–º–µ—Ä'

              ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

              df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
              df_concat_round_str_transpose1.iloc[-6,:],df_concat_round_str_transpose1.iloc[-2,:]=df_concat_round_str_transpose.iloc[-2,:],df_concat_round_str_transpose.iloc[-6,:]

              df_concat_round_str_transpose=df_concat_round_str_transpose1

              df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
              df_concat_round_str_transpose1.iloc[-4,:],df_concat_round_str_transpose1.iloc[-5,:]=df_concat_round_str_transpose.iloc[-5,:],df_concat_round_str_transpose.iloc[-4,:]

              df_concat_round_str_transpose=df_concat_round_str_transpose1

              df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')
              
              #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–±–ª—Ü–æ–≤
              list_time_round =["%.2f" % round(v,2) for v in df_concat_round_str_transpose.columns.tolist()]
              df_concat_round_str_transpose.columns = list_time_round

              list_table_word.append(df_concat_round_str_transpose) 

              if file_name == "–ö—Ä–æ–≤—å":
                 measure_unit_org = measure_unit_org_blood
              else:
                 measure_unit_org = measure_unit_org_organs
              ########### –≥—Ä–∞—Ñ–∏–∫–∏    

              ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

              # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              count_row_df = len(df.axes[0])

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)
              list_t_graph.append(list_time) 

              for r in range(0,count_row_df):

                  list_concentration=df.iloc[r].tolist()

                  numer_animal=list_concentration[0]

                  list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                  list_concentration = [float(v) for v in list_concentration]


                  fig, ax = plt.subplots()
                  plt.plot(list_time,list_concentration,marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue")
                  plt.xlabel("–í—Ä–µ–º—è, —á")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)
   
                  list_graphics_word.append(fig)

                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö '  + "("+file_name+")"',  '+numer_animal
                  list_heading_graphics_word.append(graphic)  
                  

               #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
                  count_for_0_1=len(list_concentration)
                  list_range_for_0_1=range(0,count_for_0_1)

                  list_time_0=[]
                  list_for_log_1=[]
                  for i in list_range_for_0_1:
                      if list_concentration[i] !=0:
                         list_for_log_1.append(list_concentration[i])
                         list_time_0.append(list_time[i]) 

                  fig, ax = plt.subplots()
                  plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue")
                  ax.set_yscale("log")
                  plt.xlabel("–í—Ä–µ–º—è, —á")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)

                  
                  list_graphics_word.append(fig)

                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' + "("+file_name+")"',  '+numer_animal
                  list_heading_graphics_word.append(graphic) 
    
           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

              df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
              df_for_plot_conc_1 = df_for_plot_conc.transpose()
              list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()

              fig, ax = plt.subplots()

              plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel("–í—Ä–µ–º—è, —á")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)
              ax.legend()
              
              list_graphics_word.append(fig)

              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö " + "("+file_name+")"
              list_heading_graphics_word.append(graphic)     
           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
              df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)


              fig, ax = plt.subplots()

              plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel("–í—Ä–µ–º—è, —á")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)
              ax.set_yscale("log")
              ax.legend()
              
              list_graphics_word.append(fig)

              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö " + "("+file_name+")"
              list_heading_graphics_word.append(graphic)
               ###—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ    
           # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)


              list_concentration=df_averaged_concentrations.loc['mean'].tolist()
              err_y_1=df_averaged_concentrations.loc['std'].tolist()


              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              plt.xlabel("–í—Ä–µ–º—è, —á")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)
              
              list_graphics_word.append(fig)

              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' + "("+file_name+")"
              list_heading_graphics_word.append(graphic)




           #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              #–¥–ª—è –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º. –ø–æ—Å—Ç–æ—Ä–∏–º –±–µ–∑ –Ω—É–ª—è
              list_time.remove(0)
              list_concentration.remove(0)
              err_y_1.remove(0) 


              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              ax.set_yscale("log")
              plt.xlabel("–í—Ä–µ–º—è, —á")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)

              
              list_graphics_word.append(fig)

              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' + "("+file_name+")"
              list_heading_graphics_word.append(graphic)

           ############### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

              ###Cmax
              df_without_numer=df.drop(['–ù–æ–º–µ—Ä'],axis=1)
              count_row=df_without_numer.shape[0]
              list_cmax=[]
              for i in range(0,count_row):
                  cmax=float(max(df_without_numer.iloc[[i]].iloc[0].tolist()))
                  list_cmax.append(cmax)

              ###Tmax   
              list_Tmax=[]
              for cmax in list_cmax:
                  for column in df.columns:
                      for num, row in df.iterrows():
                          if df.iloc[num][column] == cmax:
                             list_Tmax.append(f"{column}")
            
              list_Tmax_float=[]           
              for i in list_Tmax:
                  Tmax=float(i)
                  list_Tmax_float.append(Tmax)

              ###AUC0-t
              list_AUC_0_T=[]
              if method_auc == 'linear':
                 for i in range(0,count_row):
                     list_columns_T=[]
                     for column in df_without_numer.columns:
                         list_columns_T.append(float(column))
                     list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                     
                     AUC_0_T=np.trapz(list_concentration,x=list_columns_T)
                     list_AUC_0_T.append(AUC_0_T)
              if method_auc == 'linear-up/log-down':
                 for i in range(0,count_row):
                     list_columns_T=[]
                     for column in df_without_numer.columns:
                         list_columns_T.append(float(column))
                     list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                     
                     list_c = list_concentration
                     list_t = list_columns_T
                     
                     cmax=max(list_c)
                     cmax_index = list_c.index(cmax)
                     ### cmax –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –∏ –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–π —á–∞—Å—Ç–∏ 
                     list_before_cmax_—Å=list_c[:cmax_index+1]
                     list_after_cmax_—Å=list_c[cmax_index:]
                     list_before_cmax_t=list_t[:cmax_index+1]
                     list_after_cmax_t=list_t[cmax_index:]
                     
                     ####–≤–æ—Å—Ö–æ–¥—è—â–∞—è —á–∞—Å—Ç—å
                     AUC_0_T_before=np.trapz(list_before_cmax_—Å,x=list_before_cmax_t)
                     
                     #####–Ω–∏—Å—Ö–æ–¥—è—â–∞—è (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .py –Ω–µ–≤–µ—Ä–Ω–æ–µ)
                     count_i = len(list_after_cmax_—Å)

                     list_range= range(0,count_i)
                     list_AUC_0_T_after=[]
                     AUC_0_T=0
                     b=0
                     for i in list_range:
                         if b<count_i-1:
                             AUC_0_T+=(list_after_cmax_t[i+1]-list_after_cmax_t[i])/(np.log(np.asarray(list_after_cmax_—Å[i])/np.asarray(list_after_cmax_—Å[i+1]))) *(list_after_cmax_—Å[i]-list_after_cmax_—Å[i+1])
                             b+=1
                             list_AUC_0_T_after.append(AUC_0_T)
                             
                     AUC_0_T_after = list_AUC_0_T_after[-1]
                     
                     AUC_O_T = AUC_0_T_before + AUC_0_T_after
                     
                     list_AUC_0_T.append(AUC_O_T)

              ####KEL
              list_kel_total=[]
              for i in range(0,count_row):
                  list_columns_T=[]
                  for column in df_without_numer.columns:
                      list_columns_T.append(float(column))
                  list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                  list_concentration.remove(0)
                  list_c=list_concentration

                  list_time=df_without_numer.columns.tolist()
                  list_time.remove(0) 

                  list_t=[]
                  for i in list_time:
                      i=float(i)
                      list_t.append(i)

                  #—Å—Ä–µ–∑_–±–µ–∑_cmax
                  max_value_c=max(list_c)
                  index_cmax=list_c.index(max_value_c)

                  list_c_without_cmax=list_c[index_cmax+1:]
                  list_t_without_cmax=list_t[index_cmax+1:]

                  #—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
                  count_for_0_1=len(list_c_without_cmax)
                  list_range_for_0_1=range(0,count_for_0_1)

                  list_time_0=[]
                  list_conc_0=[]
                  for i in list_range_for_0_1:
                      if list_c_without_cmax[i] !=0:
                         list_conc_0.append(list_c_without_cmax[i])
                         list_time_0.append(list_t_without_cmax[i]) 
                  ################################

                  n_points=len(list_conc_0)
                  list_n_points = range(0,n_points)

                  #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —É–º–µ–Ω—å—â–∞—é—â–µ–º—Å—è –∫–æ–ª, —Ç–æ—á–µ–∫
                  list_for_kel_c=[]
                  for j in list_n_points:
                      if j<n_points:
                         list_c_new=list_conc_0[j:n_points]
                         list_for_kel_c.append(list_c_new)
                  list_for_kel_c.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
                  list_for_kel_c.pop(-1)  #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏     

                  list_for_kel_t=[]
                  for j in list_n_points:
                      if j<n_points:
                         list_t_new=list_time_0[j:n_points]
                         list_for_kel_t.append(list_t_new)
                  list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
                  list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ 

                  list_ct_zip=zip(list_for_kel_c,list_for_kel_t)

                  list_kel=[]
                  list_r=[]
                  for i,j in list_ct_zip:

                      n_points_r=len(i)

                      np_c=np.asarray(i)
                      np_t_1=np.asarray(j).reshape((-1,1))

                      np_c_log=np.log(np_c)

                      model = LinearRegression().fit(np_t_1,np_c_log)

                      np_t=np.asarray(j)
                      a=np.corrcoef(np_t, np_c_log)
                      cor=((a[0])[1])
                      r_sq=cor**2

                      adjusted_r_sq=1-((1-r_sq)*((n_points_r-1))/(n_points_r-2))

                      ########################################
                      kel=abs(model.coef_[0])
                      list_kel.append(kel)
                      list_r.append(adjusted_r_sq)

                  #–¥–µ–ª–∞–µ–º —Å—Ä–µ–∑—ã —Å–ø–∏—Å–æ–∫–æ–≤ –¥–æ rmax
                  max_r=max(list_r)

                  index_max_r= list_r.index(max_r)

                  list_r1=list_r
                  list_kel1=list_kel

                  number_elem_list_r1=len(list_r1)

                  list_range_kel=range(0,number_elem_list_r1) 

                  list_kel_total_1=[]
                  for i in list_range_kel:

                      if abs(list_r[index_max_r] - list_r1[i]) < 0.0001: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç rmax
                         list_kel_total.append(list_kel1[i]*math.log(math.exp(1))) #–æ—Ç–¥–∞—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ rmax —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
                         break #—Å–∞–º–∞—è —Ä–∞–Ω–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–æ–≤—Ä—è—é—â–∞—è —É—Å–ª–æ–≤–∏—é

                  for i in list_kel_total_1:
                      list_kel_total.append(i) 

              ####T1/2
              list_half_live=[]
              for i in list_kel_total:
                  half_live=math.log(2)/i
                  list_half_live.append(half_live)


              ###AUC0-inf 

              list_auc0_inf=[] 

              list_of_list_c=[]
              for i in range(0,count_row):
                  list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                  list_concentration.remove(0)
                  list_c = list_concentration
                  list_c.reverse() ### –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∏—Å–∫–∞ Clast –Ω–µ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é
                  list_of_list_c.append(list_c)

              list_zip_c_AUCt_inf=zip(list_kel_total,list_of_list_c)

                  #AUCt-inf 
              list_auc_t_inf=[]     
              for i,j in list_zip_c_AUCt_inf:
                  for clast in j:
                      if clast != 0:
                         clast_true=clast
                         break
                  auc_t_inf=clast_true/i
                  list_auc_t_inf.append(auc_t_inf)

              list_auc_t_inf_and_AUC_0_T_zip=zip(list_AUC_0_T,list_auc_t_inf)

              for i,j in list_auc_t_inf_and_AUC_0_T_zip:
                  auc0_inf=i+j    
                  list_auc0_inf.append(auc0_inf)

              ###AUMC
              list_AUMCO_inf=[]

              list_AUMC0_t=[]

              list_C_last=[]
              list_T_last=[]
              for i in range(0,count_row):
                  list_columns_T=[]
                  for column in df_without_numer.columns:
                      list_columns_T.append(float(column))
                  list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

                  list_C_last.append(list_concentration[-1]) 
                  list_T_last.append(list_columns_T[-1]) 

                  list_len=len(list_concentration)

                  list_aumc_i=[]
                  for i in range(0,list_len):
                      AUMC=(list_columns_T[i] - list_columns_T[i-1]) *  ((list_concentration[i] * list_columns_T[i] + list_concentration[i-1] * list_columns_T[i-1])/2)
                      list_aumc_i.append(AUMC)

                  list_aumc_i.pop(0)

                  a=0
                  list_AUMC0_t_1=[]
                  for i in list_aumc_i:
                      a+=i
                      list_AUMC0_t_1.append(a)
                  list_AUMC0_t.append(list_AUMC0_t_1[-1])

              list_zip_for_AUMC_inf=zip(list_kel_total,list_C_last,list_T_last)

              list_AUMCt_inf=[]
              for k,c,t in list_zip_for_AUMC_inf:
                  AUMCt_inf=c*t/k+c/(k*k)
                  list_AUMCt_inf.append(AUMCt_inf)


              list_AUMC_zip=zip(list_AUMC0_t,list_AUMCt_inf)

              for i,j in list_AUMC_zip:
                  AUMCO_inf=i+j
                  list_AUMCO_inf.append(AUMCO_inf)

              ###MRT0-inf
              list_MRT0_inf=[]

              list_zip_AUMCO_inf_auc0_inf = zip(list_AUMCO_inf,list_auc0_inf)

              for i,j in list_zip_AUMCO_inf_auc0_inf:
                  MRT0_inf=i/j
                  list_MRT0_inf.append(MRT0_inf)

              ##################### –§—Ä–µ–π–º –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

              ### –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
              list_for_index=df["–ù–æ–º–µ—Ä"].tolist()

              df_PK=pd.DataFrame(list(zip(list_cmax,list_Tmax_float,list_MRT0_inf,list_half_live,list_AUC_0_T,list_auc0_inf,list_AUMCO_inf,list_kel_total)),columns=['Cmax','Tmax','MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-‚àû','Kel'],index=list_for_index) 

              ###–æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

              col_mapping_PK = df_PK.columns.tolist()

              list_gmean_PK=[]

              list_cv_PK=[] 

              for i in col_mapping_PK:

                  list_ser_PK=df_PK[i].tolist()

                  def g_mean(list_ser_PK):
                      a=np.log(list_ser_PK)
                      return np.exp(a.mean())
                  Gmean_PK=g_mean(list_ser_PK)
                  list_gmean_PK.append(Gmean_PK)

                  cv_std_PK=lambda x: np.std(x, ddof= 1 )
                  cv_mean_PK=lambda x: np.mean(x)
                  CV_std_PK=cv_std(list_ser_PK)

                  CV_mean_PK=cv_mean(list_ser_PK)

                  CV_PK=(CV_std_PK/CV_mean_PK * 100)
                  list_cv_PK.append(CV_PK)


              df_averaged_concentrations_PK=df_PK.describe()
              df_averaged_concentrations_1_PK= df_averaged_concentrations_PK.drop(['count', '25%','75%'],axis=0)
              df_averaged_concentrations_2_PK= df_averaged_concentrations_1_PK.rename(index={"50%": "median"})
              df_averaged_concentrations_2_PK.loc[len(df_averaged_concentrations_2_PK.index )] = list_gmean_PK
              df_averaged_3_PK = df_averaged_concentrations_2_PK.rename(index={5 : "Gmean"})
              df_round_without_CV_PK=df_averaged_3_PK
              df_round_without_CV_PK.loc[len(df_round_without_CV_PK.index )] = list_cv_PK
              df_averaged_3_PK = df_round_without_CV_PK.rename(index={6 : "CV, %"})


              df_concat_PK_iv= pd.concat([df_PK,df_averaged_3_PK],sort=False,axis=0)


              ###–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ñ—Ä–µ–π–º–æ–≤ –≤–∑—è—Ç–æ —Å "iv", —Ç.–∫ –ø–æ–¥—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è —Å—Ö–æ–∂–∏–º –æ–±—Ä–∞–∑–æ–º –±–µ–∑ Cmax2 –∏ –¢max2)

              series_Cmax=df_concat_PK_iv['Cmax']
              list_Cmax_str_f=["%.2f" % round(v,2) for v in series_Cmax.tolist()]
              series_Cmax=pd.Series(list_Cmax_str_f, index = df_concat_PK_iv.index.tolist(), name='Cmax ' +"("+measure_unit_org+")")

              series_Tmax=df_concat_PK_iv['Tmax']
              list_Tmax_str_f=["%.2f" % round(v,2) for v in series_Tmax.tolist()]
              series_Tmax=pd.Series(list_Tmax_str_f, index = df_concat_PK_iv.index.tolist(), name='Tmax ' +"("+"—á"+")")

              series_MRT0_inf= df_concat_PK_iv['MRT0‚Üí‚àû']
              list_MRT0_inf_str_f=["%.3f" % round(v,3) for v in series_MRT0_inf.tolist()]
              series_MRT0_inf=pd.Series(list_MRT0_inf_str_f, index = df_concat_PK_iv.index.tolist(), name='MRT0‚Üí‚àû '+"("+"—á"+")")

              series_half_live= df_concat_PK_iv['T1/2']
              list_half_live_str_f=["%.2f" % round(v,2) for v in series_half_live.tolist()]
              series_half_live=pd.Series(list_half_live_str_f, index = df_concat_PK_iv.index.tolist(), name='T1/2 '+"("+"—á"+")")

              series_AUC0_t= df_concat_PK_iv['AUC0-t']
              list_AUC0_t_str_f=["%.2f" % round(v,2) for v in series_AUC0_t.tolist()]
              series_AUC0_t=pd.Series(list_AUC0_t_str_f, index = df_concat_PK_iv.index.tolist(), name='AUC0-t '+"("+measure_unit_org+"√ó—á" +")")

              series_AUC0_inf= df_concat_PK_iv['AUC0‚Üí‚àû']
              list_AUC0_inf_str_f=["%.2f" % round(v,2) for v in series_AUC0_inf.tolist()]
              series_AUC0_inf=pd.Series(list_AUC0_inf_str_f, index = df_concat_PK_iv.index.tolist(), name='AUC0‚Üí‚àû '+"("+measure_unit_org+"√ó—á" +")")

              series_AUMC0_inf= df_concat_PK_iv['AUMC0-‚àû']
              list_AUMC0_inf_str_f=["%.2f" % round(v,2) for v in series_AUMC0_inf.tolist()]
              series_AUMC0_inf=pd.Series(list_AUMC0_inf_str_f, index = df_concat_PK_iv.index.tolist(), name='AUMC0-‚àû '+"("+measure_unit_org+"√ó—á\u00B2" +")")

              series_Kel= df_concat_PK_iv['Kel']
              list_Kel_str_f=["%.4f" % round(v,4) for v in series_Kel.tolist()]
              series_Kel=pd.Series(list_Kel_str_f, index = df_concat_PK_iv.index.tolist(), name='Kel '+"("+"—á\u207B\u00B9"+")")

              df_total_PK_iv = pd.concat([series_Cmax, series_Tmax, series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_Kel], axis= 1) 
              df_total_PK_iv.index.name = '–ù–æ–º–µ—Ä'

              ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

              df_total_PK_iv1=df_total_PK_iv.copy()
              df_total_PK_iv1.iloc[-6,:],df_total_PK_iv1.iloc[-2,:]=df_total_PK_iv.iloc[-2,:],df_total_PK_iv.iloc[-6,:]

              df_total_PK_iv=df_total_PK_iv1

              df_total_PK_iv1=df_total_PK_iv.copy()
              df_total_PK_iv1.iloc[-4,:],df_total_PK_iv1.iloc[-5,:]=df_total_PK_iv.iloc[-5,:],df_total_PK_iv.iloc[-4,:]

              df_total_PK_iv=df_total_PK_iv1

              df_total_PK_iv = df_total_PK_iv.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')

              table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ' + "("+file_name+")"
              list_heading_word.append(table_heading)
              
              list_table_word.append(df_total_PK_iv) 
              #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ñ—Ä–µ–π–º–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ä–≥–∞–Ω–æ–≤ –∏ —Ç.–¥.


              list_name_organs.append(file_name)
              list_df_unrounded.append(df_concat_PK_iv)
              list_df_for_mean_unround_for_graphics.append(df_concat)

          list_list_PK_par_mean=[]
          for i in list_df_unrounded: 
              mean_—Åmax=i['Cmax'].loc['mean']
              mean_tmax=i['Tmax'].loc['mean']
              mean_mrt0inf=i['MRT0‚Üí‚àû'].loc['mean']
              mean_thalf=i['T1/2'].loc['mean']
              mean_auc0t=i['AUC0-t'].loc['mean']
              mean_auc0inf=i['AUC0‚Üí‚àû'].loc['mean']
              mean_aumc0inf=i['AUMC0-‚àû'].loc['mean']
              mean_kel=i['Kel'].loc['mean']
              list_list_PK_par_mean.append([mean_—Åmax,mean_tmax,mean_mrt0inf,mean_thalf,mean_auc0t,mean_auc0inf,mean_aumc0inf,mean_kel])

          ### –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–≥–∞–Ω–æ–≤
          df_PK_organs_total = pd.DataFrame(list_list_PK_par_mean, columns =['Cmax','Tmax','MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-‚àû','Kel'],index=list_name_organs)
          df_PK_organs_total_transpose=df_PK_organs_total.transpose()
          
          index_blood = list_name_organs.index("–ö—Ä–æ–≤—å")
          ###ft
          list_aucot_for_ft=[]
          list_columns_df_PK_organs_total_transpose=df_PK_organs_total_transpose.columns.tolist()
          list_columns_df_PK_organs_total_transpose.remove('–ö—Ä–æ–≤—å') #–∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∫—Ä–æ–≤–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω —Ç–∞–∫ "–ö—Ä–æ–≤—å"
          for i in list_columns_df_PK_organs_total_transpose:
              aucot=df_PK_organs_total_transpose[i].loc['AUC0-t']
              list_aucot_for_ft.append(aucot)

          list_ft=[] ## –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
          list_ft_round=[]
          for i in list_aucot_for_ft:
              ft=i/df_PK_organs_total_transpose["–ö—Ä–æ–≤—å"].loc['AUC0-t']
              list_ft.append(ft)
              list_ft_round.append("%.2f" % round(ft,2))
          list_ft_round.insert(index_blood, "-")


          df_PK_organs_total_transpose.loc[ len(df_PK_organs_total_transpose.index )] = list_ft_round


          df_PK_organs_total_transpose.index=['Cmax ' +"("+measure_unit_org_blood+")",'Tmax ' +"("+"—á"+")",'MRT0‚Üí‚àû '+"("+"—á"+")",'T1/2 '+"("+"—á"+")",'AUC0-t '+"("+measure_unit_org_blood+"√ó—á" +")",'AUC0‚Üí‚àû '+"("+measure_unit_org_blood+"√ó—á" +")",'AUMC0-‚àû '+"("+measure_unit_org_blood+"√ó—á\u00B2" +")",'Kel '+"("+"—á\u207B\u00B9"+")",'f—Ç']

          #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ df_PK_organs_total_transpose

          df_organs_trans_trans=df_PK_organs_total_transpose.transpose()


          series_Cmax=df_organs_trans_trans['Cmax ' +"("+measure_unit_org_blood+")"].tolist() 
          series_Cmax=pd.Series(["%.2f" % round(v,2) for v in series_Cmax])

          series_Tmax=df_organs_trans_trans['Tmax ' +"("+"—á"+")"].tolist()       
          series_Tmax=pd.Series(["%.2f" % round(v,2) for v in series_Tmax]) 

          series_MRT0_inf= df_organs_trans_trans['MRT0‚Üí‚àû '+"("+"—á"+")"].tolist()   
          series_MRT0_inf=pd.Series(["%.3f" % round(v,3) for v in series_MRT0_inf])

          series_half_live= df_organs_trans_trans['T1/2 '+"("+"—á"+")"].tolist()   
          series_half_live=pd.Series(["%.2f" % round(v,2) for v in series_half_live]) 

          series_AUC0_t= df_organs_trans_trans['AUC0-t '+"("+measure_unit_org_blood+"√ó—á" +")"].tolist()   
          series_AUC0_t=pd.Series(["%.2f" % round(v,2) for v in series_AUC0_t])

          series_AUC0_inf= df_organs_trans_trans['AUC0‚Üí‚àû '+"("+measure_unit_org_blood+"√ó—á" +")"].tolist()  
          series_AUC0_inf=pd.Series(["%.2f" % round(v,2) for v in series_AUC0_inf]) 

          series_AUMC0_inf= df_organs_trans_trans['AUMC0-‚àû '+"("+measure_unit_org_blood+"√ó—á\u00B2" +")"].tolist()   
          series_AUMC0_inf=pd.Series(["%.2f" % round(v,2) for v in series_AUMC0_inf])
    
          series_Kel= df_organs_trans_trans['Kel '+"("+"—á\u207B\u00B9"+")"].tolist()   
          series_Kel=pd.Series(["%.4f" % round(v,4) for v in series_Kel])

          series_ft= df_organs_trans_trans['f—Ç'].tolist() ##—É–∂–µ –æ–∫—Ä—É–≥–ª–µ–Ω
          series_ft=pd.Series(series_ft)

          df_total_total_organs = pd.concat([series_Cmax, series_Tmax, series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_Kel,series_ft], axis= 1)

          df_total_total_organs.index=df_PK_organs_total_transpose.columns.tolist()
          df_total_total_organs.columns=df_PK_organs_total_transpose.index.tolist() 

          df_total_total_organs_total= df_total_total_organs.transpose()
          df_total_total_organs_total.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å'

          table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∫–∞–Ω—è—Ö'
          list_heading_word.append(table_heading) 

          list_table_word.append(df_total_total_organs_total) 

          ###–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ "–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö"

          ### –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

          list_list_mean_conc=[]
          list_list_std_conc=[]
          for i in list_df_for_mean_unround_for_graphics: 
              mean_conc_list=i.loc['mean'].tolist()
              std_conc_list=i.loc['std'].tolist()
              list_list_mean_conc.append(mean_conc_list)
              list_list_std_conc.append(std_conc_list)

          list_name_organs_std=[]
          for i in list_name_organs:
           j= i + " std"
           list_name_organs_std.append(j)

          df_mean_conc_graph = pd.DataFrame(list_list_mean_conc, columns =list_t_graph[0],index=list_name_organs)
          df_mean_conc_graph_1=df_mean_conc_graph.transpose()
          df_std_conc_graph = pd.DataFrame(list_list_std_conc, columns =list_t_graph[0],index=list_name_organs_std)
          df_std_conc_graph_1=df_std_conc_graph.transpose()
          df_concat_mean_std= pd.concat([df_mean_conc_graph_1,df_std_conc_graph_1],sort=False,axis=1)

          list_colors=["black","red","blue","green","yellow","orange","purple","brown","coral","plum","tan","pink","grey"]
          list_zip_mean_std_colors=zip(list_name_organs,list_name_organs_std,list_colors)    

          fig, ax = plt.subplots()
          for i,j,c in list_zip_mean_std_colors:
               plt.errorbar(list(df_concat_mean_std.index),df_concat_mean_std[i],yerr=df_concat_mean_std[j],color= c, marker='o',markersize=4.0,markeredgecolor=c,markerfacecolor=c,ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0,label=i)
               plt.xlabel("–í—Ä–µ–º—è, —á")
               plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+ measure_unit_org_blood)
               ax.legend(fontsize = 5)
          
          list_graphics_word.append(fig)

          graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ –æ—Ä–≥–∞–Ω–∞—Ö'
          list_heading_graphics_word.append(graphic)

          ### –≤ –ø–æ–ª—É–ª–æ–≥. –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

          list_t_organs=list(df_concat_mean_std.index)
          list_t_organs.remove(0)
          df_concat_mean_std_without_0=df_concat_mean_std.drop([0])
          list_zip_mean_std_colors=zip(list_name_organs,list_name_organs_std,list_colors)

          fig, ax = plt.subplots()
          for i,j,c in list_zip_mean_std_colors:
               plt.errorbar(list_t_organs,df_concat_mean_std_without_0[i],yerr=df_concat_mean_std_without_0[j],color= c, marker='o',markersize=4.0,markeredgecolor=c,markerfacecolor=c,ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0,label=i)
               ax.set_yscale("log")
               plt.xlabel("–í—Ä–µ–º—è, —á")
               plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+ measure_unit_org_blood)
               ax.legend(fontsize = 5)
          
          list_graphics_word.append(fig)

          graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ –æ—Ä–≥–∞–Ω–∞—Ö'
          list_heading_graphics_word.append(graphic)

          ###–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è —Ç–∫–∞–Ω–µ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

          #list_zip_list_ft_list_name_organs=zip(list_ft,list_name_organs)
          list_name_organs.remove("–ö—Ä–æ–≤—å")

          fig, ax = plt.subplots()

          sns.barplot(x=list_name_organs, y=list_ft,color='blue',width=0.3)

          plt.ylabel("–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")

          ax.set_xticklabels(list_name_organs,fontdict={'fontsize': 6.0})

          list_graphics_word.append(fig)
          
          graphic='–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö'
          list_heading_graphics_word.append(graphic) 

           
      else:

          st.info('‚ùï‚ùóÔ∏è‚ùï –ó–∞–≥—Ä—É–∑–∏—Ç—å XLSX —Ñ–∞–π–ª—ã')

       
      ############–∫–∞–ª

      st.title('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –∫–∞–ª–æ–º')

      if "measure_unit_org_cal" not in st.session_state:   
       st.session_state["measure_unit_org_cal"] = ""

      measure_unit_org_cal = st.text_input("–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–∞–ª–µ", key='–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –∫–∞–ª–µ', value = st.session_state["measure_unit_org_cal"])
       
      st.session_state["measure_unit_org_cal"] = measure_unit_org_cal

      st.info('‚ùï‚ùóÔ∏è‚ùï –í–≤–µ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏')

      st.subheader('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –∫–∞–ª–æ–º —Ñ–æ—Ä–º–∞—Ç–∞ XLSX')
      uploaded_file_excrement = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –∫–∞–ª–æ–º", key="–§–∞–π–ª —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å –∫–∞–ª–æ–º –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö")
      
      if uploaded_file_excrement is not None:
          save_uploadedfile(uploaded_file_excrement)
          st.session_state["uploaded_file_excrement"] = uploaded_file_excrement.name

      if "uploaded_file_excrement" in st.session_state and measure_unit_org_cal:
         
         df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_excrement"]))
         st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫–∞–ª–µ')
         st.write(df)

         table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫–∞–ª–µ'
         list_heading_word.append(table_heading) 
         col_mapping = df.columns.tolist()
         col_mapping.remove('–ù–æ–º–µ—Ä')

         list_gmean=[]
         list_cv=[] 
         for i in col_mapping:

             list_ser=df[i].tolist()
             list_ser_cv = list_ser#–Ω—É–∂–Ω–æ —Å –Ω—É–ª—è–º–∏ –¥–ª—è CV

             #—É–±—Ä–∞—Ç—å –Ω—É–ª–∏, —Ç.–∫ –Ω—É–ª–∏ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å –Ω—É–ª–µ–≤–æ–µ gmean
             count_for_range_ser=len(list_ser)
             list_range_ser=range(0,count_for_range_ser)
             
             list_ser_without_0=[]
             for i in list_range_ser:
                 if list_ser[i] !=0:
                    list_ser_without_0.append(list_ser[i])

             list_ser = list_ser_without_0

             def g_mean(list_ser):
                 a=np.log(list_ser)
                 return np.exp(a.mean())
             Gmean=g_mean(list_ser)
             list_gmean.append(Gmean)

             cv_std=lambda x: np.std(x, ddof= 1 )
             cv_mean=lambda x: np.mean(x)
             CV_std=cv_std(list_ser_cv)
    
             CV_mean=cv_mean(list_ser_cv)

             CV=CV_std/CV_mean * 100
             list_cv.append(CV)
         
         #–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è None –∏–∑ —Ñ—Ä–µ–π–º–∞
         list_gmean.pop(0)
         list_gmean.insert(0,0)
         list_cv.pop(0)
         list_cv.insert(0,0)

         df_averaged_concentrations=df.describe()
         df_averaged_concentrations_1= df_averaged_concentrations.drop(['count', '25%','75%'],axis=0)
         df_averaged_concentrations_2= df_averaged_concentrations_1.rename(index={"50%": "median"})
         df_averaged_concentrations_2.loc[len(df_averaged_concentrations_2.index )] = list_gmean
         df_averaged_3 = df_averaged_concentrations_2.rename(index={5 : "Gmean"})
         df_averaged_3.loc[len(df_averaged_3.index )] = list_cv
         df_averaged_3 = df_averaged_3.rename(index={6 : "CV, %"})

         df_index=df.set_index('–ù–æ–º–µ—Ä')
         df_concat= pd.concat([df_index,df_averaged_3],sort=False,axis=0)
         df_concat_round=df_concat.round(2)
         
         ###–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–∞ —Å –Ω—É–ª—è–º–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
         col_mapping = df_concat_round.columns.tolist()

         list_list_series=[]
         for i in col_mapping:
             list_series = df_concat_round[i].tolist()
              
             list_series_round = []
             for i in list_series:
                 value = "%.2f" % round(i,2)
                 list_series_round.append(value)
                  
             list_list_series.append(list_series_round)

         df_concat_round_str = pd.DataFrame(list_list_series, columns = df_concat_round.index.tolist(),index=col_mapping) 
         df_concat_round_str_transpose = df_concat_round_str.transpose()
         df_concat_round_str_transpose.index.name = '–ù–æ–º–µ—Ä'

         ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

         df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
         df_concat_round_str_transpose1.iloc[-6,:],df_concat_round_str_transpose1.iloc[-2,:]=df_concat_round_str_transpose.iloc[-2,:],df_concat_round_str_transpose.iloc[-6,:]

         df_concat_round_str_transpose=df_concat_round_str_transpose1

         df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
         df_concat_round_str_transpose1.iloc[-4,:],df_concat_round_str_transpose1.iloc[-5,:]=df_concat_round_str_transpose.iloc[-5,:],df_concat_round_str_transpose.iloc[-4,:]

         df_concat_round_str_transpose=df_concat_round_str_transpose1

         df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')
         
         #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–±–ª—Ü–æ–≤
         list_time_round =["%.2f" % round(v,2) for v in df_concat_round_str_transpose.columns.tolist()]
         df_concat_round_str_transpose.columns = list_time_round

         list_table_word.append(df_concat_round_str_transpose) 

         ########### –¥–∏–∞–≥—Ä–∞–º–º–∞    


         list_time = []
         for i in col_mapping:
             numer=float(i)
             list_time.append(numer)

         list_concentration=df_averaged_concentrations.loc['mean'].tolist()

         list_concentration.remove(0)
         list_time.remove(0)



         fig, ax = plt.subplots()

         sns.barplot(x=list_time, y=list_concentration,color='blue',width=0.5)
         plt.xlabel("–í—Ä–µ–º—è, —á")
         plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org_cal)

         list_graphics_word.append(fig)

         graphic='–í—ã–≤–µ–¥–µ–Ω–∏–µ —Å –∫–∞–ª–æ–º'
         list_heading_graphics_word.append(graphic)    


      else:
         st.info('‚ùï‚ùóÔ∏è‚ùï –ó–∞–≥—Ä—É–∑–∏—Ç—å XLSX —Ñ–∞–π–ª')
      
      ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
      st.session_state["list_heading_word"] = list_heading_word
      st.session_state["list_table_word"] = list_table_word
      st.session_state["list_graphics_word"] = list_graphics_word
      st.session_state["list_heading_graphics_word"] = list_heading_graphics_word


#####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
   if panel == "–¢–∞–±–ª–∏—Ü—ã": 
      
      list_heading_word = st.session_state["list_heading_word"]
      list_table_word = st.session_state["list_table_word"]

      ### —Ç–∞–±–ª–∏—Ü—ã
      zip_heading_table = zip(list_heading_word,list_table_word)

      doc = Document()

      # Settings
      style = doc.styles['Normal']
      font = style.font
      font.name = 'Times New Roman'
      font.size = Pt(8)
      
      for heading, df in zip_heading_table:
          doc.add_paragraph(heading)

          name_columns = pd.DataFrame(df.columns.tolist()).T
          # add columns
          name_columns.columns = df.columns.tolist()
          df_columns = pd.concat([name_columns, df]).reset_index(drop = True)
          # add indexes
          total_name_index = df.index.name
          list_index_names = df.index.tolist()
          list_index_names.insert(0,total_name_index)
          series_index_names=pd.Series(list_index_names, name=total_name_index)
          df_series_index_names = series_index_names.to_frame()
          
          df_columns_indexes=pd.concat([df_series_index_names, df_columns], axis=1)
          
          t = doc.add_table(rows=1, cols=df_columns_indexes.shape[1])
          t.style = 'TableGrid'
          # Add the body of the data frame
          for i in range(df_columns_indexes.shape[0]):
              row = t.add_row()
              for j in range(df_columns_indexes.shape[1]):
                  cell = df_columns_indexes.iat[i, j]
                  row.cells[j].text = str(cell)

      bio = BytesIO()
      doc.save(bio)
      if doc:
          st.download_button(
              label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã üìÉ",
              data=bio.getvalue(),
              file_name="–¢–∞–±–ª–∏—Ü—ã.docx",
              mime="docx"
          )

      zip_heading_table = zip(list_heading_word,list_table_word) ###–µ—â–µ —Ä–∞–∑ –æ–±—ä—è–≤–ª—è–µ–º, –∏–Ω–∞—á–µ –Ω–µ –≤–∏–¥–∏—Ç zip-–æ–±—ä–µ–∫—Ç
      #####–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
      for heading, df in zip_heading_table:
          st.subheader(heading)
          st.write(df)

   if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":

      list_graphics_word = st.session_state["list_graphics_word"]
      list_heading_graphics_word = st.session_state["list_heading_graphics_word"]

      ### –≥—Ä–∞—Ñ–∏–∫–∏
      zip_graphics_heading = zip(list_graphics_word,list_heading_graphics_word)
      doc = Document()

      # Settings
      style = doc.styles['Normal']
      font = style.font
      font.name = 'Times New Roman'
      font.size = Pt(12)

      buf = BytesIO() #–∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–∞–∑–∏–ª–∞ –æ—à–∏–±–∫–∞
      for fig, heading in zip_graphics_heading:
          buf = BytesIO()
          fig.savefig(buf, format="jpg", dpi=300, bbox_inches='tight')
          fp = tempfile.NamedTemporaryFile() 
          with open(f"{fp.name}.jpg",'wb') as ff:
               ff.write(buf.getvalue()) 
          doc.add_picture(buf)
          doc.add_paragraph(heading)
      
      doc.save(buf)
      if doc:
          st.download_button(
              label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ üìà",
              data=buf.getvalue(),
              file_name="–ì—Ä–∞—Ñ–∏–∫–∏.docx",
              mime="docx",
              key = "graphics"
          )
      
      #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

      #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
      type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∞—Ö", "–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö", "–î–∏–∞–≥—Ä–∞–º–º—ã —ç–∫—Å–∫—Ä–µ—Ü–∏–∏"),disabled = False, key = "–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - –ò–û" )

      count_graphics_for_visual = len(list_heading_graphics_word)
      list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)
      
      for i in list_range_count_graphics_for_visual:
          if list_heading_graphics_word[i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
             if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])
          if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
             if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])
          if list_heading_graphics_word[i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
             if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])
          if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö"):
             if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∞—Ö':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])
          if list_heading_graphics_word[i].__contains__("–¢–∫–∞–Ω–µ–≤–∞—è"):
             if type_graphics == '–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])
          if list_heading_graphics_word[i].__contains__("–í—ã–≤–µ–¥–µ–Ω–∏–µ"):
             if type_graphics == '–î–∏–∞–≥—Ä–∞–º–º—ã —ç–∫—Å–∫—Ä–µ—Ü–∏–∏':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])

################################################################################################

if option == '–õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è':
   
   panel = st.radio(
        "‚öôÔ∏è–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "–¢–∞–±–ª–∏—Ü—ã","–ì—Ä–∞—Ñ–∏–∫–∏"),
        horizontal=True, key= "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ - –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö"
    )
   
   ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   if "measure_unit_lin" not in st.session_state:
      st.session_state["measure_unit_lin"] = ""
   if "measure_unit_dose_lin" not in st.session_state:
      st.session_state["measure_unit_dose_lin"] = ""

   #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
   list_heading_word=[]
   list_table_word=[]
   list_graphics_word=[]
   list_heading_graphics_word=[]

   if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":

      st.title('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è')
       
      st.subheader('–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏')
       
      measure_unit_lin = st.text_input("–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏", key="–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è", value = st.session_state["measure_unit_lin"])
      st.session_state["measure_unit_lin"] = measure_unit_lin

      measure_unit_dose_lin = st.text_input("–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–æ–∑–∏—Ä–æ–≤–∫–∏", key="–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è", value = st.session_state["measure_unit_dose_lin"])
      st.session_state["measure_unit_dose_lin"] = measure_unit_dose_lin 

      st.info('‚ùï‚ùóÔ∏è‚ùï –í–≤–µ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è')

      #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
      if "index_method_auc - –õ–î" not in st.session_state:
          st.session_state["index_method_auc - –õ–î"] = 0

      method_auc = st.radio("üìå–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t",('linear',"linear-up/log-down"),key = "–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t - –õ–î", index = st.session_state["index_method_auc - –õ–î"])
      
      if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t - –õ–î"] == 'linear':
         st.session_state["index_method_auc - –õ–î"] = 0
      if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC0-t - –õ–î"] == "linear-up/log-down":
         st.session_state["index_method_auc - –õ–î"] = 1

      file_uploader = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–æ–∫(–Ω–µ –º–µ–Ω–µ–µ 3-—Ö —Ñ–∞–π–ª–æ–≤); —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–≤–æ–µ–π –¥–æ–∑–∏—Ä–æ–≤–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–æ–∑–∏—Ä–æ–≤–∫–∞ 50'. –ï—Å–ª–∏ –¥–æ–∑–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥c—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, –¥—Ä–æ–±—å –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ '.' –°–ª–æ–≤–æ '–î–æ–∑–∏—Ä–æ–≤–∫–∞' –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",accept_multiple_files=True, key='–§–∞–π–ª—ã –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è')
      
      ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      if file_uploader is not None:
         for i in file_uploader:
             save_uploadedfile(i)
             st.session_state[str(i.name)] = i.name
      
      list_keys_file_lin = []
      for i in st.session_state.keys():
          if i.__contains__("xlsx") and i.__contains__("–î–æ–∑–∏—Ä–æ–≤–∫–∞"): ###—Å–ª–æ–≤–æ –¥–æ–∑–∏—Ä–æ–≤–∫–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ—Ç –¥—Ä—É–≥–∏—Ö xlsx –æ—Ä–≥–∞–Ω–æ–≤, —Ç.–∫ —Ç–∞–º —Ç–æ–∂–µ –∫–ª—é—á–∏ –∏–º—è —Ñ–∞–π–ª–∞
             list_keys_file_lin.append(i)

      if (list_keys_file_lin != []) and measure_unit_lin and measure_unit_dose_lin:

          list_name_doses=[]
          list_df_unrounded=[]
          list_df_for_mean_unround_for_graphics=[]
          list_t_graph=[]

          for i in list_keys_file_lin:
              df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",i))

              file_name=i[10:-5]

              st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ measure_unit_lin)
              st.write(df)

              table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ measure_unit_lin
              list_heading_word.append(table_heading)

              col_mapping = df.columns.tolist()
              col_mapping.remove('–ù–æ–º–µ—Ä')

              list_gmean=[]
              list_cv=[] 
              for i in col_mapping:

                  list_ser=df[i].tolist()
                  list_ser_cv = list_ser#–Ω—É–∂–Ω–æ —Å –Ω—É–ª—è–º–∏ –¥–ª—è CV

                  #—É–±—Ä–∞—Ç—å –Ω—É–ª–∏, —Ç.–∫ –Ω—É–ª–∏ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å –Ω—É–ª–µ–≤–æ–µ gmean
                  count_for_range_ser=len(list_ser)
                  list_range_ser=range(0,count_for_range_ser)
                  
                  list_ser_without_0=[]
                  for i in list_range_ser:
                      if list_ser[i] !=0:
                         list_ser_without_0.append(list_ser[i])

                  list_ser = list_ser_without_0

                  def g_mean(list_ser):
                      a=np.log(list_ser)
                      return np.exp(a.mean())
                  Gmean=g_mean(list_ser)
                  list_gmean.append(Gmean)
                  

                  cv_std=lambda x: np.std(x, ddof= 1 )
                  cv_mean=lambda x: np.mean(x)
                  CV_std=cv_std(list_ser_cv)

                  CV_mean=cv_mean(list_ser_cv)

                  CV=CV_std/CV_mean * 100
                  list_cv.append(CV)
              
              #–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è None –∏–∑ —Ñ—Ä–µ–π–º–∞
              list_gmean.pop(0)
              list_gmean.insert(0,0)
              list_cv.pop(0)
              list_cv.insert(0,0)
              

              df_averaged_concentrations=df.describe()
              df_averaged_concentrations_1= df_averaged_concentrations.drop(['count', '25%','75%'],axis=0)
              df_averaged_concentrations_2= df_averaged_concentrations_1.rename(index={"50%": "median"})
              df_averaged_concentrations_2.loc[len(df_averaged_concentrations_2.index )] = list_gmean
              df_averaged_3 = df_averaged_concentrations_2.rename(index={5 : "Gmean"})
              df_averaged_3.loc[len(df_averaged_3.index )] = list_cv
              df_averaged_3 = df_averaged_3.rename(index={6 : "CV, %"})

              df_index=df.set_index('–ù–æ–º–µ—Ä')
              df_concat= pd.concat([df_index,df_averaged_3],sort=False,axis=0)
           
              ##–ø–æ–º–µ—â–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–æ–≤ —Å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Ç–æ–º std –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ª–∏–Ω–∏–∏–π –æ—à–∏–±–æ–∫
              

              df_concat_round=df_concat.round(2)
              
              ###–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–∞ —Å –Ω—É–ª—è–º–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
              col_mapping = df_concat_round.columns.tolist()

              list_list_series=[]
              for i in col_mapping:
                  list_series = df_concat_round[i].tolist()
                   
                  list_series_round = []
                  for i in list_series:
                      value = "%.2f" % round(i,2)
                      list_series_round.append(value)
                       
                  list_list_series.append(list_series_round)

              df_concat_round_str = pd.DataFrame(list_list_series, columns = df_concat_round.index.tolist(),index=col_mapping) 
              df_concat_round_str_transpose = df_concat_round_str.transpose()
              df_concat_round_str_transpose.index.name = '–ù–æ–º–µ—Ä'

              ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

              df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
              df_concat_round_str_transpose1.iloc[-6,:],df_concat_round_str_transpose1.iloc[-2,:]=df_concat_round_str_transpose.iloc[-2,:],df_concat_round_str_transpose.iloc[-6,:]

              df_concat_round_str_transpose=df_concat_round_str_transpose1

              df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
              df_concat_round_str_transpose1.iloc[-4,:],df_concat_round_str_transpose1.iloc[-5,:]=df_concat_round_str_transpose.iloc[-5,:],df_concat_round_str_transpose.iloc[-4,:]

              df_concat_round_str_transpose=df_concat_round_str_transpose1

              df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index')
              
              #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–±–ª—Ü–æ–≤
              list_time_round =["%.2f" % round(v,2) for v in df_concat_round_str_transpose.columns.tolist()]
              df_concat_round_str_transpose.columns = list_time_round

              list_table_word.append(df_concat_round_str_transpose)
              ########### –≥—Ä–∞—Ñ–∏–∫–∏    
              
              
              ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

              # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              count_row_df = len(df.axes[0])

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)
              list_t_graph.append(list_time) 

              for r in range(0,count_row_df):

                  list_concentration=df.iloc[r].tolist()

                  numer_animal=list_concentration[0]

                  list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                  list_concentration = [float(v) for v in list_concentration]


                  fig, ax = plt.subplots()
                  plt.plot(list_time,list_concentration,marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue")
                  plt.xlabel("–í—Ä–µ–º—è, —á")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin)
                  
                  list_graphics_word.append(fig)
     
                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ '  +file_name+" "+ measure_unit_lin+',  '+numer_animal
                  list_heading_graphics_word.append(graphic) 

               #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
                  count_for_0_1=len(list_concentration)
                  list_range_for_0_1=range(0,count_for_0_1)

                  list_time_0=[]
                  list_for_log_1=[]
                  for i in list_range_for_0_1:
                      if list_concentration[i] !=0:
                         list_for_log_1.append(list_concentration[i])
                         list_time_0.append(list_time[i]) 

                  fig, ax = plt.subplots()
                  plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue")
                  ax.set_yscale("log")
                  plt.xlabel("–í—Ä–µ–º—è, —á")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin)

                  
                  list_graphics_word.append(fig)
                  
                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ measure_unit_lin+',  '+numer_animal
                  list_heading_graphics_word.append(graphic) 

           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

              df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
              df_for_plot_conc_1 = df_for_plot_conc.transpose()
              list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()

              fig, ax = plt.subplots()

              plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel("–í—Ä–µ–º—è, —á")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin)
              ax.legend()
              
              list_graphics_word.append(fig)
              
              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ " +file_name+" "+ measure_unit_lin
              list_heading_graphics_word.append(graphic) 
       
           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
              df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)


              fig, ax = plt.subplots()

              plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel("–í—Ä–µ–º—è, —á")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin)
              ax.set_yscale("log")
              ax.legend()
              
              list_graphics_word.append(fig)
              
              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ " +file_name+" "+ measure_unit_lin
              list_heading_graphics_word.append(graphic) 
               ###—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ    
           # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)


              list_concentration=df_averaged_concentrations.loc['mean'].tolist()
              err_y_1=df_averaged_concentrations.loc['std'].tolist()


              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              plt.xlabel("–í—Ä–µ–º—è, —á")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin)
               
              list_graphics_word.append(fig)
              
              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ measure_unit_lin
              list_heading_graphics_word.append(graphic)



           #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              #–¥–ª—è –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º. –ø–æ—Å—Ç–æ—Ä–∏–º –±–µ–∑ –Ω—É–ª—è
              list_time.remove(0)
              list_concentration.remove(0)
              err_y_1.remove(0) 


              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              ax.set_yscale("log")
              plt.xlabel("–í—Ä–µ–º—è, —á")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin)

              list_graphics_word.append(fig)
              
              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' +file_name+" "+ measure_unit_lin
              list_heading_graphics_word.append(graphic)

              ############### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

              ###Cmax
              df_without_numer=df.drop(['–ù–æ–º–µ—Ä'],axis=1)
              count_row=df_without_numer.shape[0]
              list_cmax=[]
              for i in range(0,count_row):
                  cmax=float(max(df_without_numer.iloc[[i]].iloc[0].tolist()))
                  list_cmax.append(cmax)

              ###Tmax   
              list_Tmax=[]
              for cmax in list_cmax:
                  for column in df.columns:
                      for num, row in df.iterrows():
                          if df.iloc[num][column] == cmax:
                             list_Tmax.append(f"{column}")
            
              list_Tmax_float=[]           
              for i in list_Tmax:
                  Tmax=float(i)
                  list_Tmax_float.append(Tmax)

              ###AUC0-t
              list_AUC_0_T=[]
              if method_auc == 'linear':
                 for i in range(0,count_row):
                     list_columns_T=[]
                     for column in df_without_numer.columns:
                         list_columns_T.append(float(column))
                     list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                     
                     AUC_0_T=np.trapz(list_concentration,x=list_columns_T)
                     list_AUC_0_T.append(AUC_0_T)
              if method_auc == 'linear-up/log-down':
                 for i in range(0,count_row):
                     list_columns_T=[]
                     for column in df_without_numer.columns:
                         list_columns_T.append(float(column))
                     list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                     
                     list_c = list_concentration
                     list_t = list_columns_T
                     
                     cmax=max(list_c)
                     cmax_index = list_c.index(cmax)
                     ### cmax –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –∏ –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–π —á–∞—Å—Ç–∏ 
                     list_before_cmax_—Å=list_c[:cmax_index+1]
                     list_after_cmax_—Å=list_c[cmax_index:]
                     list_before_cmax_t=list_t[:cmax_index+1]
                     list_after_cmax_t=list_t[cmax_index:]
                     
                     ####–≤–æ—Å—Ö–æ–¥—è—â–∞—è —á–∞—Å—Ç—å
                     AUC_0_T_before=np.trapz(list_before_cmax_—Å,x=list_before_cmax_t)
                     
                     #####–Ω–∏—Å—Ö–æ–¥—è—â–∞—è (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .py –Ω–µ–≤–µ—Ä–Ω–æ–µ)
                     count_i = len(list_after_cmax_—Å)

                     list_range= range(0,count_i)
                     list_AUC_0_T_after=[]
                     AUC_0_T=0
                     b=0
                     for i in list_range:
                         if b<count_i-1:
                             AUC_0_T+=(list_after_cmax_t[i+1]-list_after_cmax_t[i])/(np.log(np.asarray(list_after_cmax_—Å[i])/np.asarray(list_after_cmax_—Å[i+1]))) *(list_after_cmax_—Å[i]-list_after_cmax_—Å[i+1])
                             b+=1
                             list_AUC_0_T_after.append(AUC_0_T)
                             
                     AUC_0_T_after = list_AUC_0_T_after[-1]
                     
                     AUC_O_T = AUC_0_T_before + AUC_0_T_after
                     
                     list_AUC_0_T.append(AUC_O_T)



              ####–°max/AUC0-t
              list_–°max_division_AUC0_t_for_division=zip(list_cmax,list_AUC_0_T)
              list_–°max_division_AUC0_t=[]
              for i,j in list_–°max_division_AUC0_t_for_division:
                      list_–°max_division_AUC0_t.append(i/j)


              ####KEL
              list_kel_total=[]
              for i in range(0,count_row):
                  list_columns_T=[]
                  for column in df_without_numer.columns:
                      list_columns_T.append(float(column))
                  list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                  list_concentration.remove(0)
                  list_c=list_concentration

                  list_time=df_without_numer.columns.tolist()
                  list_time.remove(0) 

                  list_t=[]
                  for i in list_time:
                      i=float(i)
                      list_t.append(i)

                  #—Å—Ä–µ–∑_–±–µ–∑_cmax
                  max_value_c=max(list_c)
                  index_cmax=list_c.index(max_value_c)

                  list_c_without_cmax=list_c[index_cmax+1:]
                  list_t_without_cmax=list_t[index_cmax+1:]

                  #—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
                  count_for_0_1=len(list_c_without_cmax)
                  list_range_for_0_1=range(0,count_for_0_1)

                  list_time_0=[]
                  list_conc_0=[]
                  for i in list_range_for_0_1:
                      if list_c_without_cmax[i] !=0:
                         list_conc_0.append(list_c_without_cmax[i])
                         list_time_0.append(list_t_without_cmax[i]) 
                  ################################

                  n_points=len(list_conc_0)
                  list_n_points = range(0,n_points)

                  #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —É–º–µ–Ω—å—â–∞—é—â–µ–º—Å—è –∫–æ–ª, —Ç–æ—á–µ–∫
                  list_for_kel_c=[]
                  for j in list_n_points:
                      if j<n_points:
                         list_c_new=list_conc_0[j:n_points]
                         list_for_kel_c.append(list_c_new)
                  list_for_kel_c.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
                  list_for_kel_c.pop(-1)  #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏     

                  list_for_kel_t=[]
                  for j in list_n_points:
                      if j<n_points:
                         list_t_new=list_time_0[j:n_points]
                         list_for_kel_t.append(list_t_new)
                  list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
                  list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ 

                  list_ct_zip=zip(list_for_kel_c,list_for_kel_t)

                  list_kel=[]
                  list_r=[]
                  for i,j in list_ct_zip:

                      n_points_r=len(i)

                      np_c=np.asarray(i)
                      np_t_1=np.asarray(j).reshape((-1,1))

                      np_c_log=np.log(np_c)

                      model = LinearRegression().fit(np_t_1,np_c_log)

                      np_t=np.asarray(j)
                      a=np.corrcoef(np_t, np_c_log)
                      cor=((a[0])[1])
                      r_sq=cor**2

                      adjusted_r_sq=1-((1-r_sq)*((n_points_r-1))/(n_points_r-2))

                      ########################################
                      kel=abs(model.coef_[0])
                      list_kel.append(kel)
                      list_r.append(adjusted_r_sq)

                  #–¥–µ–ª–∞–µ–º —Å—Ä–µ–∑—ã —Å–ø–∏—Å–æ–∫–æ–≤ –¥–æ rmax
                  max_r=max(list_r)

                  index_max_r= list_r.index(max_r)

                  list_r1=list_r
                  list_kel1=list_kel

                  number_elem_list_r1=len(list_r1)

                  list_range_kel=range(0,number_elem_list_r1) 

                  list_kel_total_1=[]
                  for i in list_range_kel:

                      if abs(list_r[index_max_r] - list_r1[i]) < 0.0001: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç rmax
                         list_kel_total.append(list_kel1[i]*math.log(math.exp(1))) #–æ—Ç–¥–∞—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ rmax —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
                         break #—Å–∞–º–∞—è —Ä–∞–Ω–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–æ–≤—Ä—è—é—â–∞—è —É—Å–ª–æ–≤–∏—é

                  for i in list_kel_total_1:
                      list_kel_total.append(i) 

              ####T1/2
              list_half_live=[]
              for i in list_kel_total:
                  half_live=math.log(2)/i
                  list_half_live.append(half_live)


              ###AUC0-inf 

              list_auc0_inf=[] 

              list_of_list_c=[]
              for i in range(0,count_row):
                  list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
                  list_concentration.remove(0)
                  list_c = list_concentration
                  list_c.reverse() ### –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∏—Å–∫–∞ Clast –Ω–µ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é
                  list_of_list_c.append(list_c)

              list_zip_c_AUCt_inf=zip(list_kel_total,list_of_list_c)

                  #AUCt-inf 
              list_auc_t_inf=[]     
              for i,j in list_zip_c_AUCt_inf:
                  for clast in j:
                      if clast != 0:
                         clast_true=clast
                         break
                  auc_t_inf=clast_true/i
                  list_auc_t_inf.append(auc_t_inf)

              list_auc_t_inf_and_AUC_0_T_zip=zip(list_AUC_0_T,list_auc_t_inf)

              for i,j in list_auc_t_inf_and_AUC_0_T_zip:
                  auc0_inf=i+j    
                  list_auc0_inf.append(auc0_inf)

              ####CL
              list_cl=[]

              for i in list_auc0_inf:
                  cl = float(file_name)/i * 1000
                  list_cl.append(cl)


              ####Vd
              list_Vd=[]

              list_zip_kel_cl=zip(list_kel_total,list_cl)

              for i,j in list_zip_kel_cl:
                  Vd = j/i
                  list_Vd.append(Vd)


              ###AUMC
              list_AUMCO_inf=[]

              list_AUMC0_t=[]

              list_C_last=[]
              list_T_last=[]
              for i in range(0,count_row):
                  list_columns_T=[]
                  for column in df_without_numer.columns:
                      list_columns_T.append(float(column))
                  list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

                  list_C_last.append(list_concentration[-1]) 
                  list_T_last.append(list_columns_T[-1]) 

                  list_len=len(list_concentration)

                  list_aumc_i=[]
                  for i in range(0,list_len):
                      AUMC=(list_columns_T[i] - list_columns_T[i-1]) *  ((list_concentration[i] * list_columns_T[i] + list_concentration[i-1] * list_columns_T[i-1])/2)
                      list_aumc_i.append(AUMC)

                  list_aumc_i.pop(0)

                  a=0
                  list_AUMC0_t_1=[]
                  for i in list_aumc_i:
                      a+=i
                      list_AUMC0_t_1.append(a)
                  list_AUMC0_t.append(list_AUMC0_t_1[-1])

              list_zip_for_AUMC_inf=zip(list_kel_total,list_C_last,list_T_last)

              list_AUMCt_inf=[]
              for k,c,t in list_zip_for_AUMC_inf:
                  AUMCt_inf=c*t/k+c/(k*k)
                  list_AUMCt_inf.append(AUMCt_inf)


              list_AUMC_zip=zip(list_AUMC0_t,list_AUMCt_inf)

              for i,j in list_AUMC_zip:
                  AUMCO_inf=i+j
                  list_AUMCO_inf.append(AUMCO_inf)




              ###MRT0-inf
              list_MRT0_inf=[]

              list_zip_AUMCO_inf_auc0_inf = zip(list_AUMCO_inf,list_auc0_inf)

              for i,j in list_zip_AUMCO_inf_auc0_inf:
                  MRT0_inf=i/j
                  list_MRT0_inf.append(MRT0_inf)

              ##################### –§—Ä–µ–π–º –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

              ### –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
              list_for_index=df["–ù–æ–º–µ—Ä"].tolist()

              df_PK=pd.DataFrame(list(zip(list_cmax,list_Tmax_float,list_MRT0_inf,list_half_live,list_AUC_0_T,list_auc0_inf,list_AUMCO_inf,list_–°max_division_AUC0_t,list_kel_total,list_cl,list_Vd)),columns=['Cmax','Tmax','MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-‚àû','–°max/AUC0-t','Kel','CL','Vd'],index=list_for_index) 

              ###–æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

              col_mapping_PK = df_PK.columns.tolist()

              list_gmean_PK=[]

              list_cv_PK=[] 

              for i in col_mapping_PK:

                  list_ser_PK=df_PK[i].tolist()

                  def g_mean(list_ser_PK):
                      a=np.log(list_ser_PK)
                      return np.exp(a.mean())
                  Gmean_PK=g_mean(list_ser_PK)
                  list_gmean_PK.append(Gmean_PK)

                  cv_std_PK=lambda x: np.std(x, ddof= 1 )
                  cv_mean_PK=lambda x: np.mean(x)
                  CV_std_PK=cv_std(list_ser_PK)

                  CV_mean_PK=cv_mean(list_ser_PK)

                  CV_PK=(CV_std_PK/CV_mean_PK * 100)
                  list_cv_PK.append(CV_PK)


              df_averaged_concentrations_PK=df_PK.describe()
              df_averaged_concentrations_1_PK= df_averaged_concentrations_PK.drop(['count', '25%','75%'],axis=0)
              df_averaged_concentrations_2_PK= df_averaged_concentrations_1_PK.rename(index={"50%": "median"})
              df_averaged_concentrations_2_PK.loc[len(df_averaged_concentrations_2_PK.index )] = list_gmean_PK
              df_averaged_3_PK = df_averaged_concentrations_2_PK.rename(index={5 : "Gmean"})
              df_round_without_CV_PK=df_averaged_3_PK
              df_round_without_CV_PK.loc[len(df_round_without_CV_PK.index )] = list_cv_PK
              df_averaged_3_PK = df_round_without_CV_PK.rename(index={6 : "CV, %"})


              df_concat_PK_iv= pd.concat([df_PK,df_averaged_3_PK],sort=False,axis=0)


              ###–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ñ—Ä–µ–π–º–æ–≤ –≤–∑—è—Ç–æ —Å "iv", —Ç.–∫ –ø–æ–¥—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è —Å—Ö–æ–∂–∏–º –æ–±—Ä–∞–∑–æ–º –±–µ–∑ Cmax2 –∏ –¢max2)

              series_Cmax=df_concat_PK_iv['Cmax']
              list_Cmax_str_f=["%.2f" % round(v,2) for v in series_Cmax.tolist()]
              series_Cmax=pd.Series(list_Cmax_str_f, index = df_concat_PK_iv.index.tolist(), name='Cmax ' +"("+measure_unit_lin+")")

              series_Tmax=df_concat_PK_iv['Tmax']
              list_Tmax_str_f=["%.2f" % round(v,2) for v in series_Tmax.tolist()]
              series_Tmax=pd.Series(list_Tmax_str_f, index = df_concat_PK_iv.index.tolist(), name='Tmax ' +"("+"—á"+")")

              series_MRT0_inf= df_concat_PK_iv['MRT0‚Üí‚àû']
              list_MRT0_inf_str_f=["%.3f" % round(v,3) for v in series_MRT0_inf.tolist()]
              series_MRT0_inf=pd.Series(list_MRT0_inf_str_f, index = df_concat_PK_iv.index.tolist(), name='MRT0‚Üí‚àû '+"("+"—á"+")")

              series_half_live= df_concat_PK_iv['T1/2']
              list_half_live_str_f=["%.2f" % round(v,2) for v in series_half_live.tolist()]
              series_half_live=pd.Series(list_half_live_str_f, index = df_concat_PK_iv.index.tolist(), name='T1/2 '+"("+"—á"+")")

              series_AUC0_t= df_concat_PK_iv['AUC0-t']
              list_AUC0_t_str_f=["%.2f" % round(v,2) for v in series_AUC0_t.tolist()]
              series_AUC0_t=pd.Series(list_AUC0_t_str_f, index = df_concat_PK_iv.index.tolist(), name='AUC0-t '+"("+measure_unit_lin+"√ó—á" +")")

              series_AUC0_inf= df_concat_PK_iv['AUC0‚Üí‚àû']
              list_AUC0_inf_str_f=["%.2f" % round(v,2) for v in series_AUC0_inf.tolist()]
              series_AUC0_inf=pd.Series(list_AUC0_inf_str_f, index = df_concat_PK_iv.index.tolist(), name='AUC0‚Üí‚àû '+"("+measure_unit_lin+"√ó—á" +")")

              series_AUMC0_inf= df_concat_PK_iv['AUMC0-‚àû']
              list_AUMC0_inf_str_f=["%.2f" % round(v,2) for v in series_AUMC0_inf.tolist()]
              series_AUMC0_inf=pd.Series(list_AUMC0_inf_str_f, index = df_concat_PK_iv.index.tolist(), name='AUMC0-‚àû '+"("+measure_unit_lin+"√ó—á\u00B2" +")")

              series_–°max_dev_AUC0_t= df_concat_PK_iv['–°max/AUC0-t']
              list_–°max_dev_AUC0_t_str_f=["%.4f" % round(v,4) for v in series_–°max_dev_AUC0_t.tolist()]
              series_–°max_dev_AUC0_t=pd.Series(list_–°max_dev_AUC0_t_str_f, index = df_concat_PK_iv.index.tolist(), name='–°max/AUC0-t '+"("+"—á\u207B\u00B9"+")")

              series_Kel= df_concat_PK_iv['Kel']
              list_Kel_str_f=["%.4f" % round(v,4) for v in series_Kel.tolist()]
              series_Kel=pd.Series(list_Kel_str_f, index = df_concat_PK_iv.index.tolist(), name='Kel '+"("+"—á\u207B\u00B9"+")")

              series_CL= df_concat_PK_iv['CL']
              list_CL_str_f=["%.2f" % round(v,2) for v in series_CL.tolist()]
              series_CL=pd.Series(list_CL_str_f, index = df_concat_PK_iv.index.tolist(), name='CL ' +"("+"–ª/—á"+")")

              series_Vd= df_concat_PK_iv['Vd']
              list_Vd_str_f=["%.1f" % round(v,1) for v in series_Vd.tolist()]
              series_Vd=pd.Series(list_Vd_str_f, index = df_concat_PK_iv.index.tolist(), name='Vd ' +"("+"–ª/–∫–≥"+")")

              df_total_PK_iv = pd.concat([series_Cmax, series_Tmax, series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_–°max_dev_AUC0_t,series_Kel,series_CL,series_Vd], axis= 1 ) 
              df_total_PK_iv.index.name = '–ù–æ–º–µ—Ä'

              ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

              df_total_PK_iv1=df_total_PK_iv.copy()
              df_total_PK_iv1.iloc[-6,:],df_total_PK_iv1.iloc[-2,:]=df_total_PK_iv.iloc[-2,:],df_total_PK_iv.iloc[-6,:]

              df_total_PK_iv=df_total_PK_iv1

              df_total_PK_iv1=df_total_PK_iv.copy()
              df_total_PK_iv1.iloc[-4,:],df_total_PK_iv1.iloc[-5,:]=df_total_PK_iv.iloc[-5,:],df_total_PK_iv.iloc[-4,:]

              df_total_PK_iv=df_total_PK_iv1

              df_total_PK_iv = df_total_PK_iv.rename({'Gmean': 'SD', 'std': 'Gmean','median': '–ú–∏–Ω–∏–º—É–º', 'min': '–ú–µ–¥–∏–∞–Ω–∞','max': '–ú–∞–∫—Å–∏–º—É–º','mean': 'Mean'}, axis='index') 

              

              table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name +" "+ measure_unit_lin
              list_heading_word.append(table_heading)

              list_table_word.append(df_total_PK_iv)
              #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ñ—Ä–µ–π–º–æ–≤, –¥–æ–∑ –∏ —Ç.–¥.


              list_name_doses.append(file_name)
              list_df_unrounded.append(df_concat_PK_iv)
              list_df_for_mean_unround_for_graphics.append(df_concat)

          list_list_PK_par_mean=[]
          for i in list_df_unrounded: 
              mean_—Åmax=i['Cmax'].loc['mean']
              mean_tmax=i['Tmax'].loc['mean']
              mean_mrt0inf=i['MRT0‚Üí‚àû'].loc['mean']
              mean_thalf=i['T1/2'].loc['mean']
              mean_auc0t=i['AUC0-t'].loc['mean']
              mean_auc0inf=i['AUC0‚Üí‚àû'].loc['mean']
              mean_aumc0inf=i['AUMC0-‚àû'].loc['mean']
              mean_—Åmaxdevaucot=i['–°max/AUC0-t'].loc['mean']
              mean_kel=i['Kel'].loc['mean']
              mean_cl=i['CL'].loc['mean']
              mean_vd=i['Vd'].loc['mean']
              list_list_PK_par_mean.append([mean_—Åmax,mean_tmax,mean_mrt0inf,mean_thalf,mean_auc0t,mean_auc0inf,mean_aumc0inf,mean_—Åmaxdevaucot,mean_kel,mean_cl,mean_vd])
          
          list_name_doses_with_measure_unit=[]
          for i in list_name_doses:
           j= i + " " + measure_unit_lin
           list_name_doses_with_measure_unit.append(j)

          ### –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–∑
          df_PK_doses_total = pd.DataFrame(list_list_PK_par_mean, columns =['Cmax ' +"("+measure_unit_lin+")",'Tmax ' +"("+"—á"+")",'MRT0‚Üí‚àû '+"("+"—á"+")",'T1/2 '+"("+"—á"+")",'AUC0-t '+"("+measure_unit_lin+"√ó—á" +")",'AUC0‚Üí‚àû '+"("+measure_unit_lin+"√ó—á" +")",'AUMC0-‚àû '+"("+measure_unit_lin+"√ó—á\u00B2" +")",'–°max/AUC0-t '+"("+"—á\u207B\u00B9"+")",'Kel '+"("+"—á\u207B\u00B9"+")",'CL ' +"("+"–ª/—á"+")",'Vd ' +"("+"–ª/–∫–≥"+")"],index=list_name_doses_with_measure_unit)
          df_PK_doses_total_transpose=df_PK_doses_total.transpose()

          #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ df_PK_doses_total_transpose

          df_doses_trans_trans=df_PK_doses_total_transpose.transpose()

          series_Cmax=df_doses_trans_trans['Cmax ' +"("+measure_unit_lin+")"].tolist() 
          series_Cmax=pd.Series(["%.2f" % round(v,2) for v in series_Cmax])

          series_Tmax=df_doses_trans_trans['Tmax ' +"("+"—á"+")"].tolist()       
          series_Tmax=pd.Series(["%.2f" % round(v,2) for v in series_Tmax]) 

          series_MRT0_inf= df_doses_trans_trans['MRT0‚Üí‚àû '+"("+"—á"+")"].tolist()   
          series_MRT0_inf=pd.Series(["%.3f" % round(v,3) for v in series_MRT0_inf])

          series_half_live= df_doses_trans_trans['T1/2 '+"("+"—á"+")"].tolist()   
          series_half_live=pd.Series(["%.2f" % round(v,2) for v in series_half_live]) 

          series_AUC0_t= df_doses_trans_trans['AUC0-t '+"("+measure_unit_lin+"√ó—á" +")"].tolist()   
          series_AUC0_t=pd.Series(["%.2f" % round(v,2) for v in series_AUC0_t])

          series_AUC0_inf= df_doses_trans_trans['AUC0‚Üí‚àû '+"("+measure_unit_lin+"√ó—á" +")"].tolist()  
          series_AUC0_inf=pd.Series(["%.2f" % round(v,2) for v in series_AUC0_inf]) 

          series_AUMC0_inf= df_doses_trans_trans['AUMC0-‚àû '+"("+measure_unit_lin+"√ó—á\u00B2" +")"].tolist()   
          series_AUMC0_inf=pd.Series(["%.2f" % round(v,2) for v in series_AUMC0_inf])

          series_–°max_dev_AUC0_t= df_doses_trans_trans['–°max/AUC0-t '+"("+"—á\u207B\u00B9"+")"].tolist()  
          series_–°max_dev_AUC0_t=pd.Series(["%.4f" % round(v,4) for v in series_–°max_dev_AUC0_t]) 

          series_Kel= df_doses_trans_trans['Kel '+"("+"—á\u207B\u00B9"+")"].tolist()   
          series_Kel=pd.Series(["%.4f" % round(v,4) for v in series_Kel])

          series_CL= df_doses_trans_trans['CL ' +"("+"–ª/—á"+")"].tolist()  
          series_CL=pd.Series(["%.2f" % round(v,2) for v in series_CL]) 

          series_Vd= df_doses_trans_trans['Vd ' +"("+"–ª/–∫–≥"+")"].tolist()   
          series_Vd=pd.Series(["%.1f" % round(v,1) for v in series_Vd])

          df_total_total_doses = pd.concat([series_Cmax, series_Tmax, series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_–°max_dev_AUC0_t,series_Kel,series_CL,series_Vd], axis= 1)

          df_total_total_doses.index=df_PK_doses_total_transpose.columns.tolist()
          df_total_total_doses.columns=df_PK_doses_total_transpose.index.tolist() 

          df_total_total_doses_total= df_total_total_doses.transpose()
          df_total_total_doses_total.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å'
           

          table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö'
          list_heading_word.append(table_heading)

          list_table_word.append(df_total_total_doses_total)
          ###–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ "–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö"

          ### –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
          list_list_mean_conc=[]
          list_list_std_conc=[]
          for i in list_df_for_mean_unround_for_graphics: 
              mean_conc_list=i.loc['mean'].tolist()
              std_conc_list=i.loc['std'].tolist()
              list_list_mean_conc.append(mean_conc_list)
              list_list_std_conc.append(std_conc_list)

          list_name_doses_with_measure_unit_std=[]
          for i in list_name_doses_with_measure_unit:
           j= i + " std"
           list_name_doses_with_measure_unit_std.append(j)

          df_mean_conc_graph = pd.DataFrame(list_list_mean_conc, columns =list_t_graph[0],index=list_name_doses_with_measure_unit)
          df_mean_conc_graph_1=df_mean_conc_graph.transpose()
          df_std_conc_graph = pd.DataFrame(list_list_std_conc, columns =list_t_graph[0],index=list_name_doses_with_measure_unit_std)
          df_std_conc_graph_1=df_std_conc_graph.transpose()
          df_concat_mean_std= pd.concat([df_mean_conc_graph_1,df_std_conc_graph_1],sort=False,axis=1)

          list_colors=["black","red","blue","green","yellow","orange","purple","brown","coral","plum","tan","pink","grey"]
          list_zip_mean_std_colors=zip(list_name_doses_with_measure_unit,list_name_doses_with_measure_unit_std,list_colors)

          fig, ax = plt.subplots()
          for i,j,c in list_zip_mean_std_colors:
               plt.errorbar(list(df_concat_mean_std.index),df_concat_mean_std[i],yerr=df_concat_mean_std[j],color= c, marker='o',markersize=4.0,markeredgecolor=c,markerfacecolor=c,ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0,label=i)
               plt.xlabel("–í—Ä–µ–º—è, —á")
               plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+ measure_unit_lin)
               ax.legend(fontsize = 8)
         
          list_graphics_word.append(fig)

          graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö'
          list_heading_graphics_word.append(graphic) 

          ### –≤ –ø–æ–ª—É–ª–æ–≥. –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
          
          list_t_doses=list(df_concat_mean_std.index)
          list_t_doses.remove(0)
          df_concat_mean_std_without_0=df_concat_mean_std.drop([0])
          list_zip_mean_std_colors=zip(list_name_doses_with_measure_unit,list_name_doses_with_measure_unit_std,list_colors)

          fig, ax = plt.subplots()
          for i,j,c in list_zip_mean_std_colors:
               plt.errorbar(list_t_doses,df_concat_mean_std_without_0[i],yerr=df_concat_mean_std_without_0[j],color= c, marker='o',markersize=4.0,markeredgecolor=c,markerfacecolor=c,ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0,label=i)
               ax.set_yscale("log")
               plt.xlabel("–í—Ä–µ–º—è, —á")
               plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+ measure_unit_lin)
               ax.legend(fontsize = 8)
          
          list_graphics_word.append(fig)

          graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö'
          list_heading_graphics_word.append(graphic)
          #–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å

          list_AUC0_inf_lin_mean=[]
          for i in list_df_unrounded: 
              mean_auc0inf=i['AUC0‚Üí‚àû'].loc['mean']
              list_AUC0_inf_lin_mean.append(mean_auc0inf)

          list_name_doses_lin_float=[]
          for i in list_name_doses:
           j= float(i)
           list_name_doses_lin_float.append(j)
          
          df_for_lin = pd.DataFrame(list(zip(list_AUC0_inf_lin_mean,list_name_doses_lin_float)), columns =['AUC0‚Üí‚àû_mean', 'doses'])

          doses = df_for_lin['doses']
          AUC0_inf_mean = df_for_lin['AUC0‚Üí‚àû_mean']

          doses = sm.add_constant(doses)
          model = sm.OLS(AUC0_inf_mean, doses).fit()
          predictions = model.predict(doses) 
          print_model = model.summary()
          
          graphic='–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π AUC0‚Üí‚àû –æ—Ç –≤–µ–ª–∏—á–∏–Ω –≤–≤–æ–¥–∏–º—ã—Ö –¥–æ–∑'
          list_heading_graphics_word.append(graphic) 
          ###–≥—Ä–∞—Ñ–∏–∫
          fig, ax = plt.subplots()
          sns.regplot(x='doses',y='AUC0‚Üí‚àû_mean',data=df_for_lin, color="black",ci=None,scatter_kws = {'s': 30}, line_kws = {'linewidth': 1})
          plt.xlabel("–î–æ–∑–∏—Ä–æ–≤–∫–∞, " +measure_unit_dose_lin)
          plt.ylabel("AUC0‚Üí‚àû, "+ measure_unit_lin + "*—á")
          plt.annotate('y = ' + "%.4f" % round(model.params[1],4) +'x ' + "%.4f" % round(model.params[0],4), xy =(110, 530),xytext =(110, 530),fontsize=10)
          
          list_graphics_word.append(fig)

          graphic='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AUC0‚Üí‚àû'
          list_heading_graphics_word.append(graphic) 
          # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
          fig, ax = plt.subplots()
          table_data_first=[
           ["R¬≤","F","Df Residuals","Df Model","p"],
           ["%.3f" % round(model.rsquared,3), int(round(model.fvalue,0)),int(round(model.df_resid,0)),int(round(model.df_model,0)),"%.3f" % round(model.pvalues[1],3)]
           ]
          table = ax.table(cellText=table_data_first,cellLoc='left',bbox = [0, 0.7, 0.7, 0.1])
          plt.annotate('Model Fit Measures', xy =(0, 0.9),xytext =(0, 0.9),fontsize=10)
          plt.annotate('Overall Model Test', xy =(0, 0.85),xytext =(0, 0.85),fontsize=10)
          table_data_second=[
           ['Predictor','Estimate','SE','t','p'],
           ["Intercept","%.2f" % round(model.params[0],2),"%.3f" % round(model.HC2_se[0],3),"%.3f" % round(model.tvalues[0],3),"%.3f" % round(model.pvalues[0],3)],
           ["B","%.2f" % round(model.params[1],2),"%.3f" % round(model.HC2_se[1],3),"%.3f" % round(model.tvalues[1],3),"%.3f" % round(model.pvalues[1],3)]
           ]
          table = ax.table(cellText=table_data_second,cellLoc='left',bbox = [0, 0.35, 0.7, 0.2])
          plt.annotate('Model Coefficients', xy =(0, 0.6),xytext =(0, 0.6),fontsize=10)
          plt.axis('off')
          
          list_graphics_word.append(fig)

      else:
         st.info('‚ùï‚ùóÔ∏è‚ùï –ó–∞–≥—Ä—É–∑–∏—Ç—å XLSX —Ñ–∞–π–ª')

      ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
      st.session_state["list_heading_word"] = list_heading_word
      st.session_state["list_table_word"] = list_table_word
      st.session_state["list_graphics_word"] = list_graphics_word
      st.session_state["list_heading_graphics_word"] = list_heading_graphics_word
      
   
#####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
   if panel == "–¢–∞–±–ª–∏—Ü—ã": 
   
      list_heading_word = st.session_state["list_heading_word"]
      list_table_word = st.session_state["list_table_word"]

      ### —Ç–∞–±–ª–∏—Ü—ã
      zip_heading_table = zip(list_heading_word,list_table_word)

      doc = Document()

      # Settings
      style = doc.styles['Normal']
      font = style.font
      font.name = 'Times New Roman'
      font.size = Pt(8)
      
      for heading, df in zip_heading_table:
          doc.add_paragraph(heading)

          name_columns = pd.DataFrame(df.columns.tolist()).T
          # add columns
          name_columns.columns = df.columns.tolist()
          df_columns = pd.concat([name_columns, df]).reset_index(drop = True)
          # add indexes
          total_name_index = df.index.name
          list_index_names = df.index.tolist()
          list_index_names.insert(0,total_name_index)
          series_index_names=pd.Series(list_index_names, name=total_name_index)
          df_series_index_names = series_index_names.to_frame()
          
          df_columns_indexes=pd.concat([df_series_index_names, df_columns], axis=1)
          
          t = doc.add_table(rows=1, cols=df_columns_indexes.shape[1])
          t.style = 'TableGrid'
          # Add the body of the data frame
          for i in range(df_columns_indexes.shape[0]):
              row = t.add_row()
              for j in range(df_columns_indexes.shape[1]):
                  cell = df_columns_indexes.iat[i, j]
                  row.cells[j].text = str(cell)

      bio = BytesIO()
      doc.save(bio)
      if doc:
          st.download_button(
              label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã üìÉ",
              data=bio.getvalue(),
              file_name="–¢–∞–±–ª–∏—Ü—ã.docx",
              mime="docx"
          )

      zip_heading_table = zip(list_heading_word,list_table_word) ###–µ—â–µ —Ä–∞–∑ –æ–±—ä—è–≤–ª—è–µ–º, –∏–Ω–∞—á–µ –Ω–µ –≤–∏–¥–∏—Ç zip-–æ–±—ä–µ–∫—Ç
      #####–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
      for heading, df in zip_heading_table:
          st.subheader(heading)
          st.write(df)

   if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
   
      list_graphics_word = st.session_state["list_graphics_word"]
      list_heading_graphics_word = st.session_state["list_heading_graphics_word"]

      ### –≥—Ä–∞—Ñ–∏–∫–∏
      zip_graphics_heading = zip(list_graphics_word,list_heading_graphics_word)
      doc = Document()

      # Settings
      style = doc.styles['Normal']
      font = style.font
      font.name = 'Times New Roman'
      font.size = Pt(12)

      buf = BytesIO() #–∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–∞–∑–∏–ª–∞ –æ—à–∏–±–∫–∞
      for fig, heading in zip_graphics_heading:
          buf = BytesIO()
          fig.savefig(buf, format="jpg", dpi=300, bbox_inches='tight')
          fp = tempfile.NamedTemporaryFile() 
          with open(f"{fp.name}.jpg",'wb') as ff:
               ff.write(buf.getvalue()) 
          doc.add_picture(buf)
          doc.add_paragraph(heading)
      
      doc.save(buf)
      if doc:
          st.download_button(
              label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ üìà",
              data=buf.getvalue(),
              file_name="–ì—Ä–∞—Ñ–∏–∫–∏.docx",
              mime="docx",
              key = "graphics"
          )
          
      #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

      #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
      type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π AUC0‚Üí‚àû –æ—Ç –≤–µ–ª–∏—á–∏–Ω –≤–≤–æ–¥–∏–º—ã—Ö –¥–æ–∑", "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AUC0‚Üí‚àû"),disabled = False, key = "–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - –ò–û" )

      count_graphics_for_visual = len(list_heading_graphics_word)
      list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)
      
      for i in list_range_count_graphics_for_visual:
          if list_heading_graphics_word[i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
             if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])
          if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
             if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])
          if list_heading_graphics_word[i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
             if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])
          if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö"):
             if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])
          if list_heading_graphics_word[i].__contains__("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"):
             if type_graphics == '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π AUC0‚Üí‚àû –æ—Ç –≤–µ–ª–∏—á–∏–Ω –≤–≤–æ–¥–∏–º—ã—Ö –¥–æ–∑':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])
          if list_heading_graphics_word[i].__contains__("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"):
             if type_graphics == '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AUC0‚Üí‚àû':
                st.pyplot(list_graphics_word[i])
                st.subheader(list_heading_graphics_word[i])