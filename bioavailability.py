###### –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
import streamlit as st

#–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
st.set_page_config(page_title="–î–æ–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", page_icon="favicon.png", layout="centered", initial_sidebar_state="auto", menu_items=None)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import math
import statistics  
import seaborn as sns
import statsmodels.api as sm
import streamlit.components as stc
from pyxlsb import open_workbook as open_xlsb
import os
from cycler import cycler
from streamlit_option_menu import option_menu
import streamlit.components.v1 as components 
import codecs
from utils.functions import *
from utils.radio_unit import *
from style_python.style import *


with open('style.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

#–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π python
style_python()

####### –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

st.sidebar.image("logo-new.png", width=110)

####### –õ–µ–≤–æ–µ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é

st.sidebar.markdown('<h3 style="color:white; padding-bottom: 0; padding-left: 5px;">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</h3>', unsafe_allow_html=True)

option = st.sidebar.selectbox('',
    ('–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∞','–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ä–≥–∞–Ω–∞–º', '–õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è','–≠–∫—Å–∫—Ä–µ—Ü–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞'),disabled = False, key = "–í–∏–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

############### —Ñ–∞–π–ª –ø—Ä–∏–º–µ—Ä

df_example_file = pd.read_excel("server_example_file.xlsx")
df_example_file_xlsx = to_excel(df_example_file)
st.sidebar.download_button(label='–ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ üóÇÔ∏è', data=df_example_file_xlsx , file_name= 'example_file.xlsx')

############ –ø–∞–º—è—Ç–∫–∞

text_contents = '''1)–û–≥–ª–∞–≤–ª—è—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ —Å–ª–æ–≤–æ ¬´–ù–æ–º–µ—Ä¬ª (–≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ).
2)–ó–Ω–∞–∫ ¬´‚Ññ¬ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. 
3) –ù–µ —Å—Ç–∞–≤–∏—Ç—å –≤ —è—á–µ–π–∫–∏ –∑–Ω–∞–∫ ¬´-¬ª –≤ —Å–ª—É—á–∞–µ –Ω—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –°—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ ¬´0¬ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
4)–ù–∏ –≤ –∫–∞–∫–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ.
'''
st.sidebar.download_button('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é üìù', text_contents)

#–ò–Ω–∏–∑–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—Ä–µ–π–º–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
if "df_total_PK_pk" not in st.session_state:
    st.session_state["df_total_PK_pk"] = None

if 'df_total_PK_org' not in st.session_state:
    st.session_state['df_total_PK_org'] = None

if 'df_total_PK_lin' not in st.session_state:
    st.session_state['df_total_PK_lin'] = None

if 'df_total_PK_iv' not in st.session_state:
    st.session_state["df_total_PK_iv"] = None

if 'df_total_PK_po_sub' not in st.session_state:
    st.session_state['df_total_PK_po_sub'] = None

if 'df_total_PK_po_rdf' not in st.session_state:
    st.session_state['df_total_PK_po_rdf'] = None

if 'df1_model_lin' not in st.session_state:
    st.session_state['df1_model_lin'] = 1

if 'df2_model_lin' not in st.session_state:
    st.session_state['df2_model_lin'] = 1

################################
if option == '–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∞':

    st.header('–†–∞—Å—á–µ—Ç —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')

    col1, col2 = st.columns([0.66, 0.34])
   
    ####### –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
    with col1:
        
        panel = st.radio(
            "‚öôÔ∏è–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "–¢–∞–±–ª–∏—Ü—ã","–ì—Ä–∞—Ñ–∏–∫–∏"),
            horizontal=True, key= "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ - –†–∞—Å—á–µ—Ç —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
        )
      
        if "dose_pk" not in st.session_state:
           st.session_state["dose_pk"] = ""
        
        #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
        list_heading_word=[]
        list_table_word=[]
        list_graphics_word=[]
        list_heading_graphics_word=[]

        if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
           
           ######### –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞
           with col2:
                
                selected = option_menu(None, ["–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"], 
                   icons=['menu-button'], 
                   menu_icon="cast", default_index=0, orientation="vertical",
                   styles={
                     "container": {"padding": "0!important", "background-color": "#1f3b57"},
                     "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                     "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                     "nav-link-selected": {"background-color": "#73b5f2"},
                   })

                if selected == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤":
                   type_parameter = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä',
                   ("–í–∏–¥ –≤–≤–µ–¥–µ–Ω–∏—è",'–î–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏'),disabled = False, key = "–í–∏–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - —Ñ–∫")
                   
                if "agree_cmax2 - —Ñ–∫" not in st.session_state:
                      st.session_state["agree_cmax2 - —Ñ–∫"] = False

                if type_parameter == '–î–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏':

                   st.session_state["agree_cmax2 - —Ñ–∫"] = st.checkbox('–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è-–í—Ä–µ–º—è" –æ—Ç—á–µ—Ç–ª–∏–≤–æ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –¥–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏', key = "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Cmax2 - —Ñ–∫", value = st.session_state["agree_cmax2 - —Ñ–∫"])
                   
                   if st.session_state["agree_cmax2 - —Ñ–∫"] == True:
                      custom_success('–ü–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω!')

                if "agree_injection - —Ñ–∫" not in st.session_state:
                      st.session_state["agree_injection - —Ñ–∫"] = False

                if type_parameter == "–í–∏–¥ –≤–≤–µ–¥–µ–Ω–∏—è":

                   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                   if "injection_choice - —Ñ–∫" not in st.session_state:
                       st.session_state["injection_choice - —Ñ–∫"] = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                   # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–≤–µ–¥–µ–Ω–∏—è
                   injection_type = st.radio(
                       "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–≤–µ–¥–µ–Ω–∏—è:",
                       options=["–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ", "–í–Ω–µ—Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ"],
                       index=st.session_state["injection_choice - —Ñ–∫"],
                       key="injection_choice_—Ñ–∫",  # –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
                   )

                   # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
                   if injection_type == "–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ":
                       st.session_state["agree_injection - —Ñ–∫"] = True
                       st.session_state["injection_choice - —Ñ–∫"] = 0
                   else:
                       st.session_state["agree_injection - —Ñ–∫"] = False
                       st.session_state["injection_choice - —Ñ–∫"] = 1

                   # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
                   if st.session_state["agree_injection - —Ñ–∫"]:
                       custom_success("–í—ã–±—Ä–∞–Ω–æ: –í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ!")
                   else:
                       custom_success("–í—ã–±—Ä–∞–Ω–æ: –í–Ω–µ—Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ!")

           measure_unit_pk_time  = select_time_unit("—Ñ–∫")
           measure_unit_pk_concentration  = select_concentration_unit("—Ñ–∫")
           measure_unit_pk_dose  = select_dose_unit("—Ñ–∫")


           #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
           if "index_method_auc - —Ñ–∫" not in st.session_state:
               st.session_state["index_method_auc - —Ñ–∫"] = 0

           method_auc = st.radio("üìà –ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC",('linear',"linear-up/log-down"),key = "–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - —Ñ–∫", index = st.session_state["index_method_auc - —Ñ–∫"])
           
           if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - —Ñ–∫"] == 'linear':
              st.session_state["index_method_auc - —Ñ–∫"] = 0
           if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - —Ñ–∫"] == "linear-up/log-down":
              st.session_state["index_method_auc - —Ñ–∫"] = 1
                        
           uploaded_file_pk = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –õ–° (—Ñ–æ—Ä–º–∞—Ç XLSX)", key='–§–∞–π–ª –≤–≤–µ–¥–µ–Ω–∏—è –õ–° –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ñ–∫')
           
           #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
           if uploaded_file_pk is not None:
              save_uploadedfile(uploaded_file_pk)
              st.session_state["uploaded_file_pk"] = uploaded_file_pk.name

           if 'uploaded_file_pk' in st.session_state:
              custom_success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {st.session_state['uploaded_file_pk']}")
              

           dose_pk = st.text_input("–î–æ–∑–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –õ–°", key='–î–æ–∑–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –õ–° –ø—Ä–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ñ–∫', value = st.session_state["dose_pk"])
           
           st.session_state["dose_pk"] = dose_pk
           
           if "uploaded_file_pk" in st.session_state and dose_pk and measure_unit_pk_concentration:

              df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_pk"]))
              st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°')
              
              ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
              df = edit_frame(df,st.session_state["uploaded_file_pk"])

              ###–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö 
              count_rows_number_pk= len(df.axes[0])
        
              table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°'
              list_heading_word.append(table_heading)

              ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
              df_concat_round_str_transpose = create_table_descriptive_statistics(df)['df_concat_round_str_transpose']
              
              list_table_word.append(df_concat_round_str_transpose)
              
           ########### –≥—Ä–∞—Ñ–∏–∫–∏    

           ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

              # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              col_mapping = df.columns.tolist()
              col_mapping.remove('–ù–æ–º–µ—Ä')

              count_row_df = len(df.axes[0])

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)
              
              #if st.session_state["agree_injection - —Ñ–∫"] == True: 
                 #list_time.remove(0)

              for r in range(0,count_row_df):

                  list_concentration=df.iloc[r].tolist()

                  numer_animal=list_concentration[0]

                  list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                  list_concentration = [float(v) for v in list_concentration]

                  #if st.session_state["agree_injection - —Ñ–∫"] == True:
                     #list_concentration.remove(0)


                  fig, ax = plt.subplots()
                  plt.plot(list_time,list_concentration,marker='o',markersize=4.0, color = "black", markeredgecolor="black",markerfacecolor="black")
                  plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_pk_time}")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_pk_concentration)
                 
                  list_graphics_word.append(fig)  

                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°,  '+numer_animal
                  list_heading_graphics_word.append(graphic)

               #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
                  count_for_0_1=len(list_concentration)
                  list_range_for_0_1=range(0,count_for_0_1)

                  list_time_0=[]
                  list_for_log_1=[]
                  for i in list_range_for_0_1:
                      if list_concentration[i] !=0:
                         list_for_log_1.append(list_concentration[i])
                         list_time_0.append(list_time[i]) 

                  fig, ax = plt.subplots()
                  plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                  ax.set_yscale("log")
                  plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_pk_time}")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_pk_concentration)

                  list_graphics_word.append(fig) 

                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°,  '+numer_animal
                  list_heading_graphics_word.append(graphic)

           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

              df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
              df_for_plot_conc_1 = df_for_plot_conc.transpose()

              if st.session_state["agree_injection - —Ñ–∫"] == True:
                 df_for_plot_conc_1=df_for_plot_conc_1.replace(0, None) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ

              list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()
              count_numer_animal = len(list_numer_animal_for_plot) ### –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥—ã

              list_color = ["blue","green","red","#D6870C","violet","gold","indigo","magenta","lime","tan","teal","coral","pink","#510099","lightblue","yellowgreen","cyan","salmon","brown","black"]

              fig, ax = plt.subplots()
              
              ax.set_prop_cycle(cycler(color=list_color))

              plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_pk_time}")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_pk_concentration)
              if count_numer_animal > 20:
                 ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
              else:
                 ax.legend(bbox_to_anchor=(1, 1))

              list_graphics_word.append(fig) 

              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°"
              list_heading_graphics_word.append(graphic)    
           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
              df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)

              fig, ax = plt.subplots()
              
              ax.set_prop_cycle(cycler(color=list_color))

              plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_pk_time}")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_pk_concentration)
              ax.set_yscale("log")
              if count_numer_animal > 20:
                 ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
              else:
                 ax.legend(bbox_to_anchor=(1, 1))

              list_graphics_word.append(fig) 
       
              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°"
              list_heading_graphics_word.append(graphic) 

           ### —É—Å—Ä–µ–¥–µ–Ω–Ω—ã–µ    
           #–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö    

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)

              df_averaged_concentrations=df.describe()
              list_concentration=df_averaged_concentrations.loc['mean'].tolist()
              err_y_pk=df_averaged_concentrations.loc['std'].tolist()
              
              #if st.session_state["agree_injection - —Ñ–∫"] == True:
                 #list_time.remove(0) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ
                 #list_concentration.remove(0)
                 #err_y_pk.remove(0)

              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_pk, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_pk_time}")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_pk_concentration)

              list_graphics_word.append(fig) 

              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°'
              list_heading_graphics_word.append(graphic)  

           #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              #if st.session_state["agree_injection - —Ñ–∫"] == False:
                 #list_time.remove(0) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ
                 #list_concentration.remove(0)
                 #err_y_pk.remove(0) 


              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_pk, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              ax.set_yscale("log")
              plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_pk_time}")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_pk_concentration)

              list_graphics_word.append(fig) 

              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°'
              list_heading_graphics_word.append(graphic)

              ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö
              if st.session_state["agree_injection - —Ñ–∫"] == False:
                  result_PK = pk_parametrs_total_extravascular(df,"—Ñ–∫",method_auc,dose_pk,measure_unit_pk_concentration,measure_unit_pk_time,measure_unit_pk_dose)
              else:
                  result_PK = pk_parametrs_total_intravenously(df,"—Ñ–∫",method_auc,dose_pk,measure_unit_pk_concentration,measure_unit_pk_time,measure_unit_pk_dose)
              
              
              if result_PK is not None:
                  if st.session_state["agree_cmax2 - —Ñ–∫"] == False:
                     df_total_PK_pk = result_PK["df_total_PK"]
                  if st.session_state["agree_cmax2 - —Ñ–∫"] == True:
                     df_total_PK_pk = result_PK["df_total_PK"]
                     df_total_PK_additional_double_peaks_pk = result_PK["df_total_PK_additional_double_peaks"]
                  
                  st.session_state["df_total_PK_pk"] = df_total_PK_pk

                  table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°'
                  list_heading_word.append(table_heading)
                  
                  list_table_word.append(df_total_PK_pk)

                  if st.session_state["agree_cmax2 - —Ñ–∫"] == True:
                     table_heading='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–≤—É—Ö –ø–∏–∫–æ–≤ –≤ –§–ö –ø—Ä–æ—Ñ–∏–ª–µ'
                     list_heading_word.append(table_heading)
                     
                     list_table_word.append(df_total_PK_additional_double_peaks_pk)
              else:
                  st.session_state["df_total_PK_pk"] = None #–¥–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ cmax2, –∞ –ø–æ—Ç–æ–º —Ä–µ—à–∏–ª –≤—Å–µ —Ç–∞–∫–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                  st.error("–í—ã–±–µ—Ä–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π Cmax –∏ Cmax(2)")

           else:
               st.write("")
           ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
           st.session_state["list_heading_word"] = list_heading_word
           st.session_state["list_table_word"] = list_table_word
           st.session_state["list_graphics_word"] = list_graphics_word
           st.session_state["list_heading_graphics_word"] = list_heading_graphics_word
          
    #–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    col1, col2 = st.columns([0.66,0.34])
    
    with col1:
     
       #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
       if panel == "–¢–∞–±–ª–∏—Ü—ã":
          if st.session_state["df_total_PK_pk"] is not None:
             
             list_heading_word = st.session_state["list_heading_word"]
             list_table_word = st.session_state["list_table_word"]

             ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
             visualize_table(list_heading_word,list_table_word)


             with col2:
                  
                  selected = option_menu(None, ["C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç"], 
                  icons=['file-earmark-arrow-down-fill'], 
                  menu_icon="cast", default_index=0, orientation="vertical",
                  styles={
                     "container": {"padding": "0!important", "background-color": "#1f3b57"},
                     "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                     "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                     "nav-link-selected": {"background-color": "#73b5f2"},
                  })

                  if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":

                     ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü
                         create_table(list_heading_word,list_table_word)
          else:
             st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

       if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
          if st.session_state["df_total_PK_pk"] is not None:
             list_graphics_word = st.session_state["list_graphics_word"]
             list_heading_graphics_word = st.session_state["list_heading_graphics_word"]
             
             #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

             #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
             type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
       ('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è'),disabled = False, key = "–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - —Ñ–∫" )

             count_graphics_for_visual = len(list_heading_graphics_word)
             list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)
             
             for i in list_range_count_graphics_for_visual:
                 if list_heading_graphics_word[i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
                    if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                       st.pyplot(list_graphics_word[i])
                       st.subheader(list_heading_graphics_word[i])
                 if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
                    if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                       st.pyplot(list_graphics_word[i])
                       st.subheader(list_heading_graphics_word[i])
                 if list_heading_graphics_word[i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
                    if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                       st.pyplot(list_graphics_word[i])
                       st.subheader(list_heading_graphics_word[i])

             with col2:
                  
                  selected = option_menu(None, ["C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç"], 
                  icons=['file-earmark-arrow-down-fill'], 
                  menu_icon="cast", default_index=0, orientation="vertical",
                  styles={
                     "container": {"padding": "0!important", "background-color": "#1f3b57"},
                     "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                     "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                     "nav-link-selected": {"background-color": "#73b5f2"},
                  })
                   
                  if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":
                     ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                     create_graphic(list_graphics_word,list_heading_graphics_word) 
          else:
              st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")
######################################################################################################################################

if option == '–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å':
    
    st.header('–ò–∑—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')

    col1, col2 = st.columns([0.66, 0.34])
    
    ####### –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
    with col1:
        
        panel = st.radio(
            "‚öôÔ∏è–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "–¢–∞–±–ª–∏—Ü—ã","–ì—Ä–∞—Ñ–∏–∫–∏"),
            horizontal=True, key= "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ - –ò–∑—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"
        )

        ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if "dose_iv" not in st.session_state:
           st.session_state["dose_iv"] = ""
        if "dose_po_sub" not in st.session_state:   
           st.session_state["dose_po_sub"] = ""
        if "dose_po_rdf" not in st.session_state:   
           st.session_state["dose_po_rdf"] = ""
           
        #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
        list_heading_word=[]
        list_table_word=[]
        list_graphics_word=[]
        list_heading_graphics_word=[]

        if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
           
           ######### –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞
           with col2:
                 
                 selected = option_menu(None, ["–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"], 
                    icons=['menu-button'], 
                    menu_icon="cast", default_index=0, orientation="vertical",
                    styles={
                      "container": {"padding": "0!important", "background-color": "#1f3b57"},
                      "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                      "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                      "nav-link-selected": {"background-color": "#73b5f2"},
                    })

                 if selected == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤":
                    type_parameter = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä',
                    (['–î–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏']),disabled = False, key = "–í–∏–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –ò–ë")
                    
                 
                 if "agree_cmax2 - –ò–ë" not in st.session_state:
                       st.session_state["agree_cmax2 - –ò–ë"] = False
                 
                 if "agree_cmax2 - –ò–ë_iv" not in st.session_state:
                       st.session_state["agree_cmax2 - –ò–ë_iv"] = False

                 if "agree_cmax2 - –ò–ë_po_sub" not in st.session_state:
                       st.session_state["agree_cmax2 - –ò–ë_po_sub"] = False

                 if "agree_cmax2 - –ò–ë_po_rdf" not in st.session_state:
                       st.session_state["agree_cmax2 - –ò–ë_po_rdf"] = False

                 if type_parameter == '–î–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏':
                    
                    st.session_state["agree_cmax2 - –ò–ë"] = st.checkbox('–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è-–í—Ä–µ–º—è" –æ—Ç—á–µ—Ç–ª–∏–≤–æ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –¥–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏', key = "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Cmax2 - –ò–ë", value = st.session_state["agree_cmax2 - –ò–ë"])
                    
                    if st.session_state["agree_cmax2 - –ò–ë"] == True:
                       st.session_state["agree_cmax2 - –ò–ë_iv"] = True
                       st.session_state["agree_cmax2 - –ò–ë_po_sub"] = True
                       st.session_state["agree_cmax2 - –ò–ë_po_rdf"] = True
                       custom_success('–ü–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω!')

           measure_unit_rb_time  = select_time_unit("–ò–ë")
           measure_unit_rb_concentration = select_concentration_unit("–ò–ë")
           measure_unit_rb_dose  = select_dose_unit("–ò–ë")
           
           #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
           if "index_method_auc - –ò–ë" not in st.session_state:
               st.session_state["index_method_auc - –ò–ë"] = 0

           method_auc = st.radio("üìà –ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC",('linear',"linear-up/log-down"),key = "–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - –ò–ë", index = st.session_state["index_method_auc - –ò–ë"])
           
           if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - –ò–ë"] == 'linear':
              st.session_state["index_method_auc - –ò–ë"] = 0
           if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - –ò–ë"] == "linear-up/log-down":
              st.session_state["index_method_auc - –ò–ë"] = 1

           st.subheader('–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
           
           uploaded_file_1 = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç XLSX)", key='–§–∞–π–ª –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')
           
           #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
           if uploaded_file_1 is not None:
              save_uploadedfile(uploaded_file_1)
              st.session_state["uploaded_file_1"] = uploaded_file_1.name
           
           if 'uploaded_file_1' in st.session_state: 
              custom_success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {st.session_state['uploaded_file_1']}")
              
           dose_iv = st.text_input("–î–æ–∑–∞ –ø—Ä–∏ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏", key='–î–æ–∑–∞ –ø—Ä–∏ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞', value = st.session_state["dose_iv"])
           
           st.session_state["dose_iv"] = dose_iv

           if "uploaded_file_1" in st.session_state and dose_iv and measure_unit_rb_concentration:
              df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_1"]))
              st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
              
              ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
              df = edit_frame(df,st.session_state["uploaded_file_1"])

              ###–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö 
              count_rows_number_iv= len(df.axes[0])
             
              ################

              table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
              list_heading_word.append(table_heading)

              ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
              df_concat_round_str_transpose = create_table_descriptive_statistics(df)['df_concat_round_str_transpose']

              list_table_word.append(df_concat_round_str_transpose)
           ########### –≥—Ä–∞—Ñ–∏–∫–∏    

           ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

              # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              col_mapping = df.columns.tolist()
              col_mapping.remove('–ù–æ–º–µ—Ä')

              count_row_df = len(df.axes[0])

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)

              #list_time.remove(0) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ

              for r in range(0,count_row_df):

                  list_concentration=df.iloc[r].tolist()

                  numer_animal=list_concentration[0]

                  list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                  list_concentration = [float(v) for v in list_concentration]

                  #list_concentration.remove(0) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ

                  fig, ax = plt.subplots()
                  plt.plot(list_time,list_concentration,marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                  plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+ measure_unit_rb_concentration)
                  
                  list_graphics_word.append(fig) 
                  
                  #–ø–µ—Ä–µ–æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏,  '+numer_animal
                  list_heading_graphics_word.append(graphic)

               #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
                  count_for_0_1=len(list_concentration)
                  list_range_for_0_1=range(0,count_for_0_1)

                  list_time_0=[]
                  list_for_log_1=[]
                  for i in list_range_for_0_1:
                      if list_concentration[i] !=0:
                         list_for_log_1.append(list_concentration[i])
                         list_time_0.append(list_time[i]) 

                  fig, ax = plt.subplots()
                  plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                  ax.set_yscale("log")
                  plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
                  
                  
                  list_graphics_word.append(fig)
                  
                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏,  '+numer_animal
                  list_heading_graphics_word.append(graphic)

           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

              df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
              df_for_plot_conc_1 = df_for_plot_conc.transpose()

              df_for_plot_conc_1=df_for_plot_conc_1.replace(0, None) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ

              list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()
              count_numer_animal = len(list_numer_animal_for_plot) ### –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥—ã

              list_color = ["blue","green","red","#D6870C","violet","gold","indigo","magenta","lime","tan","teal","coral","pink","#510099","lightblue","yellowgreen","cyan","salmon","brown","black"]
              
              fig, ax = plt.subplots()
             
              ax.set_prop_cycle(cycler(color=list_color))
             
              plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)
              
              ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
              if count_numer_animal > 20:
                 ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
              else:
                 ax.legend(bbox_to_anchor=(1, 1))
                 
              list_graphics_word.append(fig)

              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏"
              list_heading_graphics_word.append(graphic)    
           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
              df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)
              

              fig, ax = plt.subplots()
              
              ax.set_prop_cycle(cycler(color=list_color))

              plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
              ax.set_yscale("log")
              if count_numer_animal > 20:
                 ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
              else:
                 ax.legend(bbox_to_anchor=(1, 1))
              
              list_graphics_word.append(fig)

              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏"
              list_heading_graphics_word.append(graphic)
               ###—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ    
           # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)

              df_averaged_concentrations=df.describe()
              list_concentration=df_averaged_concentrations.loc['mean'].tolist()
              err_y_1=df_averaged_concentrations.loc['std'].tolist()
              
              #list_time.remove(0) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ
              #list_concentration.remove(0)
              #err_y_1.remove(0) 
              
              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
              
              list_graphics_word.append(fig) 

              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
              list_heading_graphics_word.append(graphic)



           #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              #–¥–ª—è –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º. –ø–æ—Å—Ç—Ä–æ–∏–º –±–µ–∑ –Ω—É–ª—è (–Ω–æ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω)


              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              ax.set_yscale("log")
              plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)

              
              list_graphics_word.append(fig)

              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
              list_heading_graphics_word.append(graphic)


              ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

              result_PK = pk_parametrs_total_intravenously(df,"–ò–ë_iv",method_auc,dose_iv,measure_unit_rb_concentration,measure_unit_rb_time, measure_unit_rb_dose)

              if result_PK is not None:
                  if st.session_state["agree_cmax2 - –ò–ë"] == False:
                     df_total_PK_iv = result_PK["df_total_PK"]
                     df_PK = result_PK["df_PK"]
                     df_concat_PK_iv = result_PK["df_concat_PK"]
                     list_cmax_1_iv = result_PK["list_cmax_1"]
                  if st.session_state["agree_cmax2 - –ò–ë"] == True:
                     df_total_PK_iv = result_PK["df_total_PK"]
                     df_PK = result_PK["df_PK"]
                     df_concat_PK_iv = result_PK["df_concat_PK"]
                     df_total_PK_additional_double_peaks_iv = result_PK["df_total_PK_additional_double_peaks"]
                     list_cmax_1_iv = result_PK["list_cmax_1"]
                     list_cmax_2_iv = result_PK["list_cmax_2"]
                  
                  st.session_state["df_total_PK_iv"] = df_total_PK_iv

                  table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°'
                  list_heading_word.append(table_heading)
                  
                  list_table_word.append(df_total_PK_iv)

                  if st.session_state["agree_cmax2 - –ò–ë"] == True:
                     table_heading='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–≤—É—Ö –ø–∏–∫–æ–≤ –≤ –§–ö –ø—Ä–æ—Ñ–∏–ª–µ'
                     list_heading_word.append(table_heading)
                     
                     list_table_word.append(df_total_PK_additional_double_peaks_iv)

                  ####–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                  list_PK_Cmax_1_not_round = df_PK['Cmax'].tolist()
                  list_PK_Tmax_1_not_round = df_PK['Tmax'].tolist() 
                  list_PK_MRT0_inf_not_round = df_PK['MRT0‚Üí‚àû'].tolist() 
                  list_PK_half_live_not_round = df_PK['T1/2'].tolist() 
                  list_PK_AUC0_t_not_round = df_PK['AUC0-t'].tolist()
                  list_PK_AUC0_inf_not_round = df_PK['AUC0‚Üí‚àû'].tolist()
                  list_PK_AUMC0_inf_not_round = df_PK['AUMC0-‚àû'].tolist()
                  list_PK_–°max_dev_AUC0_t_not_round = df_PK['–°max/AUC0-t'].tolist()
                  list_PK_Kel_not_round = df_PK['Kel'].tolist()

                  list_list_PK_parametr_iv=[list_PK_Cmax_1_not_round,list_PK_AUC0_t_not_round,list_PK_Kel_not_round,list_PK_AUC0_inf_not_round,list_PK_half_live_not_round,list_PK_AUMC0_inf_not_round,list_PK_MRT0_inf_not_round,list_PK_–°max_dev_AUC0_t_not_round]
                  list_parametr_mean_h_iv=[]
                  for i in list_list_PK_parametr_iv:
                       n=len(i)

                       def confidential_interval(i):
                           if n < 30:
                              h = statistics.stdev(i)
                              mean = np.mean(i)
                           else:
                              h = statistics.stdev(i)  ### –ø—Ä–æ—è—Å–Ω–∏—Ç—å –º–æ–º–µ–Ω—Ç —Å n-1
                              mean = np.mean(i)
                           return ([mean,h]) 
                       func_mean_h = confidential_interval(i)

                       list_parametr_mean_h_iv.append(func_mean_h)

                  list_mean_h_iv_Cmax_round=[v for v in list_parametr_mean_h_iv[0]]
                  parametr_round_mean_h_Cmax=str(list_mean_h_iv_Cmax_round[0]) +"¬±"+str(list_mean_h_iv_Cmax_round[1])

                  list_mean_h_iv_AUC0_t_round=[v for v in list_parametr_mean_h_iv[1]] 
                  parametr_round_mean_h_AUC0_t=str(list_mean_h_iv_AUC0_t_round[0]) +"¬±"+str(list_mean_h_iv_AUC0_t_round[1]) 

                  list_mean_h_iv_Kel_round=[v for v in list_parametr_mean_h_iv[2]]
                  parametr_round_mean_h_Kel=str(list_mean_h_iv_Kel_round[0]) +"¬±"+str(list_mean_h_iv_Kel_round[1])

                  list_mean_h_iv_AUC0_inf_round= [v for v in list_parametr_mean_h_iv[3]]
                  parametr_round_mean_h_AUC0_inf=str(list_mean_h_iv_AUC0_inf_round[0]) +"¬±"+str(list_mean_h_iv_AUC0_inf_round[1]) 

                  list_mean_h_iv_half_live_round=[v for v in list_parametr_mean_h_iv[4]]
                  parametr_round_mean_h_half_live=str(list_mean_h_iv_half_live_round[0]) +"¬±"+str(list_mean_h_iv_half_live_round[1])

                  list_mean_h_iv_AUMC0_inf_round=[v for v in list_parametr_mean_h_iv[5]] 
                  parametr_round_mean_h_AUMC0_inf=str(list_mean_h_iv_AUMC0_inf_round[0]) +"¬±"+str(list_mean_h_iv_AUMC0_inf_round[1]) 

                  list_mean_h_iv_MRT0_inf_round=[v for v in list_parametr_mean_h_iv[6]]
                  parametr_round_mean_h_MRT0_inf=str(list_mean_h_iv_MRT0_inf_round[0]) +"¬±"+str(list_mean_h_iv_MRT0_inf_round[1])

                  list_mean_h_iv_–°max_dev_AUC0_t_round=[v for v in list_parametr_mean_h_iv[7]]
                  parametr_round_mean_h_–°max_dev_AUC0_t=str(list_mean_h_iv_–°max_dev_AUC0_t_round[0]) +"¬±"+str(list_mean_h_iv_–°max_dev_AUC0_t_round[1])

                  list_parametr_round_mean_h_iv= [parametr_round_mean_h_Cmax,parametr_round_mean_h_AUC0_t,parametr_round_mean_h_Kel,parametr_round_mean_h_AUC0_inf,parametr_round_mean_h_half_live,parametr_round_mean_h_AUMC0_inf,parametr_round_mean_h_MRT0_inf,parametr_round_mean_h_–°max_dev_AUC0_t]

                  t_mean_iv = str(round_to_significant_figures(np.mean(list_PK_Tmax_1_not_round), 4))     
                  list_parametr_round_mean_h_iv.insert(1,t_mean_iv)

              else:
                  st.session_state["df_total_PK_iv"] = None #–¥–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ cmax2, –∞ –ø–æ—Ç–æ–º —Ä–µ—à–∏–ª –≤—Å–µ —Ç–∞–∫–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                  st.error("–í—ã–±–µ—Ä–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π Cmax –∏ Cmax(2)")

           ############################################################################################################### 
           st.subheader('–ü–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
           
           uploaded_file_2 = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç XLSX)", key='–§–∞–π–ª –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')
           
           #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
           if uploaded_file_2 is not None:
              save_uploadedfile(uploaded_file_2)
              st.session_state["uploaded_file_2"] = uploaded_file_2.name
           
           if 'uploaded_file_2' in st.session_state: 
              custom_success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {st.session_state['uploaded_file_2']}")

           dose_po_sub = st.text_input("–î–æ–∑–∞ –ø—Ä–∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏", key='–î–æ–∑–∞ –ø—Ä–∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞', value = st.session_state["dose_po_sub"])
           
           st.session_state["dose_po_sub"] = dose_po_sub

           if "uploaded_file_2" in st.session_state and dose_po_sub and measure_unit_rb_concentration:

              df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_2"]))
              st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
              
              ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
              df = edit_frame(df,st.session_state["uploaded_file_2"])

              ###–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö 
              count_rows_number_sub= len(df.axes[0])
        
              table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
              list_heading_word.append(table_heading)

              ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
              df_concat_round_str_transpose = create_table_descriptive_statistics(df)['df_concat_round_str_transpose']
              
              list_table_word.append(df_concat_round_str_transpose)

           ########### –≥—Ä–∞—Ñ–∏–∫–∏    

           ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

              # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              col_mapping = df.columns.tolist()
              col_mapping.remove('–ù–æ–º–µ—Ä')

              count_row_df = len(df.axes[0])

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)

              for r in range(0,count_row_df):

                  list_concentration=df.iloc[r].tolist()

                  numer_animal=list_concentration[0]

                  list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                  list_concentration = [float(v) for v in list_concentration]


                  fig, ax = plt.subplots()
                  plt.plot(list_time,list_concentration,marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                  plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
                 
                  list_graphics_word.append(fig)  

                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏,  '+numer_animal
                  list_heading_graphics_word.append(graphic)

               #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
                  count_for_0_1=len(list_concentration)
                  list_range_for_0_1=range(0,count_for_0_1)

                  list_time_0=[]
                  list_for_log_1=[]
                  for i in list_range_for_0_1:
                      if list_concentration[i] !=0:
                         list_for_log_1.append(list_concentration[i])
                         list_time_0.append(list_time[i]) 

                  fig, ax = plt.subplots()
                  plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                  ax.set_yscale("log")
                  plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)

                  list_graphics_word.append(fig) 

                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏,  '+numer_animal
                  list_heading_graphics_word.append(graphic)

           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

              df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
              df_for_plot_conc_1 = df_for_plot_conc.transpose()
              list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()
              count_numer_animal = len(list_numer_animal_for_plot) ### –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥—ã

              list_color = ["blue","green","red","#D6870C","violet","gold","indigo","magenta","lime","tan","teal","coral","pink","#510099","lightblue","yellowgreen","cyan","salmon","brown","black"]

              fig, ax = plt.subplots()
              
              ax.set_prop_cycle(cycler(color=list_color))

              plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
              if count_numer_animal > 20:
                 ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
              else:
                 ax.legend(bbox_to_anchor=(1, 1))

              list_graphics_word.append(fig) 

              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏"
              list_heading_graphics_word.append(graphic)    
           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
              df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)


              fig, ax = plt.subplots()
              
              ax.set_prop_cycle(cycler(color=list_color))

              plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
              ax.set_yscale("log")
              if count_numer_animal > 20:
                 ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
              else:
                 ax.legend(bbox_to_anchor=(1, 1))

              list_graphics_word.append(fig) 
       
              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏"
              list_heading_graphics_word.append(graphic) 

           ### —É—Å—Ä–µ–¥–µ–Ω–Ω—ã–µ    
           #–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö    

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)

              df_averaged_concentrations=df.describe()
              list_concentration=df_averaged_concentrations.loc['mean'].tolist()
              err_y_2=df_averaged_concentrations.loc['std'].tolist()


              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_2, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)

              list_graphics_word.append(fig) 

              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
              list_heading_graphics_word.append(graphic)  

           #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              list_time.remove(0)
              list_concentration.remove(0)
              err_y_2.remove(0) 


              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_2, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              ax.set_yscale("log")
              plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)

              list_graphics_word.append(fig) 

              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏'
              list_heading_graphics_word.append(graphic) 

              ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

              result_PK = pk_parametrs_total_extravascular(df,"–ò–ë_po_sub",method_auc,dose_po_sub,measure_unit_rb_concentration,measure_unit_rb_time, measure_unit_rb_dose)

              if result_PK is not None:
                  if st.session_state["agree_cmax2 - –ò–ë"] == False:
                     df_total_PK_po_sub = result_PK["df_total_PK"]
                     df_PK = result_PK["df_PK"]
                     df_concat_PK_po_sub = result_PK["df_concat_PK"]
                     list_cmax_1_sub = result_PK["list_cmax_1"]
                  if st.session_state["agree_cmax2 - –ò–ë"] == True:
                     df_total_PK_po_sub = result_PK["df_total_PK"]
                     df_PK = result_PK["df_PK"]
                     df_concat_PK_po_sub = result_PK["df_concat_PK"]
                     df_total_PK_additional_double_peaks_po_sub = result_PK["df_total_PK_additional_double_peaks"]
                     list_cmax_1_sub = result_PK["list_cmax_1"]
                     list_cmax_2_sub = result_PK["list_cmax_2"]
                  
                  st.session_state["df_total_PK_po_sub"] = df_total_PK_po_sub

                  table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°'
                  list_heading_word.append(table_heading)
                  
                  list_table_word.append(df_total_PK_po_sub)

                  if st.session_state["agree_cmax2 - –ò–ë"] == True:
                     table_heading='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–≤—É—Ö –ø–∏–∫–æ–≤ –≤ –§–ö –ø—Ä–æ—Ñ–∏–ª–µ'
                     list_heading_word.append(table_heading)
                     
                     list_table_word.append(df_total_PK_additional_double_peaks_po_sub)

                  ####–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                  list_PK_Cmax_1_not_round = df_PK['Cmax'].tolist()
                  list_PK_Tmax_1_not_round = df_PK['Tmax'].tolist() 
                  list_PK_MRT0_inf_not_round = df_PK['MRT0‚Üí‚àû'].tolist() 
                  list_PK_half_live_not_round = df_PK['T1/2'].tolist() 
                  list_PK_AUC0_t_not_round = df_PK['AUC0-t'].tolist()
                  list_PK_AUC0_inf_not_round = df_PK['AUC0‚Üí‚àû'].tolist()
                  list_PK_AUMC0_inf_not_round = df_PK['AUMC0-‚àû'].tolist()
                  list_PK_–°max_dev_AUC0_t_not_round = df_PK['–°max/AUC0-t'].tolist()
                  list_PK_Kel_not_round = df_PK['Kel'].tolist()

                  list_list_PK_parametr_po_sub=[list_PK_Cmax_1_not_round,list_PK_AUC0_t_not_round,list_PK_Kel_not_round,list_PK_AUC0_inf_not_round,list_PK_half_live_not_round,list_PK_AUMC0_inf_not_round,list_PK_MRT0_inf_not_round,list_PK_–°max_dev_AUC0_t_not_round]
                  list_parametr_mean_h_po_sub=[]
                  for i in list_list_PK_parametr_po_sub:
                       n=len(i)

                       def confidential_interval(i):
                           if n < 30:
                              h = statistics.stdev(i)
                              mean = np.mean(i)
                           else:
                              h = statistics.stdev(i)  ### –ø—Ä–æ—è—Å–Ω–∏—Ç—å –º–æ–º–µ–Ω—Ç —Å n-1
                              mean = np.mean(i)
                           return ([mean,h]) 
                       func_mean_h = confidential_interval(i)

                       list_parametr_mean_h_po_sub.append(func_mean_h)

                  list_mean_h_po_sub_Cmax_round=[v for v in list_parametr_mean_h_po_sub[0]]
                  parametr_round_mean_h_Cmax=str(list_mean_h_po_sub_Cmax_round[0]) +"¬±"+str(list_mean_h_po_sub_Cmax_round[1])

                  list_mean_h_po_sub_AUC0_t_round=[v for v in list_parametr_mean_h_po_sub[1]] 
                  parametr_round_mean_h_AUC0_t=str(list_mean_h_po_sub_AUC0_t_round[0]) +"¬±"+str(list_mean_h_po_sub_AUC0_t_round[1]) 

                  list_mean_h_po_sub_Kel_round=[v for v in list_parametr_mean_h_po_sub[2]]
                  parametr_round_mean_h_Kel=str(list_mean_h_po_sub_Kel_round[0]) +"¬±"+str(list_mean_h_po_sub_Kel_round[1])

                  list_mean_h_po_sub_AUC0_inf_round= [v for v in list_parametr_mean_h_po_sub[3]]
                  parametr_round_mean_h_AUC0_inf=str(list_mean_h_po_sub_AUC0_inf_round[0]) +"¬±"+str(list_mean_h_po_sub_AUC0_inf_round[1]) 

                  list_mean_h_po_sub_half_live_round=[v for v in list_parametr_mean_h_po_sub[4]]
                  parametr_round_mean_h_half_live=str(list_mean_h_po_sub_half_live_round[0]) +"¬±"+str(list_mean_h_po_sub_half_live_round[1])

                  list_mean_h_po_sub_AUMC0_inf_round=[v for v in list_parametr_mean_h_po_sub[5]] 
                  parametr_round_mean_h_AUMC0_inf=str(list_mean_h_po_sub_AUMC0_inf_round[0]) +"¬±"+str(list_mean_h_po_sub_AUMC0_inf_round[1]) 

                  list_mean_h_po_sub_MRT0_inf_round=[v for v in list_parametr_mean_h_po_sub[6]]
                  parametr_round_mean_h_MRT0_inf=str(list_mean_h_po_sub_MRT0_inf_round[0]) +"¬±"+str(list_mean_h_po_sub_MRT0_inf_round[1])

                  list_mean_h_po_sub_–°max_dev_AUC0_t_round=[v for v in list_parametr_mean_h_po_sub[7]]
                  parametr_round_mean_h_–°max_dev_AUC0_t=str(list_mean_h_po_sub_–°max_dev_AUC0_t_round[0]) +"¬±"+str(list_mean_h_po_sub_–°max_dev_AUC0_t_round[1])

                  list_parametr_round_mean_h_po_sub= [parametr_round_mean_h_Cmax,parametr_round_mean_h_AUC0_t,parametr_round_mean_h_Kel,parametr_round_mean_h_AUC0_inf,parametr_round_mean_h_half_live,parametr_round_mean_h_AUMC0_inf,parametr_round_mean_h_MRT0_inf,parametr_round_mean_h_–°max_dev_AUC0_t]

                  t_mean_po_sub = str("%.2f" % round(np.mean(list_PK_Tmax_1_not_round),2))     
                  list_parametr_round_mean_h_po_sub.insert(1,t_mean_po_sub)
              else:
                  st.session_state["df_total_PK_po_sub"] = None #–¥–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ cmax2, –∞ –ø–æ—Ç–æ–º —Ä–µ—à–∏–ª –≤—Å–µ —Ç–∞–∫–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                  st.error("–í—ã–±–µ—Ä–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π Cmax –∏ Cmax(2)")

           ##############################################################################################################

           st.subheader('–ü–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –ì–õ–§')
           
           uploaded_file_3 = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§ (—Ñ–æ—Ä–º–∞—Ç XLSX)", key='–§–∞–π–ª –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')
           
           #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
           if uploaded_file_3 is not None:
              save_uploadedfile(uploaded_file_3)
              st.session_state["uploaded_file_3"] = uploaded_file_3.name
           
           if 'uploaded_file_3' in st.session_state: 
              custom_success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {st.session_state['uploaded_file_3']}")
              

           dose_po_rdf = st.text_input("–î–æ–∑–∞ –ø—Ä–∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏ –ì–õ–§", key='–î–æ–∑–∞ –ø—Ä–∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–º –≤–≤–µ–¥–µ–Ω–∏–∏ –ì–õ–§ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞', value = st.session_state["dose_po_rdf"])
           
           st.session_state["dose_po_rdf"] = dose_po_rdf

           if "uploaded_file_3" in st.session_state and dose_po_rdf and measure_unit_rb_concentration:

              df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_3"]))
              st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§')
              
              ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
              df = edit_frame(df,st.session_state["uploaded_file_3"])

              ###–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö 
              count_rows_number_rdf= len(df.axes[0])
        
              table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§'
              list_heading_word.append(table_heading)

              ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
              df_concat_round_str_transpose = create_table_descriptive_statistics(df)['df_concat_round_str_transpose']
              
              list_table_word.append(df_concat_round_str_transpose)

           ########### –≥—Ä–∞—Ñ–∏–∫–∏    

           ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

              # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              col_mapping = df.columns.tolist()
              col_mapping.remove('–ù–æ–º–µ—Ä')

              count_row_df = len(df.axes[0])

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)

              for r in range(0,count_row_df):

                  list_concentration=df.iloc[r].tolist()

                  numer_animal=list_concentration[0]

                  list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                  list_concentration = [float(v) for v in list_concentration]


                  fig, ax = plt.subplots()
                  plt.plot(list_time,list_concentration,marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                  plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
                 
                  list_graphics_word.append(fig)  

                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§,  '+numer_animal
                  list_heading_graphics_word.append(graphic)

               #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
                  count_for_0_1=len(list_concentration)
                  list_range_for_0_1=range(0,count_for_0_1)

                  list_time_0=[]
                  list_for_log_1=[]
                  for i in list_range_for_0_1:
                      if list_concentration[i] !=0:
                         list_for_log_1.append(list_concentration[i])
                         list_time_0.append(list_time[i]) 

                  fig, ax = plt.subplots()
                  plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                  ax.set_yscale("log")
                  plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
                  plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)

                  list_graphics_word.append(fig) 

                  graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§,  '+numer_animal
                  list_heading_graphics_word.append(graphic)

           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

              df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
              df_for_plot_conc_1 = df_for_plot_conc.transpose()
              list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()
              count_numer_animal = len(list_numer_animal_for_plot) ### –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥—ã

              list_color = ["blue","green","red","#D6870C","violet","gold","indigo","magenta","lime","tan","teal","coral","pink","#510099","lightblue","yellowgreen","cyan","salmon","brown","black"]

              fig, ax = plt.subplots()
              
              ax.set_prop_cycle(cycler(color=list_color))

              plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
              if count_numer_animal > 20:
                 ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
              else:
                 ax.legend(bbox_to_anchor=(1, 1))

              list_graphics_word.append(fig) 

              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§"
              list_heading_graphics_word.append(graphic)    
           # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
              df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)


              fig, ax = plt.subplots()
              
              ax.set_prop_cycle(cycler(color=list_color))

              plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

              ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
              ax.set_yscale("log")
              if count_numer_animal > 20:
                 ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
              else:
                 ax.legend(bbox_to_anchor=(1, 1))

              list_graphics_word.append(fig) 
       
              graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§"
              list_heading_graphics_word.append(graphic) 

           ### —É—Å—Ä–µ–¥–µ–Ω–Ω—ã–µ    
           #–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö    

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)

              df_averaged_concentrations=df.describe()
              list_concentration=df_averaged_concentrations.loc['mean'].tolist()
              err_y_2=df_averaged_concentrations.loc['std'].tolist()


              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_2, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)

              list_graphics_word.append(fig) 

              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§'
              list_heading_graphics_word.append(graphic)  

           #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              list_time.remove(0)
              list_concentration.remove(0)
              err_y_2.remove(0) 


              fig, ax = plt.subplots()
              plt.errorbar(list_time,list_concentration,yerr=err_y_2, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
              ax.set_yscale("log")
              plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
              plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)

              list_graphics_word.append(fig) 

              graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§'
              list_heading_graphics_word.append(graphic) 

              ############### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

              result_PK = pk_parametrs_total_extravascular(df,"–ò–ë_po_rdf",method_auc,dose_po_rdf,measure_unit_rb_concentration,measure_unit_rb_time, measure_unit_rb_dose)

              if result_PK is not None:
                  if st.session_state["agree_cmax2 - –ò–ë"] == False:
                     df_total_PK_po_rdf = result_PK["df_total_PK"]
                     df_PK = result_PK["df_PK"]
                     df_concat_PK_po_rdf = result_PK["df_concat_PK"]
                     list_cmax_1_rdf = result_PK["list_cmax_1"]
                  if st.session_state["agree_cmax2 - –ò–ë"] == True:
                     df_total_PK_po_rdf = result_PK["df_total_PK"]
                     df_PK = result_PK["df_PK"]
                     df_concat_PK_po_rdf = result_PK["df_concat_PK"]
                     df_total_PK_additional_double_peaks_po_rdf = result_PK["df_total_PK_additional_double_peaks"]
                     list_cmax_1_rdf = result_PK["list_cmax_1"]
                     list_cmax_2_rdf = result_PK["list_cmax_2"]
                  
                  st.session_state["df_total_PK_po_rdf"] = df_total_PK_po_rdf

                  table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –õ–°'
                  list_heading_word.append(table_heading)
                  
                  list_table_word.append(df_total_PK_po_rdf)

                  if st.session_state["agree_cmax2 - –ò–ë"] == True:
                     table_heading='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–≤—É—Ö –ø–∏–∫–æ–≤ –≤ –§–ö –ø—Ä–æ—Ñ–∏–ª–µ'
                     list_heading_word.append(table_heading)
                     
                     list_table_word.append(df_total_PK_additional_double_peaks_po_rdf)
                  
                  ####–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                  list_PK_Cmax_1_not_round = df_PK['Cmax'].tolist()
                  list_PK_Tmax_1_not_round = df_PK['Tmax'].tolist() 
                  list_PK_MRT0_inf_not_round = df_PK['MRT0‚Üí‚àû'].tolist() 
                  list_PK_half_live_not_round = df_PK['T1/2'].tolist() 
                  list_PK_AUC0_t_not_round = df_PK['AUC0-t'].tolist()
                  list_PK_AUC0_inf_not_round = df_PK['AUC0‚Üí‚àû'].tolist()
                  list_PK_AUMC0_inf_not_round = df_PK['AUMC0-‚àû'].tolist()
                  list_PK_–°max_dev_AUC0_t_not_round = df_PK['–°max/AUC0-t'].tolist()
                  list_PK_Kel_not_round = df_PK['Kel'].tolist()

                  list_list_PK_parametr_po_rdf=[list_PK_Cmax_1_not_round,list_PK_AUC0_t_not_round,list_PK_Kel_not_round,list_PK_AUC0_inf_not_round,list_PK_half_live_not_round,list_PK_AUMC0_inf_not_round,list_PK_MRT0_inf_not_round,list_PK_–°max_dev_AUC0_t_not_round]
                  list_parametr_mean_h_po_rdf=[]
                  for i in list_list_PK_parametr_po_rdf:
                       n=len(i)

                       def confidential_interval(i):
                           if n < 30:
                              h = statistics.stdev(i)
                              mean = np.mean(i)
                           else:
                              h = statistics.stdev(i)  ### –ø—Ä–æ—è—Å–Ω–∏—Ç—å –º–æ–º–µ–Ω—Ç —Å n-1
                              mean = np.mean(i)
                           return ([mean,h]) 
                       func_mean_h = confidential_interval(i)

                       list_parametr_mean_h_po_rdf.append(func_mean_h)


                  list_mean_h_po_rdf_Cmax_round=[v for v in list_parametr_mean_h_po_rdf[0]]
                  parametr_round_mean_h_Cmax=str(list_mean_h_po_rdf_Cmax_round[0]) +"¬±"+str(list_mean_h_po_rdf_Cmax_round[1])

                  list_mean_h_po_rdf_AUC0_t_round=[v for v in list_parametr_mean_h_po_rdf[1]] 
                  parametr_round_mean_h_AUC0_t=str(list_mean_h_po_rdf_AUC0_t_round[0]) +"¬±"+str(list_mean_h_po_rdf_AUC0_t_round[1]) 

                  list_mean_h_po_rdf_Kel_round=[v for v in list_parametr_mean_h_po_rdf[2]]
                  parametr_round_mean_h_Kel=str(list_mean_h_po_rdf_Kel_round[0]) +"¬±"+str(list_mean_h_po_rdf_Kel_round[1])

                  list_mean_h_po_rdf_AUC0_inf_round= [v for v in list_parametr_mean_h_po_rdf[3]]
                  parametr_round_mean_h_AUC0_inf=str(list_mean_h_po_rdf_AUC0_inf_round[0]) +"¬±"+str(list_mean_h_po_rdf_AUC0_inf_round[1]) 

                  list_mean_h_po_rdf_half_live_round=[v for v in list_parametr_mean_h_po_rdf[4]]
                  parametr_round_mean_h_half_live=str(list_mean_h_po_rdf_half_live_round[0]) +"¬±"+str(list_mean_h_po_rdf_half_live_round[1])

                  list_mean_h_po_rdf_AUMC0_inf_round=[v for v in list_parametr_mean_h_po_rdf[5]] 
                  parametr_round_mean_h_AUMC0_inf=str(list_mean_h_po_rdf_AUMC0_inf_round[0]) +"¬±"+str(list_mean_h_po_rdf_AUMC0_inf_round[1]) 

                  list_mean_h_po_rdf_MRT0_inf_round=[v for v in list_parametr_mean_h_po_rdf[6]]
                  parametr_round_mean_h_MRT0_inf=str(list_mean_h_po_rdf_MRT0_inf_round[0]) +"¬±"+str(list_mean_h_po_rdf_MRT0_inf_round[1])

                  list_mean_h_po_rdf_–°max_dev_AUC0_t_round=[v for v in list_parametr_mean_h_po_rdf[7]]
                  parametr_round_mean_h_–°max_dev_AUC0_t=str(list_mean_h_po_rdf_–°max_dev_AUC0_t_round[0]) +"¬±"+str(list_mean_h_po_rdf_–°max_dev_AUC0_t_round[1])

                  list_parametr_round_mean_h_po_rdf= [parametr_round_mean_h_Cmax,parametr_round_mean_h_AUC0_t,parametr_round_mean_h_Kel,parametr_round_mean_h_AUC0_inf,parametr_round_mean_h_half_live,parametr_round_mean_h_AUMC0_inf,parametr_round_mean_h_MRT0_inf,parametr_round_mean_h_–°max_dev_AUC0_t]

                  t_mean_po_rdf = str("%.2f" % round(np.mean(list_PK_Tmax_1_not_round),2))     
                  list_parametr_round_mean_h_po_rdf.insert(1,t_mean_po_rdf)
                 
              else:
                  st.session_state["df_total_PK_po_rdf"] = None #–¥–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ cmax2, –∞ –ø–æ—Ç–æ–º —Ä–µ—à–∏–ª –≤—Å–µ —Ç–∞–∫–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                  st.error("–í—ã–±–µ—Ä–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π Cmax –∏ Cmax(2)")

           ###–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
           button_calculation_bioavailability = False
           
           if ("uploaded_file_1" in st.session_state) and ("uploaded_file_2" in st.session_state) and ("uploaded_file_3" in st.session_state) and measure_unit_rb_concentration and dose_iv and dose_po_sub and dose_po_rdf and st.session_state["df_total_PK_iv"] is not None and st.session_state["df_total_PK_po_sub"] is not None and st.session_state["df_total_PK_po_rdf"] is not None:
              
              condition_iv_cmax1 =  len(list_cmax_1_iv) == count_rows_number_iv
              condition_sub_cmax1 = len(list_cmax_1_sub) == count_rows_number_sub
              condition_rdf_cmax1 = len(list_cmax_1_rdf) == count_rows_number_rdf
              
              if st.session_state["agree_cmax2 - –ò–ë"] == True:
                 condition_iv_cmax2 =  len(list_cmax_2_iv) == count_rows_number_iv
                 condition_sub_cmax2 = len(list_cmax_2_sub) == count_rows_number_sub
                 condition_rdf_cmax2 = len(list_cmax_2_rdf) == count_rows_number_rdf
              
              if st.session_state["agree_cmax2 - –ò–ë"] == True:
                 if (condition_iv_cmax2 and condition_sub_cmax2 and condition_rdf_cmax2):
                    button_calculation_bioavailability = True
              if st.session_state["agree_cmax2 - –ò–ë"] == False:
                 if (condition_iv_cmax1 and condition_sub_cmax1 and condition_rdf_cmax1):
                    button_calculation_bioavailability = True

              if button_calculation_bioavailability == True:
                 custom_success('–†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã!')
              else:   
                 st.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã!')

           if ("uploaded_file_1" in st.session_state) and ("uploaded_file_2" in st.session_state) and ("uploaded_file_3" in st.session_state) and measure_unit_rb_concentration and dose_iv and dose_po_sub and dose_po_rdf and button_calculation_bioavailability:
               
               table_heading='–£—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏, –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§, –∞ —Ç–∞–∫–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'
               list_heading_word.append(table_heading)

               AUCT_inf_mean_iv = df_concat_PK_iv["AUC0-t"].loc["mean"]
               AUCT_inf_mean_po_sub = df_concat_PK_po_sub["AUC0-t"].loc["mean"]
               AUCT_inf_mean_po_rdf = df_concat_PK_po_rdf["AUC0-t"].loc["mean"]

               #–∞–±—Å–æ–ª—é—Ç–Ω–∞—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å

               F_po_sub_iv=round((AUCT_inf_mean_po_sub * float(dose_iv))/(AUCT_inf_mean_iv*float(dose_po_sub))*100,2)
               F_po_rdf_iv=round((AUCT_inf_mean_po_rdf * float(dose_iv))/(AUCT_inf_mean_iv*float(dose_po_rdf))*100,2)

               #–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
               RF_po_sub_rdf=round((AUCT_inf_mean_po_rdf*float(dose_po_sub))/(AUCT_inf_mean_po_sub*float(dose_po_rdf))*100,2)

               df_intravenous_substance = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_1"]))
               df_oral_substance = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_2"]))
               df_oral_rdf = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_3"]))

               df_averaged_concentrations_intravenous_substance=df_intravenous_substance.describe()
               list_concentration__intravenous_substance=df_averaged_concentrations_intravenous_substance.loc['mean'].tolist()

               df_averaged_concentrations_oral_substance=df_oral_substance.describe()
               list_concentration__oral_substance=df_averaged_concentrations_oral_substance.loc['mean'].tolist()

               df_averaged_concentrations_oral_rdf=df_oral_rdf.describe()
               list_concentration__oral_rdf=df_averaged_concentrations_oral_rdf.loc['mean'].tolist()

           ### –∏—Ç–æ–≥–æ–≤—ã–π —Ñ—Ä–µ–π–º –ø–æ PK –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º

               list_index_for_df_total_PK_mean = ['Cmax ' +"("+measure_unit_rb_concentration+")",'Tmax ' +"("+f"{measure_unit_rb_time}"+")",'AUC0-t '+"("+measure_unit_rb_concentration+f"√ó{measure_unit_rb_time}" +")",'Kel '+"("+f"{measure_unit_rb_time}\u207B\u00B9"+")",'AUC0‚Üí‚àû '+"("+measure_unit_rb_concentration+f"√ó{measure_unit_rb_time}" +")",'T1/2 '+"("+f"{measure_unit_rb_time}"+")",'AUMC0-‚àû '+"("+measure_unit_rb_concentration+f"√ó{measure_unit_rb_time}\u00B2"+")",'MRT0‚Üí‚àû '+"("+f"{measure_unit_rb_time}"+")",'–°max/AUC0-t '+"("+f"{measure_unit_rb_time}\u207B\u00B9"+")","F(–∞–±—Å–æ–ª—é—Ç–Ω–∞—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å),%","–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å,% (–ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–µ—Ä–æ—Ä–∞–ª—å–Ω—ã–º –≤–≤–µ–¥–µ–Ω–∏–µ–º —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏)"]
               
               #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
               list_parametr_round_mean_h_iv.append("-")
               list_parametr_round_mean_h_iv.append("-")

               list_parametr_round_mean_h_po_sub.append(F_po_sub_iv)
               list_parametr_round_mean_h_po_sub.append("-")

               list_parametr_round_mean_h_po_rdf.append(F_po_rdf_iv)
               list_parametr_round_mean_h_po_rdf.append(RF_po_sub_rdf)


               df_total_PK_mean = pd.DataFrame(list(zip(list_parametr_round_mean_h_iv,list_parametr_round_mean_h_po_sub,list_parametr_round_mean_h_po_rdf)),columns=['–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏','–ü–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏','–ü–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –ì–õ–§'],index=list_index_for_df_total_PK_mean)
               df_total_PK_mean.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å'
               
               list_table_word.append(df_total_PK_mean)

           #####–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏

           ### –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
               col_mapping = df_intravenous_substance.columns.tolist() ### –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π —Ñ—Ä–µ–π–º
               col_mapping.remove('–ù–æ–º–µ—Ä')
               list_time = []
               for i in col_mapping:
                   numer=float(i)
                   list_time.append(numer)

               err_y_1=df_averaged_concentrations_intravenous_substance.loc['std'].tolist()
               err_y_2=df_averaged_concentrations_oral_substance.loc['std'].tolist()
               err_y_3=df_averaged_concentrations_oral_rdf.loc['std'].tolist()
               
               df_total_injection = pd.DataFrame(list(zip(list_concentration__intravenous_substance, list_concentration__oral_substance, list_concentration__oral_rdf)),columns =['–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ','–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏','–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –ì–õ–§'])
               df_total_injection.loc[df_total_injection["–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ"] == 0, "–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ"] = np.nan #—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ
               
               df_total_error = pd.DataFrame(list(zip(err_y_1, err_y_2, err_y_3)),columns =['–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ','–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏','–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –ì–õ–§'])
               df_total_error.loc[df_total_injection["–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ"] == 0, "–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ"] = np.nan #—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ
               list_name_injection = ['–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ','–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏','–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –ì–õ–§']
               list_name_colors = ["black","red","blue"]
               zip_injection_colors_error = zip(list_name_injection,list_name_colors)


               fig, ax = plt.subplots()
               
               for injection,color in zip_injection_colors_error:
                   plt.errorbar(list_time,df_total_injection[injection],yerr=df_total_error[injection],color= color, marker='o',markersize=4.0,markeredgecolor=color,markerfacecolor=color,ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0, label = injection)
                   ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
                   ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
                   ax.legend()

               list_graphics_word.append(fig) 

               graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏, –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§"
               list_heading_graphics_word.append(graphic) 
           ### –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
               if 0 in list_time:
                  list_time.remove(0)
               
               list_concentration__oral_substance.remove(0)
               list_concentration__oral_rdf.remove(0)
               
               err_y_2.remove(0) 
               err_y_3.remove(0) 

               fig, ax = plt.subplots()    

               plt.errorbar(list_time,list_concentration__intravenous_substance,yerr=err_y_1,color="black", marker='o',markersize=4.0,markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0, label = '–≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ')
               plt.errorbar(list_time,list_concentration__oral_substance,yerr=err_y_2,color= "red", marker='o',markersize=4.0,markeredgecolor="red",markerfacecolor="red",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0, label = '–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏')
               plt.errorbar(list_time,list_concentration__oral_rdf,yerr=err_y_3,color= "blue", marker='o',markersize=4.0,markeredgecolor="blue",markerfacecolor="blue",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0, label = '–ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –ì–õ–§')

               ax.set_yscale("log")
               ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_rb_time}")
               ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_rb_concentration)
               ax.legend()

               list_graphics_word.append(fig) 

               graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏, –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–µ—Ä–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è –ì–õ–§"
               list_heading_graphics_word.append(graphic)
           else:
               st.write("")

           ##############################################################################################################

           ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
           st.session_state["list_heading_word"] = list_heading_word
           st.session_state["list_table_word"] = list_table_word
           st.session_state["list_graphics_word"] = list_graphics_word
           st.session_state["list_heading_graphics_word"] = list_heading_graphics_word
    
    #–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    col1, col2 = st.columns([0.66,0.34])
    
    with col1:
     
       #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
       if panel == "–¢–∞–±–ª–∏—Ü—ã":
          
          if st.session_state["df_total_PK_iv"] is not None and st.session_state["df_total_PK_po_sub"] is not None and st.session_state["df_total_PK_po_rdf"] is not None:

             list_heading_word = st.session_state["list_heading_word"]
             list_table_word = st.session_state["list_table_word"]
             
             ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
             visualize_table(list_heading_word,list_table_word)

             with col2:
                  
                  selected = option_menu(None, ["C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç"], 
                  icons=['file-earmark-arrow-down-fill'], 
                  menu_icon="cast", default_index=0, orientation="vertical",
                  styles={
                     "container": {"padding": "0!important", "background-color": "#1f3b57"},
                     "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                     "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                     "nav-link-selected": {"background-color": "#73b5f2"},
                  })

                  if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":

                     ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü
                     create_table(list_heading_word,list_table_word)
          else:
             st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

       if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
             
          if st.session_state["df_total_PK_iv"] is not None and st.session_state["df_total_PK_po_sub"] is not None and st.session_state["df_total_PK_po_rdf"] is not None:
             
             list_graphics_word = st.session_state["list_graphics_word"]
             list_heading_graphics_word = st.session_state["list_heading_graphics_word"]
             
             #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

             #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
             type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
             ('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–∞—Ö –≤–≤–µ–¥–µ–Ω–∏—è"),disabled = False, key = "–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - –ò–ë" )

             count_graphics_for_visual = len(list_heading_graphics_word)
             list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)
             
             for i in list_range_count_graphics_for_visual:
                 if list_heading_graphics_word[i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
                    if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                       st.pyplot(list_graphics_word[i])
                       st.subheader(list_heading_graphics_word[i])
                 if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
                    if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                       st.pyplot(list_graphics_word[i])
                       st.subheader(list_heading_graphics_word[i])
                 if list_heading_graphics_word[i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
                    if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                       st.pyplot(list_graphics_word[i])
                       st.subheader(list_heading_graphics_word[i])
                 if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö"):
                    if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–∞—Ö –≤–≤–µ–¥–µ–Ω–∏—è':
                       st.pyplot(list_graphics_word[i])
                       st.subheader(list_heading_graphics_word[i])

             with col2:
                  
                  selected = option_menu(None, ["C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç"], 
                  icons=['file-earmark-arrow-down-fill'], 
                  menu_icon="cast", default_index=0, orientation="vertical",
                  styles={
                     "container": {"padding": "0!important", "background-color": "#1f3b57"},
                     "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                     "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                     "nav-link-selected": {"background-color": "#73b5f2"},
                  })
                   
                  if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":
                     ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                     create_graphic(list_graphics_word,list_heading_graphics_word)

          else:
             st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")          
#####################################################################        
if option == '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ä–≥–∞–Ω–∞–º':
   
   st.header('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö')
   
   col1, col2 = st.columns([0.66, 0.34])
   
   with col1:
       
      panel = st.radio(
           "‚öôÔ∏è–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
           ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "–¢–∞–±–ª–∏—Ü—ã","–ì—Ä–∞—Ñ–∏–∫–∏"),
           horizontal=True, key= "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ - –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö"
       )

      ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if "dose_org" not in st.session_state:
         st.session_state["dose_org"] = ""

      #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
      list_heading_word=[]
      list_table_word=[]
      list_graphics_word=[]
      list_heading_graphics_word=[]
       
      if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
         
         ######### –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞
         with col2:
              
              selected = option_menu(None, ["–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"], 
                    icons=['menu-button'], 
                    menu_icon="cast", default_index=0, orientation="vertical",
                    styles={
                      "container": {"padding": "0!important", "background-color": "#1f3b57"},
                      "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                      "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                      "nav-link-selected": {"background-color": "#73b5f2"},
                    })

              if selected == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤":
                    type_parameter = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä',
                    ("–í–∏–¥ –≤–≤–µ–¥–µ–Ω–∏—è",'–î–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏'),disabled = False, key = "–í–∏–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –æ—Ä–≥–∞–Ω—ã")
                 
              if "agree_cmax2 - –æ—Ä–≥–∞–Ω—ã" not in st.session_state:
                    st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"] = False

              if type_parameter == '–î–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏':

                 st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"] = st.checkbox('–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è-–í—Ä–µ–º—è" –æ—Ç—á–µ—Ç–ª–∏–≤–æ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –¥–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏', key = "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Cmax2 - –æ—Ä–≥–∞–Ω—ã", value = st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"])
                 
                 if st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"] == True:
                    custom_success('–ü–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω!')

              if "agree_injection - –æ—Ä–≥–∞–Ω—ã" not in st.session_state:
                    st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] = False

              if type_parameter == "–í–∏–¥ –≤–≤–µ–¥–µ–Ω–∏—è":

               # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                 if "injection_choice - –æ—Ä–≥–∞–Ω—ã" not in st.session_state:
                     st.session_state["injection_choice - –æ—Ä–≥–∞–Ω—ã"] = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                 # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–≤–µ–¥–µ–Ω–∏—è
                 injection_type = st.radio(
                     "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–≤–µ–¥–µ–Ω–∏—è:",
                     options=["–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ", "–í–Ω–µ—Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ"],
                     index=st.session_state["injection_choice - –æ—Ä–≥–∞–Ω—ã"],
                     key="injection_choice_–æ—Ä–≥–∞–Ω—ã",  # –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
                 )

                 # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
                 if injection_type == "–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ":
                     st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] = True
                     st.session_state["injection_choice - –æ—Ä–≥–∞–Ω—ã"] = 0
                 else:
                     st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] = False
                     st.session_state["injection_choice - –æ—Ä–≥–∞–Ω—ã"] = 1

                 # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
                 if st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"]:
                   custom_success("–í—ã–±—Ä–∞–Ω–æ: –í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ!")
                 else:
                   custom_success("–í—ã–±—Ä–∞–Ω–æ: –í–Ω–µ—Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ!")

         measure_unit_org_time = select_time_unit("–æ—Ä–≥–∞–Ω—ã")
         measure_unit_org_blood = select_concentration_unit("–æ—Ä–≥–∞–Ω—ã")
         measure_unit_org_organs = select_organ_concentration_unit("–æ—Ä–≥–∞–Ω—ã")
         measure_unit_org_dose = select_dose_unit("–æ—Ä–≥–∞–Ω—ã")
         
         dose = st.text_input("–î–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞", key='–î–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö', value = st.session_state["dose_org"])
         
         st.session_state["dose_org"] = dose

         #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
         if "index_method_auc - –ò–û" not in st.session_state:
             st.session_state["index_method_auc - –ò–û"] = 0

         method_auc = st.radio("üìà –ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC",('linear',"linear-up/log-down"),key = "–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - –ò–û", index = st.session_state["index_method_auc - –ò–û"])
         
         if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - –ò–û"] == 'linear':
            st.session_state["index_method_auc - –ò–û"] = 0
         if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - –ò–û"] == "linear-up/log-down":
            st.session_state["index_method_auc - –ò–û"] = 1
         
         custom_alert("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤; —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ä–≥–∞–Ω—É; –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∫—Ä–æ–≤–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω '–ö—Ä–æ–≤—å'")
         file_uploader = st.file_uploader("",accept_multiple_files=True, key='–§–∞–π–ª—ã –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö')

         if 'list_files_name_organs' not in st.session_state:
             st.session_state['list_files_name_organs'] = []

         ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
         list_files_name_organs = []
         if file_uploader is not None:
            for i in file_uploader:
                save_uploadedfile(i)
                st.session_state[str(i.name)] = i.name
                list_files_name_organs.append(i.name)
         
         st.session_state['list_files_name_organs'] = list_files_name_organs
         
         if st.session_state['list_files_name_organs'] != []:
              custom_success(f"–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {', '.join(st.session_state['list_files_name_organs'])}") 
              
         
         list_keys_file_org = []
         for i in st.session_state.keys():
             if i.__contains__("xlsx") and (not i.__contains__("–î–æ–∑–∏—Ä–æ–≤–∫–∞")) and (not i.__contains__("edited_df")):### —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–æ—Å—å —Å lin; #–æ–±—Ä–µ–∑–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è "edited_df"
                list_keys_file_org.append(i)


         if (list_keys_file_org != []) and dose and measure_unit_org_blood and measure_unit_org_organs:

             list_name_organs=[]
             list_df_unrounded=[]
             list_df_for_mean_unround_for_graphics=[]
             list_t_graph=[]
             

             # –ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å
             blood_file_name = '–ö—Ä–æ–≤—å.xlsx'

             # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
             if blood_file_name in list_keys_file_org:
                 # –£–¥–∞–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
                 list_keys_file_org.remove(blood_file_name)
                 list_keys_file_org.insert(0, blood_file_name)


             for i in list_keys_file_org:
                 df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",i))

                 file_name=st.session_state[i][:-5]

                 st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π ' + "("+file_name+")")
                 
                 ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                 df = edit_frame(df,i)

                 ###–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö 
                 count_rows_number_org = len(df.axes[0])

                 table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π ' + "("+file_name+")"
                 list_heading_word.append(table_heading)

                 ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
                 df_concat_round_str_transpose = create_table_descriptive_statistics(df)['df_concat_round_str_transpose']

                 list_table_word.append(df_concat_round_str_transpose)

                 if file_name == "–ö—Ä–æ–≤—å":
                    measure_unit_org = measure_unit_org_blood
                 else:
                    measure_unit_org = measure_unit_org_organs
                 ########### –≥—Ä–∞—Ñ–∏–∫–∏    

                 ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

                 # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö 
                 col_mapping = df.columns.tolist()
                 col_mapping.remove('–ù–æ–º–µ—Ä')

                 count_row_df = len(df.axes[0])

                 list_time = []
                 for i in col_mapping:
                     numer=float(i)
                     list_time.append(numer)
                 list_t_graph.append(list_time)

                 #if st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] == True: 
                    #list_time.remove(0)

                 for r in range(0,count_row_df):

                     list_concentration=df.iloc[r].tolist()

                     numer_animal=list_concentration[0]

                     list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                     list_concentration = [float(v) for v in list_concentration]

                     #if st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] == True:
                        #list_concentration.remove(0)

                     fig, ax = plt.subplots()
                     plt.plot(list_time,list_concentration,marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                     plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_org_time}")
                     plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)
      
                     list_graphics_word.append(fig)

                     graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö '  + "("+file_name+")"',  '+numer_animal
                     list_heading_graphics_word.append(graphic)  
                     

                  #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
                     count_for_0_1=len(list_concentration)
                     list_range_for_0_1=range(0,count_for_0_1)

                     list_time_0=[]
                     list_for_log_1=[]
                     for i in list_range_for_0_1:
                         if list_concentration[i] !=0:
                            list_for_log_1.append(list_concentration[i])
                            list_time_0.append(list_time[i]) 

                     fig, ax = plt.subplots()
                     plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                     ax.set_yscale("log")
                     plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_org_time}")
                     plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)

                     
                     list_graphics_word.append(fig)

                     graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' + "("+file_name+")"',  '+numer_animal
                     list_heading_graphics_word.append(graphic) 
       
              # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

                 df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
                 df_for_plot_conc_1 = df_for_plot_conc.transpose()
                 
                 #if st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] == True:
                    #df_for_plot_conc_1=df_for_plot_conc_1.replace(0, None) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ

                 list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()
                 count_numer_animal = len(list_numer_animal_for_plot) ### –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥—ã

                 list_color = ["blue","green","red","#D6870C","violet","gold","indigo","magenta","lime","tan","teal","coral","pink","#510099","lightblue","yellowgreen","cyan","salmon","brown","black"]

                 fig, ax = plt.subplots()
                 
                 ax.set_prop_cycle(cycler(color=list_color))

                 plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

                 ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_org_time}")
                 ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)
                 if count_numer_animal > 20:
                    ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
                 else:
                    ax.legend(bbox_to_anchor=(1, 1))
                 
                 list_graphics_word.append(fig)

                 graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö " + "("+file_name+")"
                 list_heading_graphics_word.append(graphic)     
              # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
                 df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)


                 fig, ax = plt.subplots()

                 ax.set_prop_cycle(cycler(color=list_color))

                 plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

                 ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_org_time}")
                 ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)
                 ax.set_yscale("log")
                 if count_numer_animal > 20:
                    ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
                 else:
                    ax.legend(bbox_to_anchor=(1, 1))
                 
                 list_graphics_word.append(fig)

                 graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö " + "("+file_name+")"
                 list_heading_graphics_word.append(graphic)
                  ###—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ    
              # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 list_time = []
                 for i in col_mapping:
                     numer=float(i)
                     list_time.append(numer)

                 df_averaged_concentrations=df.describe()
                 list_concentration=df_averaged_concentrations.loc['mean'].tolist()
                 err_y_1=df_averaged_concentrations.loc['std'].tolist()
                 
                 #if st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] == True:
                    #list_time.remove(0) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ
                    #list_concentration.remove(0)
                    #err_y_1.remove(0)

                 fig, ax = plt.subplots()
                 plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
                 plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_org_time}")
                 plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)
                 
                 list_graphics_word.append(fig)

                 graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' + "("+file_name+")"
                 list_heading_graphics_word.append(graphic)

              #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 #–¥–ª—è –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º. –ø–æ—Å—Ç–æ—Ä–∏–º –±–µ–∑ –Ω—É–ª—è
                 if st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] == False:
                    list_time.remove(0)
                    list_concentration.remove(0)
                    err_y_1.remove(0) 

                 fig, ax = plt.subplots()
                 plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
                 ax.set_yscale("log")
                 plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_org_time}")
                 plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_org)

                 list_graphics_word.append(fig)

                 graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' + "("+file_name+")"
                 list_heading_graphics_word.append(graphic)

                 ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö
                 
                 if f"agree_cmax2 - –æ—Ä–≥–∞–Ω—ã {file_name}" not in st.session_state:
                    st.session_state[f"agree_cmax2 - –æ—Ä–≥–∞–Ω—ã {file_name}"] = False
                 
                 if st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"] == True:
                    st.session_state[f"agree_cmax2 - –æ—Ä–≥–∞–Ω—ã {file_name}"] = True


                 if st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] == False:
                     result_PK = pk_parametrs_total_extravascular(df,f"–æ—Ä–≥–∞–Ω—ã {file_name}",method_auc,dose,measure_unit_org,measure_unit_org_time,measure_unit_org_dose)
                 else:
                     result_PK = pk_parametrs_total_intravenously(df,f"–æ—Ä–≥–∞–Ω—ã {file_name}",method_auc,dose,measure_unit_org,measure_unit_org_time,measure_unit_org_dose)

                 if result_PK is not None:
                     if st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"] == False:
                        df_total_PK_org = result_PK["df_total_PK"]
                        df_concat_PK_org = result_PK["df_concat_PK"]
                        list_cmax_1_org = result_PK["list_cmax_1"]
                     if st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"] == True:
                        df_total_PK_org = result_PK["df_total_PK"]
                        df_concat_PK_org = result_PK["df_concat_PK"]
                        list_cmax_1_org = result_PK["list_cmax_1"]
                        list_cmax_2_org = result_PK["list_cmax_2"]
                        df_total_PK_additional_double_peaks_org = result_PK["df_total_PK_additional_double_peaks"]
                         
                     st.session_state["df_total_PK_org"] = df_total_PK_org

                     table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ' + "("+file_name+")"
                     list_heading_word.append(table_heading)
                     
                     list_table_word.append(df_total_PK_org)
                     
                     if st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"] == True:
                        table_heading='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–≤—É—Ö –ø–∏–∫–æ–≤ –≤ –§–ö –ø—Ä–æ—Ñ–∏–ª–µ '  + "("+file_name+")"
                        list_heading_word.append(table_heading)
                        
                        list_table_word.append(df_total_PK_additional_double_peaks_org)

                     #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ñ—Ä–µ–π–º–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ä–≥–∞–Ω–æ–≤ –∏ —Ç.–¥.

                     ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
                     df_concat = create_table_descriptive_statistics(df)['df_concat']

                     list_name_organs.append(file_name)
                     list_df_unrounded.append(df_concat_PK_org)
                     list_df_for_mean_unround_for_graphics.append(df_concat)
                 else:
                     st.session_state["df_total_PK_org"] = None #–¥–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ cmax2, –∞ –ø–æ—Ç–æ–º —Ä–µ—à–∏–ª –≤—Å–µ —Ç–∞–∫–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                     st.error("–í—ã–±–µ—Ä–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π Cmax –∏ Cmax(2)")

             ###–ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
             button_calculation = False
             
             if (list_keys_file_org != []) and dose and measure_unit_org_blood and measure_unit_org_organs and result_PK is not None:
              
                condition_cmax1 =  len(list_cmax_1_org) == count_rows_number_org
                
                if st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"] == True:
                   condition_cmax2 =  len(list_cmax_2_org) == count_rows_number_org
                
                if st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"] == True:
                   if (condition_cmax2):
                      button_calculation = True
                if st.session_state["agree_cmax2 - –æ—Ä–≥–∞–Ω—ã"] == False:
                   if (condition_cmax1):
                      button_calculation = True

                if button_calculation == True:
                   custom_success('–†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã!')
                else:   
                   st.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã!')
             
             if (list_keys_file_org != []) and dose and measure_unit_org_blood and measure_unit_org_organs and button_calculation:
                
                list_list_PK_par_mean=[]
                for i in list_df_unrounded: 
                    mean_—Åmax=i['Cmax'].loc['mean']
                    mean_tmax=i['Tmax'].loc['mean']
                    mean_mrt0inf=i['MRT0‚Üí‚àû'].loc['mean']
                    mean_thalf=i['T1/2'].loc['mean']
                    mean_auc0t=i['AUC0-t'].loc['mean']
                    mean_auc0inf=i['AUC0‚Üí‚àû'].loc['mean']
                    mean_aumc0inf=i['AUMC0-‚àû'].loc['mean']
                    mean_kel=i['Kel'].loc['mean']
                    list_list_PK_par_mean.append([mean_—Åmax,mean_tmax,mean_mrt0inf,mean_thalf,mean_auc0t,mean_auc0inf,mean_aumc0inf,mean_kel])

                ### –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–≥–∞–Ω–æ–≤
                
                df_PK_organs_total = pd.DataFrame(list_list_PK_par_mean, columns =['Cmax','Tmax','MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-‚àû','Kel'],index=list_name_organs) 
                
                df_PK_organs_total_transpose=df_PK_organs_total.transpose()

                index_blood = list_name_organs.index("–ö—Ä–æ–≤—å")
                ###ft
                list_aucot_for_ft=[]
                list_columns_df_PK_organs_total_transpose=df_PK_organs_total_transpose.columns.tolist()
                list_columns_df_PK_organs_total_transpose.remove('–ö—Ä–æ–≤—å') #–∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∫—Ä–æ–≤–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω —Ç–∞–∫ "–ö—Ä–æ–≤—å"
                for i in list_columns_df_PK_organs_total_transpose:
                    aucot=df_PK_organs_total_transpose[i].loc['AUC0-t']
                    list_aucot_for_ft.append(aucot)

                list_ft=[] ## –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
                list_ft_round=[]
                for i in list_aucot_for_ft:
                    ft=i/df_PK_organs_total_transpose["–ö—Ä–æ–≤—å"].loc['AUC0-t']
                    list_ft.append(ft)
                    list_ft_round.append("%.2f" % round(ft,2))
                list_ft_round.insert(index_blood, "-")

                df_PK_organs_total_transpose.loc[ len(df_PK_organs_total_transpose.index )] = list_ft_round


                df_PK_organs_total_transpose.index=['Cmax ' +"("+measure_unit_org_blood+")",'Tmax ' +"("+f"{measure_unit_org_time}"+")",'MRT0‚Üí‚àû '+"("+f"{measure_unit_org_time}"+")",'T1/2 '+"("+f"{measure_unit_org_time}"+")",'AUC0-t '+"("+measure_unit_org_blood+f"√ó{measure_unit_org_time}" +")",'AUC0‚Üí‚àû '+"("+measure_unit_org_blood+f"√ó{measure_unit_org_time}" +")",'AUMC0-‚àû '+"("+measure_unit_org_blood+f"√ó{measure_unit_org_time}\u00B2" +")",'Kel '+"("+f"{measure_unit_org_time}\u207B\u00B9"+")",'f—Ç']
                
                #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ df_PK_organs_total_transpose

                df_organs_trans_trans=df_PK_organs_total_transpose.transpose()


                series_Cmax=df_organs_trans_trans['Cmax ' +"("+measure_unit_org_blood+")"].tolist() 
                series_Cmax=pd.Series([v for v in series_Cmax])

                series_Tmax=df_organs_trans_trans['Tmax ' +"("+f"{measure_unit_org_time}"+")"].tolist()       
                series_Tmax=pd.Series([v for v in series_Tmax]) 
                
                series_MRT0_inf= df_organs_trans_trans['MRT0‚Üí‚àû '+"("+f"{measure_unit_org_time}"+")"].tolist()   
                series_MRT0_inf=pd.Series([v for v in series_MRT0_inf])

                series_half_live= df_organs_trans_trans['T1/2 '+"("+f"{measure_unit_org_time}"+")"].tolist()   
                series_half_live=pd.Series([v for v in series_half_live]) 

                series_AUC0_t= df_organs_trans_trans['AUC0-t '+"("+measure_unit_org_blood+f"√ó{measure_unit_org_time}" +")"].tolist()   
                series_AUC0_t=pd.Series([v for v in series_AUC0_t])

                series_AUC0_inf= df_organs_trans_trans['AUC0‚Üí‚àû '+"("+measure_unit_org_blood+f"√ó{measure_unit_org_time}" +")"].tolist()  
                series_AUC0_inf=pd.Series([v for v in series_AUC0_inf]) 

                series_AUMC0_inf= df_organs_trans_trans['AUMC0-‚àû '+"("+measure_unit_org_blood+f"√ó{measure_unit_org_time}\u00B2" +")"].tolist()   
                series_AUMC0_inf=pd.Series([v for v in series_AUMC0_inf])
          
                series_Kel= df_organs_trans_trans['Kel '+"("+f"{measure_unit_org_time}\u207B\u00B9"+")"].tolist()   
                series_Kel=pd.Series([v for v in series_Kel])

                series_ft= df_organs_trans_trans['f—Ç'].tolist() ##—É–∂–µ –æ–∫—Ä—É–≥–ª–µ–Ω
                series_ft=pd.Series(series_ft)
                
                df_total_total_organs = pd.concat([series_Cmax,series_Tmax,series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_Kel,series_ft], axis= 1)

                df_total_total_organs.index=df_PK_organs_total_transpose.columns.tolist()
                df_total_total_organs.columns=df_PK_organs_total_transpose.index.tolist() 

                df_total_total_organs_total= df_total_total_organs.transpose()
                df_total_total_organs_total.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å'

                table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∫–∞–Ω—è—Ö'
                list_heading_word.append(table_heading) 

                list_table_word.append(df_total_total_organs_total) 

                ###–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ "–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö"

                ### –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

                list_list_mean_conc=[]
                list_list_std_conc=[]
                for i in list_df_for_mean_unround_for_graphics: 
                    mean_conc_list=i.loc['mean'].tolist()
                    std_conc_list=i.loc['std'].tolist()
                    list_list_mean_conc.append(mean_conc_list)
                    list_list_std_conc.append(std_conc_list)

                list_name_organs_std=[]
                for i in list_name_organs:
                 j= i + " std"
                 list_name_organs_std.append(j)
                
                list_time_new_df = list_t_graph[0]

                #if st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] == True:
                   #list_time_new_df.insert(0,0)

                df_mean_conc_graph = pd.DataFrame(list_list_mean_conc, columns =list_time_new_df,index=list_name_organs)
                df_mean_conc_graph_1=df_mean_conc_graph.transpose()
                df_std_conc_graph = pd.DataFrame(list_list_std_conc, columns =list_time_new_df,index=list_name_organs_std)
                df_std_conc_graph_1=df_std_conc_graph.transpose()
                df_concat_mean_std= pd.concat([df_mean_conc_graph_1,df_std_conc_graph_1],sort=False,axis=1)

                list_colors = ["blue","green","red","#D6870C","violet","gold","indigo","magenta","lime","tan","teal","coral","pink","#510099","lightblue","yellowgreen","cyan","salmon","brown","black"]
                
                list_t_organs=list(df_concat_mean_std.index)

                #if st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] == True:
                   #list_t_organs.remove(0)
                   #df_concat_mean_std=df_concat_mean_std.drop([0])

                list_zip_mean_std_colors=zip(list_name_organs,list_name_organs_std,list_colors)    

                fig, ax = plt.subplots()
                for i,j,c in list_zip_mean_std_colors:
                     plt.errorbar(list_t_organs,df_concat_mean_std[i],yerr=df_concat_mean_std[j],color= c, marker='o',markersize=4.0,markeredgecolor=c,markerfacecolor=c,ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0,label=i)
                     plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_org_time}")
                     plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+ measure_unit_org_blood)
                     ax.legend(fontsize = 5)
                
                list_graphics_word.append(fig)

                graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ –æ—Ä–≥–∞–Ω–∞—Ö'
                list_heading_graphics_word.append(graphic)

                ### –≤ –ø–æ–ª—É–ª–æ–≥. –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

                list_t_organs=list(df_concat_mean_std.index)

                if st.session_state["agree_injection - –æ—Ä–≥–∞–Ω—ã"] == False:
                   list_t_organs.remove(0)
                   df_concat_mean_std=df_concat_mean_std.drop([0])

                list_zip_mean_std_colors=zip(list_name_organs,list_name_organs_std,list_colors)

                fig, ax = plt.subplots()
                for i,j,c in list_zip_mean_std_colors:
                     plt.errorbar(list_t_organs,df_concat_mean_std[i],yerr=df_concat_mean_std[j],color= c, marker='o',markersize=4.0,markeredgecolor=c,markerfacecolor=c,ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0,label=i)
                     ax.set_yscale("log")
                     plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_org_time}")
                     plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+ measure_unit_org_blood)
                     ax.legend(fontsize = 5)
                
                list_graphics_word.append(fig)

                graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ –æ—Ä–≥–∞–Ω–∞—Ö'
                list_heading_graphics_word.append(graphic)

                ###–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è —Ç–∫–∞–Ω–µ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

                #list_zip_list_ft_list_name_organs=zip(list_ft,list_name_organs)
                list_name_organs.remove("–ö—Ä–æ–≤—å")

                fig, ax = plt.subplots()

                sns.barplot(x=list_name_organs, y=list_ft,color='blue',width=0.3)

                plt.ylabel("–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")

                ax.set_xticklabels(list_name_organs,fontdict={'fontsize': 6.0})

                list_graphics_word.append(fig)
                
                graphic='–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö'
                list_heading_graphics_word.append(graphic) 
                

         ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
         st.session_state["list_heading_word"] = list_heading_word
         st.session_state["list_table_word"] = list_table_word
         st.session_state["list_graphics_word"] = list_graphics_word
         st.session_state["list_heading_graphics_word"] = list_heading_graphics_word
   
   #–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

   col1, col2 = st.columns([0.66,0.34])
   
   with col1:

      #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
      if panel == "–¢–∞–±–ª–∏—Ü—ã": 
         if st.session_state["df_total_PK_org"] is not None:
            list_heading_word = st.session_state["list_heading_word"]
            list_table_word = st.session_state["list_table_word"]

            ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
            visualize_table(list_heading_word,list_table_word)

            with col2:
                 
                 selected = option_menu(None, ["C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç"], 
                 icons=['file-earmark-arrow-down-fill'], 
                 menu_icon="cast", default_index=0, orientation="vertical",
                 styles={
                        "container": {"padding": "0!important", "background-color": "#1f3b57"},
                        "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                        "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                        "nav-link-selected": {"background-color": "#73b5f2"},
                 })

                 if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":

                    ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü
                    create_table(list_heading_word,list_table_word)
         else:
             st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

      if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
         if st.session_state["df_total_PK_org"] is not None:

            list_graphics_word = st.session_state["list_graphics_word"]
            list_heading_graphics_word = st.session_state["list_heading_graphics_word"]
            
            #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

            #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
            type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
      ('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∞—Ö", "–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö"),disabled = False, key = "–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - –ò–û" )

            count_graphics_for_visual = len(list_heading_graphics_word)
            list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)
            
            for i in list_range_count_graphics_for_visual:
                if list_heading_graphics_word[i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
                   if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                      st.pyplot(list_graphics_word[i])
                      st.subheader(list_heading_graphics_word[i])
                if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
                   if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                      st.pyplot(list_graphics_word[i])
                      st.subheader(list_heading_graphics_word[i])
                if list_heading_graphics_word[i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
                   if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                      st.pyplot(list_graphics_word[i])
                      st.subheader(list_heading_graphics_word[i])
                if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö"):
                   if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∞—Ö':
                      st.pyplot(list_graphics_word[i])
                      st.subheader(list_heading_graphics_word[i])
                if list_heading_graphics_word[i].__contains__("–¢–∫–∞–Ω–µ–≤–∞—è"):
                   if type_graphics == '–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö':
                      st.pyplot(list_graphics_word[i])
                      st.subheader(list_heading_graphics_word[i])
            
            with col2:
                     
                 selected = option_menu(None, ["C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç"], 
                 icons=['file-earmark-arrow-down-fill'], 
                 menu_icon="cast", default_index=0, orientation="vertical",
                 styles={
                        "container": {"padding": "0!important", "background-color": "#1f3b57"},
                        "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                        "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                        "nav-link-selected": {"background-color": "#73b5f2"},
                 })
                  
                 if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":
                    ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    create_graphic(list_graphics_word,list_heading_graphics_word)
         else:
             st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")
################################################################################################

if option == '–õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è':
   
   st.header('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è')
   
   col1, col2 = st.columns([0.66, 0.34])

   with col1:

      panel = st.radio(
           "‚öôÔ∏è–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
           ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "–¢–∞–±–ª–∏—Ü—ã","–ì—Ä–∞—Ñ–∏–∫–∏"),
           horizontal=True, key= "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ - –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"
       )

      #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
      list_heading_word=[]
      list_table_word=[]
      list_graphics_word=[]
      list_heading_graphics_word=[]

      if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
         
         ######### –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞
         with col2:
              
              selected = option_menu(None, ["–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"], 
                    icons=['menu-button'], 
                    menu_icon="cast", default_index=0, orientation="vertical",
                    styles={
                      "container": {"padding": "0!important", "background-color": "#1f3b57"},
                      "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                      "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                      "nav-link-selected": {"background-color": "#73b5f2"},
                    })

              if selected == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤":
                 type_parameter = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä',
                 ("–í–∏–¥ –≤–≤–µ–¥–µ–Ω–∏—è",'–î–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏'),disabled = False, key = "–í–∏–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å")
                 
              if "agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å" not in st.session_state:
                    st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] = False

              if type_parameter == '–î–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏':

                 st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] = st.checkbox('–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è-–í—Ä–µ–º—è" –æ—Ç—á–µ—Ç–ª–∏–≤–æ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –¥–≤–æ–π–Ω—ã–µ –ø–∏–∫–∏', key = "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å", value = st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"])
                 
                 if st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                    custom_success('–ü–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω!')

              if "agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å" not in st.session_state:
                    st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] = False

              if type_parameter == "–í–∏–¥ –≤–≤–µ–¥–µ–Ω–∏—è":

                 # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                 if "injection_choice - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å" not in st.session_state:
                     st.session_state["injection_choice - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                 # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–≤–µ–¥–µ–Ω–∏—è
                 injection_type = st.radio(
                     "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–≤–µ–¥–µ–Ω–∏—è:",
                     options=["–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ", "–í–Ω–µ—Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ"],
                     index=st.session_state["injection_choice - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"],
                     key="injection_choice_–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å",  # –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤ —Å–µ—Å—Å–∏–∏
                 )

                 # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
                 if injection_type == "–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ":
                     st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] = True
                     st.session_state["injection_choice - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] = 0
                 else:
                     st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] = False
                     st.session_state["injection_choice - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] = 1

                 # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
                 if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"]:
                   custom_success("–í—ã–±—Ä–∞–Ω–æ: –í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ!")
                 else:
                   custom_success("–í—ã–±—Ä–∞–Ω–æ: –í–Ω–µ—Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ!")
         
         measure_unit_lin_time = select_time_unit("–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å")
         measure_unit_lin_concentration = select_concentration_unit("–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å")
         measure_unit_dose_lin = select_dose_unit("–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å")

         #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
         if "index_method_auc - –õ–î" not in st.session_state:
             st.session_state["index_method_auc - –õ–î"] = 0

         method_auc = st.radio("üìà –ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC",('linear',"linear-up/log-down"),key = "–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - –õ–î", index = st.session_state["index_method_auc - –õ–î"])
         
         if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - –õ–î"] == 'linear':
            st.session_state["index_method_auc - –õ–î"] = 0
         if st.session_state["–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - –õ–î"] == "linear-up/log-down":
            st.session_state["index_method_auc - –õ–î"] = 1
            
         custom_alert("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–æ–∫ (–Ω–µ –º–µ–Ω–µ–µ 3-—Ö —Ñ–∞–π–ª–æ–≤); —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–≤–æ–µ–π –¥–æ–∑–∏—Ä–æ–≤–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–æ–∑–∏—Ä–æ–≤–∫–∞ 50'. –ï—Å–ª–∏ –¥–æ–∑–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥c—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, –¥—Ä–æ–±—å –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É. –°–ª–æ–≤–æ '–î–æ–∑–∏—Ä–æ–≤–∫–∞' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ!")
         file_uploader = st.file_uploader("",accept_multiple_files=True, key='–§–∞–π–ª—ã –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è')
         
         if 'list_files_name_doses' not in st.session_state:
             st.session_state['list_files_name_doses'] = []

         ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
         list_files_name_doses = []
         if file_uploader is not None:
            for i in file_uploader:
                save_uploadedfile(i)
                st.session_state[str(i.name)] = i.name
                list_files_name_doses.append(i.name)
         
         st.session_state['list_files_name_doses'] = list_files_name_doses
         
         if st.session_state['list_files_name_doses'] != []: 
              custom_success(f"–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {', '.join(st.session_state['list_files_name_doses'])}")
         
         list_keys_file_lin = []
         for i in st.session_state.keys():
             if i.__contains__("xlsx") and i.__contains__("–î–æ–∑–∏—Ä–æ–≤–∫–∞") and (not i.__contains__("edited_df")): ###—Å–ª–æ–≤–æ –¥–æ–∑–∏—Ä–æ–≤–∫–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ—Ç –¥—Ä—É–≥–∏—Ö xlsx –æ—Ä–≥–∞–Ω–æ–≤, —Ç.–∫ —Ç–∞–º —Ç–æ–∂–µ –∫–ª—é—á–∏ –∏–º—è —Ñ–∞–π–ª–∞; #–æ–±—Ä–µ–∑–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è "edited_df"
                list_keys_file_lin.append(i)

         if (list_keys_file_lin != []) and measure_unit_lin_concentration and measure_unit_dose_lin:

             list_name_doses=[]
             list_df_unrounded=[]
             list_df_for_mean_unround_for_graphics=[]
             list_t_graph=[]
             
             list_keys_file_lin_float = []
             for i in list_keys_file_lin:
                 if "." in i[10:-5]: 
                    list_keys_file_lin_float.append(float(i[10:-5]))
                 else:
                    list_keys_file_lin_float.append(int(i[10:-5]))
             list_keys_file_lin_float.sort()

             list_keys_file_lin = [f"–î–æ–∑–∏—Ä–æ–≤–∫–∞ {str(float)}.xlsx" for float in list_keys_file_lin_float]

             for i in list_keys_file_lin:
                 df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",i))

                 file_name=i[10:-5]

                 st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ measure_unit_dose_lin)
                 
                 ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                 df = edit_frame(df,i)

                 ###–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö 
                 count_rows_number_lin= len(df.axes[0])

                 table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ measure_unit_dose_lin
                 list_heading_word.append(table_heading)

                 ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
                 df_concat_round_str_transpose = create_table_descriptive_statistics(df)['df_concat_round_str_transpose']

                 list_table_word.append(df_concat_round_str_transpose)

                 ########### –≥—Ä–∞—Ñ–∏–∫–∏    
                 
                 ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

                 # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 col_mapping = df.columns.tolist()
                 col_mapping.remove('–ù–æ–º–µ—Ä')

                 count_row_df = len(df.axes[0])

                 list_time = []
                 for i in col_mapping:
                     numer=float(i)
                     list_time.append(numer)
                 list_t_graph.append(list_time) 

                 #if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True: 
                    #list_time.remove(0)

                 for r in range(0,count_row_df):

                     list_concentration=df.iloc[r].tolist()

                     numer_animal=list_concentration[0]

                     list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                     list_concentration = [float(v) for v in list_concentration]

                     #if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                        #list_concentration.remove(0)

                     fig, ax = plt.subplots()
                     plt.plot(list_time,list_concentration,marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                     plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_lin_time}")
                     plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin_concentration)
                     
                     list_graphics_word.append(fig)
        
                     graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ '  +file_name+" "+ measure_unit_dose_lin+',  '+numer_animal
                     list_heading_graphics_word.append(graphic) 

                  #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
                     count_for_0_1=len(list_concentration)
                     list_range_for_0_1=range(0,count_for_0_1)

                     list_time_0=[]
                     list_for_log_1=[]
                     for i in list_range_for_0_1:
                         if list_concentration[i] !=0:
                            list_for_log_1.append(list_concentration[i])
                            list_time_0.append(list_time[i]) 

                     fig, ax = plt.subplots()
                     plt.plot(list_time_0,list_for_log_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black")
                     ax.set_yscale("log")
                     plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_lin_time}")
                     plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin_concentration)

                     
                     list_graphics_word.append(fig)
                     
                     graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ measure_unit_dose_lin+',  '+numer_animal
                     list_heading_graphics_word.append(graphic) 

              # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

                 df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
                 df_for_plot_conc_1 = df_for_plot_conc.transpose()

                 if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                    df_for_plot_conc_1=df_for_plot_conc_1.replace(0, None) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ

                 list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()
                 count_numer_animal = len(list_numer_animal_for_plot) ### –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥—ã

                 list_color = ["blue","green","red","#D6870C","violet","gold","indigo","magenta","lime","tan","teal","coral","pink","#510099","lightblue","yellowgreen","cyan","salmon","brown","black"]

                 fig, ax = plt.subplots()

                 ax.set_prop_cycle(cycler(color=list_color))

                 plt.plot(df_for_plot_conc_1,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

                 ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_lin_time}")
                 ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin_concentration)
                 if count_numer_animal > 20:
                    ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
                 else:
                    ax.legend(bbox_to_anchor=(1, 1))
                 
                 list_graphics_word.append(fig)
                 
                 graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ " +file_name+" "+ measure_unit_dose_lin
                 list_heading_graphics_word.append(graphic) 
          
              # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
                 df_for_plot_conc_1_log=df_for_plot_conc_1.replace(0, None)


                 fig, ax = plt.subplots()

                 ax.set_prop_cycle(cycler(color=list_color))

                 plt.plot(df_for_plot_conc_1_log,marker='o',markersize=4.0,label = list_numer_animal_for_plot)

                 ax.set_xlabel(f"–í—Ä–µ–º—è, {measure_unit_lin_time}")
                 ax.set_ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin_concentration)
                 ax.set_yscale("log")
                 if count_numer_animal > 20:
                    ax.legend(fontsize=(160/count_numer_animal),bbox_to_anchor=(1, 1))
                 else:
                    ax.legend(bbox_to_anchor=(1, 1))
                 
                 list_graphics_word.append(fig)
                 
                 graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ " +file_name+" "+ measure_unit_dose_lin
                 list_heading_graphics_word.append(graphic) 
                  ###—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ    
              # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 list_time = []
                 for i in col_mapping:
                     numer=float(i)
                     list_time.append(numer)

                 df_averaged_concentrations=df.describe()
                 list_concentration=df_averaged_concentrations.loc['mean'].tolist()
                 err_y_1=df_averaged_concentrations.loc['std'].tolist()

                 #if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                    #list_time.remove(0) ###—Ç.–∫. –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ
                    #list_concentration.remove(0)
                    #err_y_1.remove(0)

                 fig, ax = plt.subplots()
                 plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
                 plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_lin_time}")
                 plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin_concentration)
                  
                 list_graphics_word.append(fig)
                 
                 graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ measure_unit_dose_lin
                 list_heading_graphics_word.append(graphic)

              #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 #–¥–ª—è –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º. –ø–æ—Å—Ç–æ—Ä–∏–º –±–µ–∑ –Ω—É–ª—è
                 if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == False:
                    list_time.remove(0)
                    list_concentration.remove(0)
                    err_y_1.remove(0) 

                 fig, ax = plt.subplots()
                 plt.errorbar(list_time,list_concentration,yerr=err_y_1, marker='o',markersize=4.0,color = "black",markeredgecolor="black",markerfacecolor="black",ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0)
                 ax.set_yscale("log")
                 plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_lin_time}")
                 plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_lin_concentration)

                 list_graphics_word.append(fig)
                 
                 graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' +file_name+" "+ measure_unit_dose_lin
                 list_heading_graphics_word.append(graphic)

                 ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

                 if f"agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å {file_name}" not in st.session_state:
                    st.session_state[f"agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å {file_name}"] = False
                 
                 if st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                    st.session_state[f"agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å {file_name}"] = True


                 if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == False:
                     result_PK = pk_parametrs_total_extravascular(df,f"–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å {file_name}",method_auc,float(file_name),measure_unit_lin_concentration,measure_unit_lin_time,measure_unit_dose_lin)
                 else:
                     result_PK = pk_parametrs_total_intravenously(df,f"–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å {file_name}",method_auc,float(file_name),measure_unit_lin_concentration,measure_unit_lin_time,measure_unit_dose_lin)

                 if result_PK is not None:
                     if st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == False:
                        df_total_PK_lin = result_PK["df_total_PK"]
                        df_concat_PK_lin = result_PK["df_concat_PK"]
                        list_cmax_1_lin = result_PK["list_cmax_1"]
                     if st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                        df_total_PK_lin = result_PK["df_total_PK"]
                        df_concat_PK_lin = result_PK["df_concat_PK"]
                        list_cmax_1_lin = result_PK["list_cmax_1"]
                        list_cmax_2_lin = result_PK["list_cmax_2"]
                        df_total_PK_additional_double_peaks_lin = result_PK["df_total_PK_additional_double_peaks"]
                         
                     st.session_state["df_total_PK_lin"] = df_total_PK_lin

                     table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name +" "+ measure_unit_dose_lin
                     list_heading_word.append(table_heading)

                     list_table_word.append(df_total_PK_lin)

                     if st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                        table_heading='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–≤—É—Ö –ø–∏–∫–æ–≤ –≤ –§–ö –ø—Ä–æ—Ñ–∏–ª–µ ' +file_name +" "+ measure_unit_dose_lin
                        list_heading_word.append(table_heading)
                        
                        list_table_word.append(df_total_PK_additional_double_peaks_lin)

                     #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ñ—Ä–µ–π–º–æ–≤, –¥–æ–∑ –∏ —Ç.–¥.

                     ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
                     df_concat = create_table_descriptive_statistics(df)['df_concat']

                     list_name_doses.append(file_name)
                     list_df_unrounded.append(df_concat_PK_lin)
                     list_df_for_mean_unround_for_graphics.append(df_concat)
                 else:
                     st.session_state["df_total_PK_lin"] = None #–¥–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ cmax2, –∞ –ø–æ—Ç–æ–º —Ä–µ—à–∏–ª –≤—Å–µ —Ç–∞–∫–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                     st.error("–í—ã–±–µ—Ä–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π Cmax –∏ Cmax(2)")

             ###–ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
             button_calculation = False
             
             if (list_keys_file_lin != []) and measure_unit_lin_concentration and measure_unit_dose_lin  and result_PK is not None:
              
                condition_cmax1 =  len(list_cmax_1_lin) == count_rows_number_lin
                
                if st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                   condition_cmax2 =  len(list_cmax_2_lin) == count_rows_number_lin
                
                if st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                   if (condition_cmax2):
                      button_calculation = True
                if st.session_state["agree_cmax2 - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == False:
                   if (condition_cmax1):
                      button_calculation = True

                if button_calculation == True:
                   custom_success('–†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã!')
                else:   
                   st.error('üîß–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã!')
             
             if (list_keys_file_lin != []) and measure_unit_lin_concentration and measure_unit_dose_lin and button_calculation:
                
                
                list_list_PK_par_mean=[]
                for i in list_df_unrounded: 
                    mean_—Åmax=i['Cmax'].loc['mean']
                    mean_tmax=i['Tmax'].loc['mean']
                    mean_mrt0inf=i['MRT0‚Üí‚àû'].loc['mean']
                    mean_thalf=i['T1/2'].loc['mean']
                    mean_auc0t=i['AUC0-t'].loc['mean']
                    mean_auc0inf=i['AUC0‚Üí‚àû'].loc['mean']
                    mean_aumc0inf=i['AUMC0-‚àû'].loc['mean']
                    mean_—Åmaxdevaucot=i['–°max/AUC0-t'].loc['mean']
                    mean_kel=i['Kel'].loc['mean']
                    if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == False:
                       mean_cl=i['Cl/F'].loc['mean']
                       mean_vd=i['Vz/F'].loc['mean']
                    else:
                       mean_cl=i['Cl'].loc['mean']
                       mean_vd=i['Vz'].loc['mean']
                    list_list_PK_par_mean.append([mean_—Åmax,mean_tmax,mean_mrt0inf,mean_thalf,mean_auc0t,mean_auc0inf,mean_aumc0inf,mean_—Åmaxdevaucot,mean_kel,mean_cl,mean_vd]) 

                list_name_doses_with_measure_unit=[]
                for i in list_name_doses:
                 j= i + " " + measure_unit_dose_lin
                 list_name_doses_with_measure_unit.append(j)

                ### –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–∑
                if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == False:
                   df_PK_doses_total = pd.DataFrame(list_list_PK_par_mean, columns =['Cmax ' +"("+measure_unit_lin_concentration+")",'Tmax ' +"("+f"{measure_unit_lin_time}"+")",'MRT0‚Üí‚àû '+"("+f"{measure_unit_lin_time}"+")",'T1/2 '+"("+f"{measure_unit_lin_time}"+")",'AUC0-t '+"("+measure_unit_lin_concentration+f"√ó{measure_unit_lin_time}" +")",'AUC0‚Üí‚àû '+"("+measure_unit_lin_concentration+f"√ó{measure_unit_lin_time}" +")",'AUMC0-‚àû '+"("+measure_unit_lin_concentration+f"√ó{measure_unit_lin_time}\u00B2" +")",'–°max/AUC0-t '+"("+f"{measure_unit_lin_time}\u207B\u00B9"+")",'Kel '+"("+f"{measure_unit_lin_time}\u207B\u00B9"+")",'Cl/F ' +"("+f"({measure_unit_dose_lin})/({measure_unit_lin_concentration})/{measure_unit_lin_time}"+")",'Vz/F ' +"("+f"({measure_unit_dose_lin})/({measure_unit_lin_concentration})"+")"],index=list_name_doses_with_measure_unit)
                else:
                   df_PK_doses_total = pd.DataFrame(list_list_PK_par_mean, columns =['Cmax ' +"("+measure_unit_lin_concentration+")",'Tmax ' +"("+f"{measure_unit_lin_time}"+")",'MRT0‚Üí‚àû '+"("+f"{measure_unit_lin_time}"+")",'T1/2 '+"("+f"{measure_unit_lin_time}"+")",'AUC0-t '+"("+measure_unit_lin_concentration+f"√ó{measure_unit_lin_time}" +")",'AUC0‚Üí‚àû '+"("+measure_unit_lin_concentration+f"√ó{measure_unit_lin_time}" +")",'AUMC0-‚àû '+"("+measure_unit_lin_concentration+f"√ó{measure_unit_lin_time}\u00B2" +")",'–°max/AUC0-t '+"("+f"{measure_unit_lin_time}\u207B\u00B9"+")",'Kel '+"("+f"{measure_unit_lin_time}\u207B\u00B9"+")",'Cl ' +"("+f"({measure_unit_dose_lin})/({measure_unit_lin_concentration})/{measure_unit_lin_time}"+")",'Vz ' +"("+f"({measure_unit_dose_lin})/({measure_unit_lin_concentration})"+")"],index=list_name_doses_with_measure_unit)
                
                df_PK_doses_total_transpose=df_PK_doses_total.transpose()

                #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ df_PK_doses_total_transpose

                df_doses_trans_trans=df_PK_doses_total_transpose.transpose()

                series_Cmax=df_doses_trans_trans['Cmax ' +"("+measure_unit_lin_concentration+")"].tolist() 
                series_Cmax=pd.Series([v for v in series_Cmax])

                series_Tmax=df_doses_trans_trans['Tmax ' +"("+f"{measure_unit_lin_time}"+")"].tolist()       
                series_Tmax=pd.Series([v for v in series_Tmax])

                series_MRT0_inf= df_doses_trans_trans['MRT0‚Üí‚àû '+"("+f"{measure_unit_lin_time}"+")"].tolist()   
                series_MRT0_inf=pd.Series([v for v in series_MRT0_inf])

                series_half_live= df_doses_trans_trans['T1/2 '+"("+f"{measure_unit_lin_time}"+")"].tolist()   
                series_half_live=pd.Series([v for v in series_half_live]) 

                series_AUC0_t= df_doses_trans_trans['AUC0-t '+"("+measure_unit_lin_concentration+f"√ó{measure_unit_lin_time}" +")"].tolist()   
                series_AUC0_t=pd.Series([v for v in series_AUC0_t])

                series_AUC0_inf= df_doses_trans_trans['AUC0‚Üí‚àû '+"("+measure_unit_lin_concentration+f"√ó{measure_unit_lin_time}" +")"].tolist()  
                series_AUC0_inf=pd.Series([v for v in series_AUC0_inf]) 

                series_AUMC0_inf= df_doses_trans_trans['AUMC0-‚àû '+"("+measure_unit_lin_concentration+f"√ó{measure_unit_lin_time}\u00B2" +")"].tolist()   
                series_AUMC0_inf=pd.Series([v for v in series_AUMC0_inf])

                series_–°max_dev_AUC0_t= df_doses_trans_trans['–°max/AUC0-t '+"("+f"{measure_unit_lin_time}\u207B\u00B9"+")"].tolist()  
                series_–°max_dev_AUC0_t=pd.Series([v for v in series_–°max_dev_AUC0_t]) 

                series_Kel= df_doses_trans_trans['Kel '+"("+f"{measure_unit_lin_time}\u207B\u00B9"+")"].tolist()   
                series_Kel=pd.Series([v for v in series_Kel])
                
                if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == False:
                   series_CL= df_doses_trans_trans['Cl/F ' +"("+f"({measure_unit_dose_lin})/({measure_unit_lin_concentration})/{measure_unit_lin_time}"+")"].tolist()  
                   series_CL=pd.Series([v for v in series_CL]) 

                   series_Vd= df_doses_trans_trans['Vz/F ' +"("+f"({measure_unit_dose_lin})/({measure_unit_lin_concentration})"+")"].tolist()   
                   series_Vd=pd.Series([v for v in series_Vd])
                else:
                   series_CL= df_doses_trans_trans['Cl ' +"("+f"({measure_unit_dose_lin})/({measure_unit_lin_concentration})/{measure_unit_lin_time}"+")"].tolist()  
                   series_CL=pd.Series([v for v in series_CL]) 

                   series_Vd= df_doses_trans_trans['Vz ' +"("+f"({measure_unit_dose_lin})/({measure_unit_lin_concentration})"+")"].tolist()   
                   series_Vd=pd.Series([v for v in series_Vd])
                
                df_total_total_doses = pd.concat([series_Cmax, series_Tmax,series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_–°max_dev_AUC0_t,series_Kel,series_CL,series_Vd], axis= 1)

                df_total_total_doses.index=df_PK_doses_total_transpose.columns.tolist()
                df_total_total_doses.columns=df_PK_doses_total_transpose.index.tolist() 

                df_total_total_doses_total= df_total_total_doses.transpose()
                df_total_total_doses_total.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å'
             
                table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö'
                list_heading_word.append(table_heading)

                list_table_word.append(df_total_total_doses_total)

                ###–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ "–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö"

                ### –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                list_list_mean_conc=[]
                list_list_std_conc=[]
                for i in list_df_for_mean_unround_for_graphics: 
                    mean_conc_list=i.loc['mean'].tolist()
                    std_conc_list=i.loc['std'].tolist()
                    list_list_mean_conc.append(mean_conc_list)
                    list_list_std_conc.append(std_conc_list)

                list_name_doses_with_measure_unit_std=[]
                for i in list_name_doses_with_measure_unit:
                 j= i + " std"
                 list_name_doses_with_measure_unit_std.append(j)

                list_time_new_df = list_t_graph[0]

                #if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                   #list_time_new_df.insert(0,0)

                df_mean_conc_graph = pd.DataFrame(list_list_mean_conc, columns =list_time_new_df,index=list_name_doses_with_measure_unit)
                df_mean_conc_graph_1=df_mean_conc_graph.transpose()
                df_std_conc_graph = pd.DataFrame(list_list_std_conc, columns =list_time_new_df,index=list_name_doses_with_measure_unit_std)
                df_std_conc_graph_1=df_std_conc_graph.transpose()
                df_concat_mean_std= pd.concat([df_mean_conc_graph_1,df_std_conc_graph_1],sort=False,axis=1)

                list_colors = ["black","red","blue","green","#D6870C"]

                list_t_doses=list(df_concat_mean_std.index)

                #if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == True:
                   #list_t_doses.remove(0)
                   #df_concat_mean_std=df_concat_mean_std.drop([0])
                    
                list_zip_mean_std_colors=zip(list_name_doses_with_measure_unit,list_name_doses_with_measure_unit_std,list_colors)

                fig, ax = plt.subplots()
                for i,j,c in list_zip_mean_std_colors:
                     plt.errorbar(list_t_doses,df_concat_mean_std[i],yerr=df_concat_mean_std[j],color= c, marker='o',markersize=4.0,markeredgecolor=c,markerfacecolor=c,ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0,label=i)
                     plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_lin_time}")
                     plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+ measure_unit_lin_concentration)
                     ax.legend(fontsize = 8)
               
                list_graphics_word.append(fig)

                graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö'
                list_heading_graphics_word.append(graphic) 

                ### –≤ –ø–æ–ª—É–ª–æ–≥. –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

                list_t_doses=list(df_concat_mean_std.index)

                if st.session_state["agree_injection - –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å"] == False:
                   list_t_doses.remove(0)
                   df_concat_mean_std=df_concat_mean_std.drop([0])
                
                list_zip_mean_std_colors=zip(list_name_doses_with_measure_unit,list_name_doses_with_measure_unit_std,list_colors)

                fig, ax = plt.subplots()
                for i,j,c in list_zip_mean_std_colors:
                     plt.errorbar(list_t_doses,df_concat_mean_std[i],yerr=df_concat_mean_std[j],color= c, marker='o',markersize=4.0,markeredgecolor=c,markerfacecolor=c,ecolor="black",elinewidth=0.8,capsize=2.0,capthick=1.0,label=i)
                     ax.set_yscale("log")
                     plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_lin_time}")
                     plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+ measure_unit_lin_concentration)
                     ax.legend(fontsize = 8)
                
                list_graphics_word.append(fig)

                graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö'
                list_heading_graphics_word.append(graphic)
                
                # –õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å
                list_AUC0_inf_lin = []
                for i in list_df_unrounded: 
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è AUC0‚Üí‚àû –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ–∑—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                    mean_auc0inf = i['AUC0‚Üí‚àû'][:'count'].iloc[:-1].to_list()
                    list_AUC0_inf_lin.extend(mean_auc0inf)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º extend, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–∑–∏—Ä–æ–≤–æ–∫, –ø–æ–≤—Ç–æ—Ä—è—è –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
                list_name_doses_lin_float = [float(dose) for dose in list_name_doses for _ in range(len(mean_auc0inf))]

                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                df_for_lin = pd.DataFrame({
                    'AUC0‚Üí‚àû': list_AUC0_inf_lin,
                    'doses': list_name_doses_lin_float
                })

                # –ó–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                AUC0_inf = df_for_lin['AUC0‚Üí‚àû']

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –º–æ–¥–µ–ª–∏
                doses_with_const = sm.add_constant(df_for_lin['doses'])

                # –°—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                model = sm.OLS(AUC0_inf, doses_with_const).fit()
                
                df1_model = int(round(model.df_model,0))
                st.session_state['df1_model_lin'] = df1_model
                df2_model = int(round(model.df_resid,0))
                st.session_state['df2_model_lin'] = df2_model
                
                print_model = model.summary()

                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏
                #st.write(print_model)

                graphic='–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π AUC0‚Üí‚àû –æ—Ç –≤–µ–ª–∏—á–∏–Ω –≤–≤–æ–¥–∏–º—ã—Ö –¥–æ–∑'
                list_heading_graphics_word.append(graphic)

                # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                list_AUC0_inf_lin_mean = []
                for i in list_df_unrounded: 
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è AUC0‚Üí‚àû –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ–∑—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                    mean_auc0_inf_mean = i['AUC0‚Üí‚àû'].loc['mean']
                    list_AUC0_inf_lin_mean.append(mean_auc0_inf_mean)
                
                list_name_doses_lin_float = [float(i) for i in list_name_doses]


                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                df_for_lin_mean = pd.DataFrame({
                    'AUC0‚Üí‚àû_mean': list_AUC0_inf_lin_mean,
                    'doses': list_name_doses_lin_float
                })

                ###–≥—Ä–∞—Ñ–∏–∫
                fig, ax = plt.subplots()
                sns.regplot(x='doses',y='AUC0‚Üí‚àû_mean',data=df_for_lin_mean, color="black",ci=None,scatter_kws = {'s': 30}, line_kws = {'linewidth': 1})
                plt.xlabel("–î–æ–∑–∏—Ä–æ–≤–∫–∞, " +measure_unit_dose_lin)
                plt.ylabel("AUC0‚Üí‚àû, "+ measure_unit_lin_concentration + f"*{measure_unit_lin_time}")
                plt.annotate('y = ' + "%.4f" % round(model.params[1],4) +'x ' + "%.4f" % round(model.params[0],4), xy =(110, 530),xytext =(110, 530),fontsize=10)
                plt.annotate(r"$y = %.4f x + %.4f$" % (round(model.params[1], 4), round(model.params[0], 4)), xy=(110, 530), xytext=(110, 530), fontsize=10)
                
                list_graphics_word.append(fig)

                graphic='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AUC0‚Üí‚àû'
                list_heading_graphics_word.append(graphic)

                # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                fig, ax = plt.subplots()
                table_data_first=[
                 ["R","R¬≤","F","df1","df2","p"],
                 ["%.3f" % round(np.sqrt(model.rsquared),3),"%.3f" % round(model.rsquared,3), "%.1f" % round(model.fvalue,1),int(round(model.df_model,0)),int(round(model.df_resid,0)), format_pvalue(model.pvalues[1])]
                 ]
                table = ax.table(cellText=table_data_first,cellLoc='left',bbox = [0, 0.7, 0.7, 0.1])
                plt.annotate('Model Fit Measures', xy =(0, 0.9),xytext =(0, 0.9),fontsize=10)
                plt.annotate('Overall Model Test', xy =(0, 0.85),xytext =(0, 0.85),fontsize=10)
                table_data_second=[
                 ['Predictor','Estimate','SE','t','p'],
                 ["Intercept","%.2f" % round(model.params[0],2),"%.3f" % round(model.bse[0],3),"%.2f" % round(model.tvalues[0],2), format_pvalue(model.pvalues[0]),],
                 ["B","%.2f" % round(model.params[1],2),"%.3f" % round(model.bse[1],3),"%.2f" % round(model.tvalues[1],2), format_pvalue(model.pvalues[1])]
                 ]
                table = ax.table(cellText=table_data_second,cellLoc='left',bbox = [0, 0.35, 0.7, 0.2])
                plt.annotate('Model Coefficients', xy =(0, 0.6),xytext =(0, 0.6),fontsize=10)
                plt.axis('off')
                
                list_graphics_word.append(fig)

         ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
         st.session_state["list_heading_word"] = list_heading_word
         st.session_state["list_table_word"] = list_table_word
         st.session_state["list_graphics_word"] = list_graphics_word
         st.session_state["list_heading_graphics_word"] = list_heading_graphics_word

   #–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

   col1, col2 = st.columns([0.66,0.34])
   
   with col1:      
      
      #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
      if panel == "–¢–∞–±–ª–∏—Ü—ã":
         if st.session_state["df_total_PK_lin"] is not None: 
      
            list_heading_word = st.session_state["list_heading_word"]
            list_table_word = st.session_state["list_table_word"]
            
            ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
            visualize_table(list_heading_word,list_table_word)

            with col2:
                 
                 selected = option_menu(None, ["C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç"], 
                 icons=['file-earmark-arrow-down-fill'], 
                 menu_icon="cast", default_index=0, orientation="vertical",
                 styles={
                        "container": {"padding": "0!important", "background-color": "#1f3b57"},
                        "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                        "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                        "nav-link-selected": {"background-color": "#73b5f2"},
                 })

                 if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":

                    ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü
                    create_table(list_heading_word,list_table_word)
         else:
             st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

      if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
         if st.session_state["df_total_PK_lin"] is not None: 
            list_graphics_word = st.session_state["list_graphics_word"]
            list_heading_graphics_word = st.session_state["list_heading_graphics_word"]
                
            #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

            #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
            type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
      ('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π AUC0‚Üí‚àû –æ—Ç –≤–µ–ª–∏—á–∏–Ω –≤–≤–æ–¥–∏–º—ã—Ö –¥–æ–∑", "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AUC0‚Üí‚àû"),disabled = False, key = "–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - –ò–û" )

            count_graphics_for_visual = len(list_heading_graphics_word)
            list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)
            
            for i in list_range_count_graphics_for_visual:
                if list_heading_graphics_word[i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
                   if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                      st.pyplot(list_graphics_word[i])
                      st.subheader(list_heading_graphics_word[i])
                if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
                   if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                      st.pyplot(list_graphics_word[i])
                      st.subheader(list_heading_graphics_word[i])
                if list_heading_graphics_word[i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
                   if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                      st.pyplot(list_graphics_word[i])
                      st.subheader(list_heading_graphics_word[i])
                if list_heading_graphics_word[i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö"):
                   if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö':
                      st.pyplot(list_graphics_word[i])
                      st.subheader(list_heading_graphics_word[i])
                if list_heading_graphics_word[i].__contains__("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"):
                   if type_graphics == '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π AUC0‚Üí‚àû –æ—Ç –≤–µ–ª–∏—á–∏–Ω –≤–≤–æ–¥–∏–º—ã—Ö –¥–æ–∑':
                      st.pyplot(list_graphics_word[i])
                      st.subheader(list_heading_graphics_word[i])
                if list_heading_graphics_word[i].__contains__("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"):
                   if type_graphics == '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AUC0‚Üí‚àû':

                      col3, col4 = st.columns([2, 1])

                      with col3:
                           st.pyplot(list_graphics_word[i])
                           st.subheader(list_heading_graphics_word[i])

                      with col4:
                           # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                           st.text("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ F")

                           # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏
                           if 'alpha' not in st.session_state:
                               st.session_state.alpha = 0.05

                           if 'df1' not in st.session_state:
                               st.session_state.df1 = st.session_state['df1_model_lin']

                           if 'df2' not in st.session_state:
                               st.session_state.df2 = st.session_state['df2_model_lin']

                           # –í–≤–æ–¥ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (alpha)
                           alpha = st.number_input("–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (alpha)", min_value=0.01, max_value=0.10, value=st.session_state.alpha, step=0.01, format="%.2f")

                           # –í–≤–æ–¥ —Å—Ç–µ–ø–µ–Ω–µ–π —Å–≤–æ–±–æ–¥—ã –¥–ª—è —á–∏—Å–ª–∏—Ç–µ–ª—è (df1)
                           df1 = st.number_input("–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã –¥–ª—è —á–∏—Å–ª–∏—Ç–µ–ª—è (df1)", min_value=1, value=st.session_state.df1, step=1)

                           # –í–≤–æ–¥ —Å—Ç–µ–ø–µ–Ω–µ–π —Å–≤–æ–±–æ–¥—ã –¥–ª—è –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è (df2)
                           df2 = st.number_input("–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã –¥–ª—è –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è (df2)", min_value=1, value=st.session_state.df2, step=1)

                           # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
                           st.session_state.alpha = alpha
                           st.session_state.df1 = df1
                           st.session_state.df2 = df2

                           # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                           if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
                               f_critical = calculate_f_critical(alpha, df1, df2)
                               st.write(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ F: {f_critical:.3f}")

            with col2:
                     
                 selected = option_menu(None, ["C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç"], 
                 icons=['file-earmark-arrow-down-fill'], 
                 menu_icon="cast", default_index=0, orientation="vertical",
                 styles={
                        "container": {"padding": "0!important", "background-color": "#1f3b57"},
                        "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                        "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                        "nav-link-selected": {"background-color": "#73b5f2"},
                 })
                  
                 if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":
                    ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    create_graphic(list_graphics_word,list_heading_graphics_word)
         else:
             st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

###########################################################################################
if option == '–≠–∫—Å–∫—Ä–µ—Ü–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞':
    
    st.header('–ò–∑—É—á–µ–Ω–∏–µ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')

    col1, col2 = st.columns([0.66, 0.34])
    
    ####### –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
    with col1:         
         panel = st.radio(
            "‚öôÔ∏è–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "–¢–∞–±–ª–∏—Ü—ã","–ì—Ä–∞—Ñ–∏–∫–∏"),
            horizontal=True, key= "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ - –ò–∑—É—á–µ–Ω–∏–µ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞"
         )
                     
         #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
         list_heading_word=[]
         list_table_word=[]
         list_graphics_word=[]
         list_heading_graphics_word=[]

         if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
            

            #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "type_ex"
            if "index_type_ex" not in st.session_state:
                st.session_state["index_type_ex"] = 0

            type_excretion = st.radio('üß¥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏',('–§–µ–∫–∞–ª–∏–∏', '–ú–æ—á–∞', '–ñ–µ–ª—á—å'), key = "–í–∏–¥ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏",index = st.session_state["index_type_ex"])
            
            if st.session_state["–í–∏–¥ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏"] == '–§–µ–∫–∞–ª–∏–∏':
               st.session_state["index_type_ex"] = 0
            if st.session_state["–í–∏–¥ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏"] == '–ú–æ—á–∞':
               st.session_state["index_type_ex"] = 1
            if st.session_state["–í–∏–¥ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏"] == '–ñ–µ–ª—á—å':
               st.session_state["index_type_ex"] = 2

            if type_excretion == '–§–µ–∫–∞–ª–∏–∏':
               excretion_tv = "—Ñ–µ–∫–∞–ª–∏—è–º–∏"
               excretion_pr = "—Ñ–µ–∫–∞–ª–∏—è—Ö"
            if type_excretion == '–ú–æ—á–∞':
               excretion_tv = "–º–æ—á–æ–π"
               excretion_pr = "–º–æ—á–µ"
            if type_excretion == '–ñ–µ–ª—á—å':
               excretion_tv = "–∂–µ–ª—á—å—é"
               excretion_pr = "–∂–µ–ª—á–∏"

            st.subheader('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å ' + excretion_tv)

            measure_unit_ex_time =select_time_unit("—ç–∫—Å–∫—Ä–µ—Ü–∏—è")
            measure_unit_ex_concentration = select_concentration_unit("—ç–∫—Å–∫—Ä–µ—Ü–∏—è")

            uploaded_file_excrement = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç XLSX)", key="–§–∞–π–ª —ç–∫—Å–∫—Ä–µ—Ü–∏–∏")

            if uploaded_file_excrement is not None:
                save_uploadedfile(uploaded_file_excrement)
                st.session_state["uploaded_file_excrement"] = uploaded_file_excrement.name
            
            if "uploaded_file_excrement" in st.session_state: 
               custom_success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {st.session_state['uploaded_file_excrement']}")

            if "uploaded_file_excrement" in st.session_state and measure_unit_ex_concentration:
                
                df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_excrement"]))
                st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ ' + excretion_pr)
                
                ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                df = edit_frame(df,st.session_state["uploaded_file_excrement"])

                table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ ' + excretion_pr
                list_heading_word.append(table_heading) 

                ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
                df_concat_round_str_transpose = create_table_descriptive_statistics(df)['df_concat_round_str_transpose']

                list_table_word.append(df_concat_round_str_transpose)

                ########### –¥–∏–∞–≥—Ä–∞–º–º–∞    
                
                col_mapping = df.columns.tolist()
                col_mapping.remove('–ù–æ–º–µ—Ä')

                list_time = []
                for i in col_mapping:
                    numer=float(i)
                    list_time.append(numer)
                
                df_averaged_concentrations=df.describe()
                list_concentration=df_averaged_concentrations.loc['mean'].tolist()

                list_concentration.remove(0)
                list_time.remove(0)

                fig, ax = plt.subplots()

                sns.barplot(x=list_time, y=list_concentration,color='blue',width=0.5)
                plt.xlabel(f"–í—Ä–µ–º—è, {measure_unit_ex_time}")
                plt.ylabel("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è, "+measure_unit_ex_concentration)

                list_graphics_word.append(fig)

                graphic='–í—ã–≤–µ–¥–µ–Ω–∏–µ —Å ' + excretion_tv
                list_heading_graphics_word.append(graphic)
            else:
               st.write("")    
            
            ##############################################################################################################

            ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
            st.session_state["list_heading_word"] = list_heading_word
            st.session_state["list_table_word"] = list_table_word
            st.session_state["list_graphics_word"] = list_graphics_word
            st.session_state["list_heading_graphics_word"] = list_heading_graphics_word
         
    #–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    col1, col2 = st.columns([0.66,0.34])
    
    with col1:

       #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
       if panel == "–¢–∞–±–ª–∏—Ü—ã":

             list_heading_word = st.session_state["list_heading_word"]
             list_table_word = st.session_state["list_table_word"]

             ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
             visualize_table(list_heading_word,list_table_word)

             with col2:
                  
                  selected = option_menu(None, ["C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç"], 
                  icons=['file-earmark-arrow-down-fill'], 
                  menu_icon="cast", default_index=0, orientation="vertical",
                  styles={
                     "container": {"padding": "0!important", "background-color": "#1f3b57"},
                     "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                     "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                     "nav-link-selected": {"background-color": "#73b5f2"},
                  })

                  if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":

                     ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü
                     create_table(list_heading_word,list_table_word)

       if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
             
             list_graphics_word = st.session_state["list_graphics_word"]
             list_heading_graphics_word = st.session_state["list_heading_graphics_word"]

             #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

             count_graphics_for_visual = len(list_heading_graphics_word)
             list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)
             
             for i in list_range_count_graphics_for_visual:
                 if list_heading_graphics_word[i].__contains__("–í—ã–≤–µ–¥–µ–Ω–∏–µ"):
                    st.pyplot(list_graphics_word[i])
                    st.subheader(list_heading_graphics_word[i])
                    
             with col2:
             
                  selected = option_menu(None, ["C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç"], 
                  icons=['file-earmark-arrow-down-fill'], 
                  menu_icon="cast", default_index=0, orientation="vertical",
                  styles={
                     "container": {"padding": "0!important", "background-color": "#1f3b57"},
                     "icon": {"color": "#cbe4de", "font-size": "16px"}, 
                     "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#92c4e6","color": "#ffffff"},
                     "nav-link-selected": {"background-color": "#73b5f2"},
                  })
                   
                  if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":
                     ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                     create_graphic(list_graphics_word,list_heading_graphics_word) 


st.sidebar.caption('¬© 2024. –¶–µ–Ω—Ç—Ä –±–∏–æ—Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π')

