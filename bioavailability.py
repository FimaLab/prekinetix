###### –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
import streamlit as st

#–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
st.set_page_config(page_title="–î–æ–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", page_icon="favicon.png", layout="centered", initial_sidebar_state="auto", menu_items=None)

import pandas as pd
import numpy as np
import statistics  
import statsmodels.api as sm
import os
from utils.functions import *
from utils.functions_graphics import *
from utils.functions_calculation import *
from utils.radio_unit import *
from style_python.style import *
import re

from streamlit_sortables import sort_items


with open('style.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

#–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π python
style_python()

####### –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

st.sidebar.image("logo-new.png", width=110)

####### –õ–µ–≤–æ–µ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é

st.sidebar.markdown('<h3 style="color:white; padding-bottom: 0; padding-left: 5px;">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</h3>', unsafe_allow_html=True)

option = st.sidebar.selectbox('',
    ('–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∞','–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ä–≥–∞–Ω–∞–º', '–õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è','–≠–∫—Å–∫—Ä–µ—Ü–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞'),disabled = False, key = "–í–∏–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

############### —Ñ–∞–π–ª –ø—Ä–∏–º–µ—Ä

df_example_file = pd.read_excel("server_example_file.xlsx")
df_example_file_xlsx = to_excel(df_example_file)
st.sidebar.download_button(label='–ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ üóÇÔ∏è', data=df_example_file_xlsx , file_name= 'example_file.xlsx')

############ –ø–∞–º—è—Ç–∫–∞

text_contents = '''1)–û–≥–ª–∞–≤–ª—è—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ —Å–ª–æ–≤–æ ¬´–ù–æ–º–µ—Ä¬ª (–≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ).
2)–ó–Ω–∞–∫ ¬´‚Ññ¬ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É. 
3) –ù–µ —Å—Ç–∞–≤–∏—Ç—å –≤ —è—á–µ–π–∫–∏ –∑–Ω–∞–∫ ¬´-¬ª –≤ —Å–ª—É—á–∞–µ –Ω—É–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –°—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ ¬´0¬ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
4)–ù–∏ –≤ –∫–∞–∫–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ.
'''
st.sidebar.download_button('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é üìù', text_contents)

#–ò–Ω–∏–∑–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—Ä–µ–π–º–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
initializing_session_state_frames_research_results(['–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∞','–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ä–≥–∞–Ω–∞–º', '–õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è'])

###############################
if option == '–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∞':

    st.header('–†–∞—Å—á–µ—Ç —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')

    col1, col2 = st.columns([0.66, 0.34])
   
    ####### –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
    with col1:
        
        panel = main_radio_button_study(option)
      
        initialization_dose_infusion_time_session(option)

        #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
        list_heading_word=[]
        list_table_word=[]
        list_graphics_word=[]
        list_heading_graphics_word=[]
        initializing_session_lists_tables_graphics(option,list_heading_word,list_table_word,list_graphics_word,list_heading_graphics_word)

        if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
           
           if f"file_name_{option}" not in st.session_state:
            st.session_state[f"file_name_{option}"] = '¬´–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞¬ª'

           file_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–µ–π:", st.session_state[f"file_name_{option}"], key = f"key_file_name_{option}")
           
           st.session_state[f"file_name_{option}"] = file_name
           
           ######### –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞
           with col2:
                
                #–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                settings_additional_research_parameters(option,custom_success)
           
           measure_unit_pk_time  = select_time_unit(f"select_time_unit{option}")
           measure_unit_pk_concentration  = select_concentration_unit(f"select_concentration_unit{option}")
           measure_unit_pk_dose  = select_dose_unit(f"select_dose_unit{option}")
           #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
           save_session_state_measure_unit_value(measure_unit_pk_time,measure_unit_pk_concentration,f"{option}",measure_unit_pk_dose) 

           #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
           if f"index_method_auc - {option}" not in st.session_state:
               st.session_state[f"index_method_auc - {option}"] = 0

           method_auc = st.radio("üìà –ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC",('linear',"linear-up/log-down"),key = f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}", index = st.session_state[f"index_method_auc - {option}"])
           
           if st.session_state[f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}"] == 'linear':
              st.session_state[f"index_method_auc - {option}"] = 0
           if st.session_state[f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}"] == "linear-up/log-down":
              st.session_state[f"index_method_auc - {option}"] = 1
           
           if st.session_state[f"agree_injection - {option}"] == "intravenously":
              # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
              if f"extrapolate_first_points_{option}" not in st.session_state:
                  st.session_state[f"extrapolate_first_points_{option}"] = False

              # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ–∫–±–æ–∫—Å–∞
              extrapolate_first_points = st.checkbox(
                  "–≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç–æ—á–µ–∫",
                  value=st.session_state[f"extrapolate_first_points_{option}"],
                  key = "key" + f"extrapolate_first_points_{option}"
              )

              st.session_state[f"extrapolate_first_points_{option}"] = extrapolate_first_points

           uploaded_file_pk = st.file_uploader(f"–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π {file_name} (—Ñ–æ—Ä–º–∞—Ç XLSX)", key=f'–§–∞–π–ª –≤–≤–µ–¥–µ–Ω–∏—è {file_name} –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ {option}')
           
           #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
           if uploaded_file_pk is not None:
              save_uploadedfile(uploaded_file_pk)
              st.session_state[f"uploaded_file_{option}"] = uploaded_file_pk.name

           if f'uploaded_file_{option}' in st.session_state:
              custom_success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {st.session_state[f'uploaded_file_{option}']}")
              

           dose_pk = st.text_input(f"–î–æ–∑–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ {file_name}", key=f'–î–æ–∑–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ {file_name} –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ {option}', value = st.session_state[f"dose_{option}"])
           
           st.session_state[f"dose_{option}"] = dose_pk

           if st.session_state[f"agree_injection - {option}"] == "infusion":
              
              infusion_time = st.text_input("–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ñ—É–∑–∏–∏", key=f'–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ñ—É–∑–∏–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ {option}', value = st.session_state[f"infusion_time_{option}"])
              st.session_state[f"infusion_time_{option}"] = infusion_time
           
           if (f"uploaded_file_{option}" in st.session_state and dose_pk and (st.session_state[f"agree_injection - {option}"] == "infusion" and st.session_state[f"infusion_time_{option}"] != "") and st.session_state[f'measure_unit_{option}_concentration']):
              start = True
           elif (f"uploaded_file_{option}" in st.session_state and dose_pk and (st.session_state[f"agree_injection - {option}"] != "infusion" and st.session_state[f"infusion_time_{option}"] == "") and st.session_state[f'measure_unit_{option}_concentration']):
              start = True
           else:
              start = False

           if start:

              df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state[f"uploaded_file_{option}"]))

              st.subheader(f'–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è {file_name}')
              
              ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
              df = edit_frame(df,st.session_state[f"uploaded_file_{option}"])
           
              ###–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö 
              count_rows_number_pk= len(df.axes[0])
        
              table_heading=f'–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è {file_name}'
              add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)

              ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
              df_stats = create_table_descriptive_statistics(df)
              # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∫–æ–ª–æ–Ω–∫—É "–ù–æ–º–µ—Ä"
              df_stats_reset = df_stats.reset_index()
              # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –∏–Ω–¥–µ–∫—Å–∞
              df_stats_reset.rename(columns={'index': '–ù–æ–º–µ—Ä'}, inplace=True)
              # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (–Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ df)
              df_stats_reset.index = range(df.index.max() + 1, df.index.max() + 1 + len(df_stats_reset))
              # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
              df_concat_round_str_transpose = pd.concat([df, df_stats_reset], axis=0, ignore_index=False)

              
              add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_concat_round_str_transpose)

              
              ########### –≥—Ä–∞—Ñ–∏–∫–∏    

              ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

              # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              col_mapping = df.columns.tolist()
              col_mapping.remove('–ù–æ–º–µ—Ä')

              count_row_df = len(df.axes[0])

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)

              list_time = remove_first_element(st.session_state[f"agree_injection - {option}"], list_time)

              list_number_animal = []
              
              for r in range(0,count_row_df):

                  list_concentration=df.iloc[r].tolist()

                  numer_animal=list_concentration[0]

                  list_number_animal.append(numer_animal)

                  list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                  list_concentration = [float(v) for v in list_concentration]

                  list_concentration = remove_first_element(st.session_state[f"agree_injection - {option}"], list_concentration)

                  graphic=f'–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è {file_name},  '+numer_animal
                  graph_id = graphic
                  add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                  first_creating_create_individual_graphics(graph_id,list_time,list_concentration,st.session_state[f'measure_unit_{option}_time'],
                                                            st.session_state[f'measure_unit_{option}_concentration'],"lin",add_or_replace_df_graph, 
                                                            (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                           st.session_state[f"list_graphics_word_{option}"],graphic))  

                  #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫
                  list_concentration = [np.nan if x <= 0 else x for x in list_concentration]

                  graphic=f'–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è {file_name},  '+numer_animal
                  graph_id = graphic
                  add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)
                  
                  first_creating_create_individual_graphics(graph_id,list_time,list_concentration,st.session_state[f'measure_unit_{option}_time'],
                                                            st.session_state[f'measure_unit_{option}_concentration'],"log",add_or_replace_df_graph, 
                                                            (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                           st.session_state[f"list_graphics_word_{option}"],graphic))
                   
              st.session_state[f'list_number_animal_{option}'] = list_number_animal

              # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

              df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
              df_for_plot_conc_1 = df_for_plot_conc.transpose()

              list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()
              count_numer_animal = len(list_numer_animal_for_plot) ### –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥—ã

              list_color = [
                   "blue", "green", "red", "#D6870C", "violet", "gold", "indigo", "magenta", "lime", "tan", 
                   "teal", "coral", "pink", "#510099", "lightblue", "yellowgreen", "cyan", "salmon", "brown", "black",
                   "darkblue", "darkgreen", "darkred", "navy", "purple", "orangered", "darkgoldenrod", "slateblue", 
                   "deepskyblue", "mediumseagreen", "chocolate", "peru", "crimson", "olive", "cadetblue", "chartreuse", 
                   "darkcyan", "lightcoral", "mediumvioletred", "midnightblue", "sienna", "tomato", "turquoise", 
                   "wheat", "plum", "thistle", "aquamarine", "dodgerblue", "lawngreen", "rosybrown", "seagreen"
               ]
              
              df_for_plot_conc_1 = remove_first_element(st.session_state[f"agree_injection - {option}"], df_for_plot_conc_1)

              graphic=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è {file_name}"
              graph_id = graphic
              add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

              first_creating_plot_total_individual_pk_profiles(graph_id,list_color,df_for_plot_conc_1,list_numer_animal_for_plot,st.session_state[f'measure_unit_{option}_time'],
                                                               st.session_state[f'measure_unit_{option}_concentration'],count_numer_animal,
                                                               'lin',add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                           st.session_state[f"list_graphics_word_{option}"],graphic)) 

              # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã  np.nan
              df_for_plot_conc_1 = replace_value_less_one_plot_total_individual_pk_profiles(df_for_plot_conc_1)

              graphic=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è {file_name}"
              graph_id = graphic
              add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

              first_creating_plot_total_individual_pk_profiles(graph_id,list_color,df_for_plot_conc_1,list_numer_animal_for_plot,st.session_state[f'measure_unit_{option}_time'],
                                                               st.session_state[f'measure_unit_{option}_concentration'],count_numer_animal,
                                                               'log',add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                           st.session_state[f"list_graphics_word_{option}"],graphic))        
              ### —É—Å—Ä–µ–¥–µ–Ω–Ω—ã–µ    
              #–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö    

              list_time = []
              for i in col_mapping:
                  numer=float(i)
                  list_time.append(numer)
              
              list_time = remove_first_element(st.session_state[f"agree_injection - {option}"], list_time)

              df_averaged_concentrations=df_stats
              list_concentration=df_averaged_concentrations.loc['Mean'].tolist()
              err_y_pk=df_averaged_concentrations.loc['SD'].tolist()
              
              list_concentration,err_y_pk = remove_first_element(st.session_state[f"agree_injection - {option}"], list_concentration,err_y_pk)

              graphic=f'–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è {file_name}'
              graph_id = graphic
              add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)  

              first_creating_plot_pk_profile_individual_mean_std(graph_id,list_time,list_concentration,err_y_pk,st.session_state[f'measure_unit_{option}_time'],
                                                                    st.session_state[f'measure_unit_{option}_concentration'],'lin',file_name,
                                                                    add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))

              #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
              list_concentration = [np.nan if x <= 0 else x for x in list_concentration]

              graphic=f'–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫—Ä–æ–≤–∏ (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è {file_name}'
              graph_id = graphic
              add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

              first_creating_plot_pk_profile_individual_mean_std(graph_id,list_time,list_concentration,err_y_pk,st.session_state[f'measure_unit_{option}_time'],
                                                                    st.session_state[f'measure_unit_{option}_concentration'],'log',file_name,
                                                                    add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic)) 

              ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö
              if st.session_state[f"agree_injection - {option}"] == "extravascular":
                  result_PK = pk_parametrs_total_extravascular(df,f"{option}",method_auc,dose_pk,st.session_state[f'measure_unit_{option}_concentration'],st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'])
              elif st.session_state[f"agree_injection - {option}"] == "intravenously":
                  if st.session_state[f"extrapolate_first_points_{option}"]:
                     df = remove_second_column(df)
                  result_PK = pk_parametrs_total_intravenously(df,f"{option}",method_auc,dose_pk,st.session_state[f'measure_unit_{option}_concentration'],st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'])
              else:
                  result_PK = pk_parametrs_total_infusion(df,f"{option}",method_auc,dose_pk,st.session_state[f'measure_unit_{option}_concentration'],st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'],infusion_time)
              
              if result_PK is not None:
                  if st.session_state[f"agree_cmax2 - {option}"] == False:
                     df_total_PK_pk = result_PK["df_total_PK"]
                  if st.session_state[f"agree_cmax2 - {option}"] == True:
                     df_total_PK_pk = result_PK["df_total_PK"]
                     df_total_PK_additional_double_peaks_pk = result_PK["df_total_PK_additional_double_peaks"]
                  
                  st.session_state[f"df_total_PK_{option}"] = df_total_PK_pk

                  table_heading=f'–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è {file_name}'
                  add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)
                  
                  add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_total_PK_pk)

                  if st.session_state[f"agree_cmax2 - {option}"] == True:
                     table_heading='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–≤—É—Ö –ø–∏–∫–æ–≤ –≤ –§–ö –ø—Ä–æ—Ñ–∏–ª–µ'
                     add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)
                     
                     add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_total_PK_additional_double_peaks_pk)
              else:
                  st.session_state[f"df_total_PK_{option}"] = None #–¥–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±–æ—Ä–∞ cmax2, –∞ –ø–æ—Ç–æ–º —Ä–µ—à–∏–ª –≤—Å–µ —Ç–∞–∫–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                  st.error("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π Cmax –∏ Cmax(2)")

              custom_success('–†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã!')
                 
           else:   
              st.error('üîß–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã!') 
          
    #–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    col1, col2 = st.columns([0.66,0.34])

    #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
    if panel == "–¢–∞–±–ª–∏—Ü—ã":
       if st.session_state[f"df_total_PK_{option}"] is not None:
          
          ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
          visualize_table(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],option)

       else:
          st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

    with col1:
       
       if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
          if st.session_state[f"df_total_PK_{option}"] is not None:
             #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

             #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
             type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
       ('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è'),disabled = False, key = f"–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - {option}" )

             count_graphics_for_visual = len(st.session_state[f"list_heading_graphics_word_{option}"])
             list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)

             #—Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–≤–µ—á. –∑–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–æ–≤
             create_session_type_graphics_checked_graphics(option,type_graphics)

             if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':

                selected_subject_individual_graphics = radio_create_individual_graphics(option,st.session_state[f'list_number_animal_{option}'],True)
             
             if st.session_state[f"{type_graphics}_{option}_checked_graphics"]:
                for i in list_range_count_graphics_for_visual:
                    if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
                       if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                          
                          graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]

                          match =  (re.match(r".*‚Ññ(\S+)", graph_id))
                          number_animal = "‚Ññ" + match.group(1)

                          if selected_subject_individual_graphics == number_animal:
                             if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                                kind_graphic = 'lin'
                             else:
                                kind_graphic = 'log'

                             rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,create_individual_graphics, st.session_state[f"list_time{graph_id}"],
                                                                    st.session_state[f"list_concentration{graph_id}"],
                                                                    st.session_state[f'measure_unit_{option}_time'],
                                                                    st.session_state[f'measure_unit_{option}_concentration'],
                                                                    kind_graphic,graph_id)

                    if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
                       if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                          
                          graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]
                          if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                             kind_graphic = 'lin'
                          else:
                             kind_graphic = 'log'

                          rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_total_individual_pk_profiles, st.session_state[f"list_color{graph_id}"],
                                                                    st.session_state[f"df_for_plot_conc_1{graph_id}"],
                                                                    st.session_state[f"list_numer_animal_for_plot{graph_id}"],
                                                                    st.session_state[f'measure_unit_{option}_time'],
                                                                    st.session_state[f'measure_unit_{option}_concentration'], 
                                                                    len(st.session_state[f"list_numer_animal_for_plot{graph_id}"]),
                                                                    kind_graphic,graph_id)

                    if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
                       if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                          graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]
                          if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                             kind_graphic = 'lin'
                          else:
                             kind_graphic = 'log'

                          rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_pk_profile_individual_mean_std, st.session_state[f"list_time{graph_id}"],
                                                                    st.session_state[f"list_concentration{graph_id}"],
                                                                    st.session_state[f"err_y_1{graph_id}"],
                                                                    st.session_state[f'measure_unit_{option}_time'],
                                                                    st.session_state[f'measure_unit_{option}_concentration'],
                                                                    kind_graphic,graph_id,st.session_state[f"file_name_{option}"])

             with col2:
                  
                  #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ñ–æ—Ä–º–ª–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
                  selected = style_icon_report()
                   
                  if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":
                     ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                     if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
                        create_graphic(st.session_state[f"list_graphics_word_{option}"],st.session_state[f"list_heading_graphics_word_{option}"]) 
          else:
              st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")
######################################################################################################################################

if option == '–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å':
   
    st.header('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏')

    col1, col2 = st.columns([0.66, 0.34])
    
    ####### –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
    with col1:
        
        panel = main_radio_button_study(option)

        #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
        list_heading_word=[]
        list_table_word=[]
        list_graphics_word=[]
        list_heading_graphics_word=[]
        initializing_session_lists_tables_graphics(option,list_heading_word,list_table_word,list_graphics_word,list_heading_graphics_word)

        if f"selected_edges_{option}" not in st.session_state:
           st.session_state[f"selected_edges_{option}"] = []

        if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
           
           measure_unit_bioavailability_time = select_time_unit(f"select_time_unit{option}")
           measure_unit_bioavailability_concentration = select_concentration_unit(f"select_concentration_unit{option}")
           measure_unit_dose_bioavailability = select_dose_unit(f"select_dose_unit{option}")
           #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
           save_session_state_measure_unit_value(measure_unit_bioavailability_time,measure_unit_bioavailability_concentration,f"{option}",measure_unit_dose_bioavailability)

           #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
           if f"index_method_auc - {option}" not in st.session_state:
               st.session_state[f"index_method_auc - {option}"] = 0

           method_auc = st.radio("üìà –ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC",('linear',"linear-up/log-down"),key = f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}", index = st.session_state[f"index_method_auc - {option}"])
           
           if st.session_state[f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}"] == 'linear':
              st.session_state[f"index_method_auc - {option}"] = 0
           if st.session_state[f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}"] == "linear-up/log-down":
              st.session_state[f"index_method_auc - {option}"] = 1

           file_uploader = st.file_uploader("",accept_multiple_files=True, key=f'–§–∞–π–ª—ã –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ {option}',help = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤. –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ —Å –Ω–∏–∂–Ω–∏–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º ¬´–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å_¬ª –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞–±–ª–∏—Ü –∏ –ø—Ä–æ—á–µ–≥–æ.")
           
           if 'list_files_name_bioavailability' not in st.session_state:
             st.session_state['list_files_name_bioavailability'] = []

           ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
           list_files_name_bioavailability = []
           if file_uploader is not None:
              for i in file_uploader:
                  save_uploadedfile(i)
                  st.session_state[str(i.name)] = i.name
                  list_files_name_bioavailability.append(i.name)
           
           st.session_state['list_files_name_bioavailability'] = list_files_name_bioavailability
           
           if st.session_state['list_files_name_bioavailability'] != []: 
                custom_success(f"–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {', '.join(st.session_state['list_files_name_bioavailability'])}")
           
           list_keys_file_bioavailability = []
           for i in st.session_state.keys():
               if i.__contains__("xlsx") and (i.__contains__("–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")) and (not i.__contains__("edited_df")) and (not i.__contains__("select")) and ((not i.__contains__("del"))): ###—Å–ª–æ–≤–æ –±–∏–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ—Ç –¥—Ä—É–≥–∏—Ö xlsx –æ—Ä–≥–∞–Ω–æ–≤, —Ç.–∫ —Ç–∞–º —Ç–æ–∂–µ –∫–ª—é—á–∏ –∏–º—è —Ñ–∞–π–ª–∞; #–æ–±—Ä–µ–∑–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è "edited_df"
                  list_keys_file_bioavailability.append(i)
         
           if 'sorted_list_keys_file_bioavailability' not in st.session_state and st.session_state['list_files_name_bioavailability'] != []:
              st.session_state['sorted_list_keys_file_bioavailability'] = st.session_state['list_files_name_bioavailability']
           
           if 'sorted_list_keys_file_bioavailability' in st.session_state:
              #—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
              list_keys_file_bioavailability = sort_items(st.session_state['sorted_list_keys_file_bioavailability'],direction="vertical")
              st.session_state['sorted_list_keys_file_bioavailability'] = list_keys_file_bioavailability
           
                                                        
           ###—Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–æ–∑—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω—Ñ—É–∑–∏–∏

           if list_keys_file_bioavailability != []:
              
              list_keys_file_bioavailability_name = []
              for i in list_keys_file_bioavailability:
                   list_keys_file_bioavailability_name.append(i[15:-5])

              list_keys_file_bioavailability = [f"{str(name)}" for name in list_keys_file_bioavailability_name]
              
              for file_name in list_keys_file_bioavailability:

                   with col2:
                        with st.container(border=True):

                             #–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                             settings_additional_research_parameters(f"{option}",custom_success,f"{option}",file_name)
                             
                             if st.session_state[f"agree_injection - {option}_{file_name}"] == "intravenously":
                                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                                if f"extrapolate_first_points_{option}_{file_name}" not in st.session_state:
                                    st.session_state[f"extrapolate_first_points_{option}_{file_name}"] = False

                                # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ–∫–±–æ–∫—Å–∞
                                extrapolate_first_points = st.checkbox(
                                    "–≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç–æ—á–µ–∫",
                                    value=st.session_state[f"extrapolate_first_points_{option}_{file_name}"],
                                    key = "key" + f"extrapolate_first_points_{option}_{file_name}"
                                )

                                st.session_state[f"extrapolate_first_points_{option}_{file_name}"] = extrapolate_first_points

                             initialization_dose_infusion_time_session(option,file_name)
                             
                             dose = st.text_input(f"–î–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ¬´{file_name}¬ª", key='–î–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ ' + f"dose_{option}_{file_name}", value = st.session_state[f"dose_{option}_{file_name}"])
                     
                             st.session_state[f"dose_{option}_{file_name}"] = dose

                             if st.session_state[f"agree_injection - {option}_{file_name}"] == "infusion":
                                  
                                  infusion_time = st.text_input(f"–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ñ—É–∑–∏–∏ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö {file_name}", key='–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ñ—É–∑–∏–∏ ' + f"infusion_time_{option}_{file_name}", value = st.session_state[f"infusion_time_{option}_{file_name}"])
                                  st.session_state[f"infusion_time_{option}_{file_name}"] = infusion_time

           # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∑—ã
           missing_doses = []
           for file_name in list_keys_file_bioavailability:
               dose = st.session_state[f"dose_{option}_{file_name}"]
               if dose != '':
                  missing_doses.append(dose)
           
           if len(missing_doses) == len(list_keys_file_bioavailability):
              cheking_doses = True
           else:
              cheking_doses = False

           if ((list_keys_file_bioavailability != []) and cheking_doses and (st.session_state[f"agree_injection - {option}_{file_name}"] == "infusion" and st.session_state[f"infusion_time_{option}_{file_name}"] != "")):
                start = True
           elif ((list_keys_file_bioavailability != []) and cheking_doses and (st.session_state[f"agree_injection - {option}_{file_name}"] != "infusion" and st.session_state[f"infusion_time_{option}_{file_name}"] == "")):
              start = True
           else:
              start = False
           
           if start == True:
              
              get_color(file_name)

              selected_edges = visualize_mapping(list_keys_file_bioavailability)

              st.session_state[f"selected_edges_{option}"] = selected_edges

              #–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å–≤—è–∑—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω–∞
              if st.session_state[f"selected_edges_{option}"] != [] and st.session_state[f"selected_edges_{option}"] is not None:
                  with st.expander("–ò—Ç–æ–≥–æ–≤—ã–µ —Å–≤—è–∑–∏:", True):
                       for edge in selected_edges:
                           st.write(f'‚Ññ{selected_edges.index(edge)+1} {edge}')  # –í—ã–≤–æ–¥–∏—Ç –∫–∞–∂–¥—É—é —Å–≤—è–∑—å –≤ –Ω–æ–≤–æ–º —Ä—è–¥—É
              
              else:
                  st.write("–ù–µ—Ç —Å–≤—è–∑–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

              if st.session_state[f"selected_edges_{option}"] != [] and st.session_state[f"selected_edges_{option}"] is not None:
                 
                 list_keys_file_bioavailability_without_bioavailability = [f"{str(name)}.xlsx" for name in list_keys_file_bioavailability]

                 st.session_state[f'list_keys_file_{option}'] = list_keys_file_bioavailability_without_bioavailability

                 list_keys_file_bioavailability = [f"–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å_{str(name)}.xlsx" for name in list_keys_file_bioavailability]
                 
                 list_name_bioavailability = []
                 list_df_unrounded=[]
                 list_df_for_mean_unround_for_graphics=[]
                 list_t_graph=[]

                 for i in list_keys_file_bioavailability:
                     df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",i))

                     file_name=i[15:-5]
                     list_name_bioavailability.append(file_name)

                     st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –¥–ª—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ¬´' +file_name+"¬ª")
                     
                     ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                     df = edit_frame(df,i)

                     ###–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö 
                     count_rows_number_lin= len(df.axes[0])

                     table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –¥–ª—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ¬´' +file_name+"¬ª"
                     add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)

                     ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
                     df_stats = create_table_descriptive_statistics(df)
                     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∫–æ–ª–æ–Ω–∫—É "–ù–æ–º–µ—Ä"
                     df_stats_reset = df_stats.reset_index()
                     # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –∏–Ω–¥–µ–∫—Å–∞
                     df_stats_reset.rename(columns={'index': '–ù–æ–º–µ—Ä'}, inplace=True)
                     # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (–Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ df)
                     df_stats_reset.index = range(df.index.max() + 1, df.index.max() + 1 + len(df_stats_reset))
                     # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                     df_concat_round_str_transpose = pd.concat([df, df_stats_reset], axis=0, ignore_index=False)

                     add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_concat_round_str_transpose)
                     
                     ########### –≥—Ä–∞—Ñ–∏–∫–∏    
                     ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    
                     # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

                     col_mapping = df.columns.tolist()
                     col_mapping.remove('–ù–æ–º–µ—Ä')

                     count_row_df = len(df.axes[0])

                     list_time = []
                     for i in col_mapping:
                         numer=float(i)
                         list_time.append(numer)
                     list_t_graph.append(list_time) 
                     
                     list_time = remove_first_element(st.session_state[f"agree_injection - {option}_{file_name}"], list_time)

                     list_number_animal = []

                     for r in range(0,count_row_df):

                         list_concentration=df.iloc[r].tolist()

                         numer_animal=list_concentration[0]

                         list_number_animal.append(numer_animal)

                         list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                         list_concentration = [float(v) for v in list_concentration]

                         list_concentration = remove_first_element(st.session_state[f"agree_injection - {option}_{file_name}"], list_concentration)

                         graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ¬´'  +file_name+"¬ª "+',  '+numer_animal
                         graph_id = graphic
                         add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                         first_creating_create_individual_graphics(graph_id,list_time,list_concentration,st.session_state[f'measure_unit_{option}_time'],
                                                                   st.session_state[f'measure_unit_{option}_concentration'],"lin",add_or_replace_df_graph, 
                                                                   (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                                  st.session_state[f"list_graphics_word_{option}"],graphic))

                         #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º np.nan
                         graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ¬´' +file_name+"¬ª "+',  '+numer_animal
                         graph_id = graphic
                         add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                         # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ 1 –Ω–∞ np.nan
                         list_concentration = [np.nan if x <= 0 else x for x in list_concentration]
                         
                         first_creating_create_individual_graphics(graph_id,list_time,list_concentration,st.session_state[f'measure_unit_{option}_time'],
                                                                   st.session_state[f'measure_unit_{option}_concentration'],"log",add_or_replace_df_graph, 
                                                                   (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                                  st.session_state[f"list_graphics_word_{option}"],graphic))
                     
                     st.session_state[f'list_number_animal_{option}_{f"{file_name}"}'] = list_number_animal

                     # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

                     df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
                     df_for_plot_conc_1 = df_for_plot_conc.transpose()

                     list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()
                     count_numer_animal = len(list_numer_animal_for_plot) ### –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥—ã

                     list_color = [
                         "blue", "green", "red", "#D6870C", "violet", "gold", "indigo", "magenta", "lime", "tan", 
                         "teal", "coral", "pink", "#510099", "lightblue", "yellowgreen", "cyan", "salmon", "brown", "black",
                         "darkblue", "darkgreen", "darkred", "navy", "purple", "orangered", "darkgoldenrod", "slateblue", 
                         "deepskyblue", "mediumseagreen", "chocolate", "peru", "crimson", "olive", "cadetblue", "chartreuse", 
                         "darkcyan", "lightcoral", "mediumvioletred", "midnightblue", "sienna", "tomato", "turquoise", 
                         "wheat", "plum", "thistle", "aquamarine", "dodgerblue", "lawngreen", "rosybrown", "seagreen"
                     ]
                     
                     df_for_plot_conc_1 = remove_first_element(st.session_state[f"agree_injection - {option}_{file_name}"], df_for_plot_conc_1)

                     graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ¬´" +file_name+"¬ª "
                     graph_id = graphic
                     add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic) 

                     first_creating_plot_total_individual_pk_profiles(graph_id,list_color,df_for_plot_conc_1,list_numer_animal_for_plot,st.session_state[f'measure_unit_{option}_time'],
                                                                      st.session_state[f'measure_unit_{option}_concentration'],count_numer_animal,
                                                                      'lin',add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                                  st.session_state[f"list_graphics_word_{option}"],graphic))
                     
                     # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã np.nan
                     df_for_plot_conc_1 = replace_value_less_one_plot_total_individual_pk_profiles(df_for_plot_conc_1)

                     graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ¬´" +file_name+"¬ª "
                     graph_id = graphic
                     add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                     first_creating_plot_total_individual_pk_profiles(graph_id,list_color,df_for_plot_conc_1,list_numer_animal_for_plot,st.session_state[f'measure_unit_{option}_time'],
                                                                      st.session_state[f'measure_unit_{option}_concentration'],count_numer_animal,
                                                                      'log',add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                                  st.session_state[f"list_graphics_word_{option}"],graphic))

                      ###—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ    
                     # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                     graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ¬´' +file_name+"¬ª "
                     graph_id = graphic
                     add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                     list_time = []
                     for i in col_mapping:
                         numer=float(i)
                         list_time.append(numer)
                     
                     list_time = remove_first_element(st.session_state[f"agree_injection - {option}_{file_name}"], list_time)

                     df_averaged_concentrations=df_stats
                     list_concentration=df_averaged_concentrations.loc['Mean'].tolist()
                     err_y_1=df_averaged_concentrations.loc['SD'].tolist()

                     list_concentration,err_y_1 = remove_first_element(st.session_state[f"agree_injection - {option}_{file_name}"], list_concentration,err_y_1)

                     first_creating_plot_pk_profile_individual_mean_std(graph_id,list_time,list_concentration,err_y_1,st.session_state[f'measure_unit_{option}_time'],
                                                                        st.session_state[f'measure_unit_{option}_concentration'],'lin',file_name,
                                                                        add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                                  st.session_state[f"list_graphics_word_{option}"],graphic))

                     #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                     #–¥–ª—è –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º. –ø–æ—Å—Ç–æ—Ä–∏–º –±–µ–∑ –Ω—É–ª—è
                     # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ 1 –Ω–∞ np.nan
                     graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ¬´' +file_name+"¬ª "
                     graph_id = graphic
                     add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                     list_concentration = [np.nan if x <= 0 else x for x in list_concentration]

                     first_creating_plot_pk_profile_individual_mean_std(graph_id,list_time,list_concentration,err_y_1,st.session_state[f'measure_unit_{option}_time'],
                                                                        st.session_state[f'measure_unit_{option}_concentration'],'log',file_name,
                                                                        add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                                  st.session_state[f"list_graphics_word_{option}"],graphic))
                     
                     ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö
                     if f"agree_cmax2 - {option}_{file_name}" not in st.session_state:
                        st.session_state[f"agree_cmax2 - {option}_{file_name}"] = False

                     if st.session_state[f"agree_injection - {option}_{file_name}"] == "extravascular":
                         result_PK = pk_parametrs_total_extravascular(df,f"{option}_{file_name}",method_auc,st.session_state[f"dose_{option}_{file_name}"],st.session_state[f'measure_unit_{option}_concentration'],st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'])
                     elif st.session_state[f"agree_injection - {option}_{file_name}"] == "intravenously":
                         if st.session_state[f"extrapolate_first_points_{option}_{file_name}"]:
                            df = remove_second_column(df)
                         result_PK = pk_parametrs_total_intravenously(df,f"{option}_{file_name}",method_auc,st.session_state[f"dose_{option}_{file_name}"],st.session_state[f'measure_unit_{option}_concentration'],st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'])
                     else:
                         result_PK = pk_parametrs_total_infusion(df,f"{option}_{file_name}",method_auc,st.session_state[f"dose_{option}_{file_name}"],st.session_state[f'measure_unit_{option}_concentration'],st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'],st.session_state[f"infusion_time_{option}_{file_name}"])

                     if result_PK is not None:

                         df_total_PK_bioavailability = result_PK["df_total_PK"]
                         df_concat_PK_bioavailability = result_PK["df_concat_PK"]
                         list_cmax_1_bioavailability = result_PK["list_cmax_1"]
                         
                         st.session_state[f"df_total_PK_{option}"] = df_total_PK_bioavailability

                         table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ¬´' +file_name +"¬ª "
                         add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)

                         add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_total_PK_bioavailability)

                         #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ñ—Ä–µ–π–º–æ–≤, –¥–æ–∑ –∏ —Ç.–¥.
                         list_df_unrounded.append(df_concat_PK_bioavailability)
                         list_df_for_mean_unround_for_graphics.append(df_stats)

                 list_list_PK_par_mean=[]
                 for i,file_name in list(zip(list_df_unrounded,list_name_bioavailability)): 
                     mean_—Åmax=i['Cmax'].loc['Mean']
                     mean_tmax=i['Tmax'].loc['Mean']
                     mean_mrt0inf=i['MRT0‚Üí‚àû'].loc['Mean']
                     mean_thalf=i['T1/2'].loc['Mean']
                     mean_auc0t=i['AUC0-t'].loc['Mean']
                     mean_auc0inf=i['AUC0‚Üí‚àû'].loc['Mean']
                     mean_aumc0inf=i['AUMC0-‚àû'].loc['Mean']
                     mean_—Åmaxdevaucot=i['–°max/AUC0-t'].loc['Mean']
                     mean_kel=i['Kel'].loc['Mean']

                     if st.session_state[f"agree_injection - {option}_{file_name}"] == "extravascular":
                        mean_cl=i['Cl/F'].loc['Mean']
                        mean_vd=i['Vz/F'].loc['Mean']
                     else:
                        mean_cl=i['Cl'].loc['Mean']
                        mean_vd=i['Vz'].loc['Mean']
                     list_list_PK_par_mean.append([mean_—Åmax,mean_tmax,mean_mrt0inf,mean_thalf,mean_auc0t,mean_auc0inf,mean_aumc0inf,mean_—Åmaxdevaucot,mean_kel,mean_cl,mean_vd])
                 
                 list_df_PK_bioavailability_total = []

                 for list_PK_par_mean,file_name in list(zip(list_list_PK_par_mean,list_name_bioavailability)):
                     
                     ### –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                     if st.session_state[f"agree_injection - {option}_{file_name}"] == "extravascular":
                        df_PK_bioavailability_total = pd.DataFrame(list_PK_par_mean, index =['Cmax ' +"("+st.session_state[f'measure_unit_{option}_concentration']+")",'Tmax ' +"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'MRT0‚Üí‚àû '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'T1/2 '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'AUC0-t '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")",'AUC0‚Üí‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")",'AUMC0-‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}\u00B2" +")",'–°max/AUC0-t '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")",'Kel '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")",'Cl/F ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})/{st.session_state[f'measure_unit_{option}_time']}"+")",'Vz/F ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})"+")"],columns=[file_name])
                     else:
                        df_PK_bioavailability_total = pd.DataFrame(list_PK_par_mean, index =['Cmax ' +"("+st.session_state[f'measure_unit_{option}_concentration']+")",'Tmax ' +"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'MRT0‚Üí‚àû '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'T1/2 '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'AUC0-t '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")",'AUC0‚Üí‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")",'AUMC0-‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}\u00B2" +")",'–°max/AUC0-t '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")",'Kel '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")",'Cl ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})/{st.session_state[f'measure_unit_{option}_time']}"+")",'Vz ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})"+")"],columns=[file_name])
 
                     df_PK_bioavailability_total.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å'
                     list_df_PK_bioavailability_total.append(df_PK_bioavailability_total)
                 
                 # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ DataFrame
                 selected_df_PK_bioavailability_total = [df[[col]] for df, col in zip(list_df_PK_bioavailability_total, list_name_bioavailability)]
                 # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–¥–∏–Ω DataFrame
                 merged_df_PK_bioavailability_total = pd.concat(selected_df_PK_bioavailability_total, axis=1)
  
                 table_heading='–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
                 add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)

                 add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,merged_df_PK_bioavailability_total)
                 
                 list_bioavailability_label = []
                 list_bioavailability = []
                 for comparison in st.session_state[f"selected_edges_{option}"]:

                     # 1. –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ " ‚Üí "
                     reference_drug, test_drug = map(str.strip, comparison.split("‚Üí"))

                     # 2. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é "AUC0-t"
                     def find_auc_value(df, column_name):
                         auc_row = df[df["–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å"].str.contains(r"AUC0-t", regex=True, na=False)]
                         return auc_row[column_name].values[0] if not auc_row.empty else None
                     
                     def find_auc_value(df, column_name):
                         auc_row = df[df.index.str.contains(r"AUC0-t", regex=True, na=False)]
                         return auc_row[column_name].values[0] if not auc_row.empty else None

                     # 3. –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è AUC0-t –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö DataFrame-–æ–≤
                     auc_ref = find_auc_value(merged_df_PK_bioavailability_total, reference_drug)
                     auc_test = find_auc_value(merged_df_PK_bioavailability_total, test_drug)
                     
                     # 4. –í—ã—á–∏—Å–ª—è–µ–º –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã)
                     if auc_ref and auc_test:
                         bioavailability = ((auc_test * float(st.session_state[f"dose_{option}_{test_drug}"]))/ (auc_ref * float(st.session_state[f"dose_{option}_{reference_drug}"]))) * 100
                         list_bioavailability_label.append((f"{test_drug} –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ {reference_drug}"))
                         list_bioavailability.append(bioavailability)
                     else:
                         st.write("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è AUC0-t –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤")

                 df_bioavailability = pd.DataFrame({"–ë–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å": list_bioavailability}, index=list_bioavailability_label)

                 table_heading='–¢–∞–±–ª–∏—Ü–∞ –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏'
                 add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)

                 add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_bioavailability)
                 
                 ###–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ "–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ª–µ–∫. —Ñ–æ—Ä–º–∞—Ö"
                 graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏'
                 graph_id= graphic
                 add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic) 

                 ### –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 list_list_mean_conc=[]
                 list_list_std_conc=[]
                 for i in list_df_for_mean_unround_for_graphics: 
                     mean_conc_list=i.loc['Mean'].tolist()
                     std_conc_list=i.loc['SD'].tolist()
                     list_list_mean_conc.append(mean_conc_list)
                     list_list_std_conc.append(std_conc_list)

                 list_name_bioavailability_std=[]
                 for i in list_name_bioavailability:
                  j= i + " std"
                  list_name_bioavailability_std.append(j)

                 list_time_new_df = list_t_graph[0]
                 
                 df_mean_conc_graph = pd.DataFrame(list_list_mean_conc, columns =list_time_new_df,index=list_name_bioavailability)
                 df_mean_conc_graph_1=df_mean_conc_graph.transpose()
                 df_std_conc_graph = pd.DataFrame(list_list_std_conc, columns =list_time_new_df,index=list_name_bioavailability_std)
                 df_std_conc_graph_1=df_std_conc_graph.transpose()
                 df_concat_mean_std= pd.concat([df_mean_conc_graph_1,df_std_conc_graph_1],sort=False,axis=1)
                 
                 
                 # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                 pattern = re.compile(r"–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ|–ò–Ω—Ñ—É–∑–∏–æ–Ω–Ω–æ–µ|–í–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–µ std|–ò–Ω—Ñ—É–∑–∏–æ–Ω–Ω–æ–µ std")

                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Ä–∞–≤–Ω–æ 0
                 for col in df_concat_mean_std.columns:
                     if pattern.search(col) and df_concat_mean_std[col].iloc[0] == 0:
                         df_concat_mean_std.at[0, col] = np.nan  # –ó–∞–º–µ–Ω—è–µ–º 0 –Ω–∞ np.nan

                 list_colors = ["blue","green","red","#D6870C","violet","gold","indigo","magenta","lime","tan","teal","coral","pink","#510099","lightblue","yellowgreen","cyan","salmon","brown","black"]

                 list_t_doses=list(df_concat_mean_std.index)

                 list_zip_mean_std_colors=list(zip(list_name_bioavailability,list_name_bioavailability_std,list_colors))
                 
                 #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–µ–π
                 initializing_checkbox_status_graph_scaling_widgets(graph_id)
                 
                 #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
                 st.session_state[f"list_zip_mean_std_colors{graph_id}"] = list_zip_mean_std_colors
                 st.session_state[f"list_t_doses{graph_id}"] = list_t_doses
                 st.session_state[f"df_concat_mean_std{graph_id}"] = df_concat_mean_std

                 if f"first_creating_graphic{graph_id}" not in st.session_state:
                     st.session_state[f"first_creating_graphic{graph_id}"] = True  # –ø–µ—Ä–≤–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                 
                 if st.session_state[f"first_creating_graphic{graph_id}"]:
                    #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ–ª–µ–π –ª–∏–Ω–µ–π–Ω—ã–µ
                    fig = plot_pk_profile_total_mean_std_doses_organs(list_zip_mean_std_colors,list_t_doses,df_concat_mean_std,st.session_state[f'measure_unit_{option}_time'],
                                                                 st.session_state[f'measure_unit_{option}_concentration'],'lin',graph_id)
                    add_or_replace_df_graph(st.session_state[f"list_heading_graphics_word_{option}"],st.session_state[f"list_graphics_word_{option}"],graphic,fig)
                    

                 ### –≤ –ø–æ–ª—É–ª–æ–≥. –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏'
                 graph_id= graphic
                 add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)
                 
                 #–∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –Ω—É–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –º–µ–Ω—å—à–µ 1 –Ω–∞ np.nan –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                 df_concat_mean_std = df_concat_mean_std.copy(deep=True)
                 df_concat_mean_std = replace_value_less_one_plot_pk_profile_total_mean_std_doses_organs(df_concat_mean_std)

                 list_zip_mean_std_colors=list(zip(list_name_bioavailability,list_name_bioavailability_std,list_colors))
                 
                 #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–µ–π
                 initializing_checkbox_status_graph_scaling_widgets(graph_id) 

                 #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
                 st.session_state[f"list_zip_mean_std_colors{graph_id}"] = list_zip_mean_std_colors
                 st.session_state[f"list_t_doses{graph_id}"] = list_t_doses
                 st.session_state[f"df_concat_mean_std{graph_id}"] = df_concat_mean_std
                 
                 if f"first_creating_graphic{graph_id}" not in st.session_state:
                     st.session_state[f"first_creating_graphic{graph_id}"] = True  # –ø–µ—Ä–≤–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                 
                 if st.session_state[f"first_creating_graphic{graph_id}"]:
                    #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ–ª–µ–π –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º
                    fig = plot_pk_profile_total_mean_std_doses_organs(list_zip_mean_std_colors,list_t_doses,df_concat_mean_std,st.session_state[f'measure_unit_{option}_time'],
                                                                 st.session_state[f'measure_unit_{option}_concentration'],'log',graph_id)
                    add_or_replace_df_graph(st.session_state[f"list_heading_graphics_word_{option}"],st.session_state[f"list_graphics_word_{option}"],graphic,fig)

                 custom_success('–†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã!')
                 
              else:   
                 st.error('üîß–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∑–∞–π–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è!')      

    #–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    col1, col2 = st.columns([0.66,0.34])
    
    #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
    if panel == "–¢–∞–±–ª–∏—Ü—ã": 
       if st.session_state[f"df_total_PK_{option}"] is not None:
          
          list_keys = [x[:-5] for x in st.session_state[f"list_keys_file_{option}"]]
          st.session_state[f"list_heading_word_{option}"], index_mapping = sort_by_keys_with_indices(st.session_state[f"list_heading_word_{option}"], list_keys)
          st.session_state[f"list_table_word_{option}"] = reorder_list_by_mapping(st.session_state[f"list_table_word_{option}"], index_mapping)

          ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
          visualize_table(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],option)

       else:
           st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

    with col1:
          
       if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
          if st.session_state[f"df_total_PK_{option}"] is not None: 
             #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
             list_keys = [x[:-5] for x in st.session_state[f"list_keys_file_{option}"]]
             st.session_state[f"list_heading_graphics_word_{option}"], index_mapping = sort_by_keys_with_indices(st.session_state[f"list_heading_graphics_word_{option}"], list_keys)
             st.session_state[f"list_graphics_word_{option}"] = reorder_list_by_mapping(st.session_state[f"list_graphics_word_{option}"], index_mapping)

             #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
             type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
       ('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è','–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏'),disabled = False, key = f"–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - {option}" )

             count_graphics_for_visual = len(st.session_state[f"list_heading_graphics_word_{option}"])
             list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)

             #—Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–≤–µ—á. –∑–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–æ–≤
             create_session_type_graphics_checked_graphics(option,type_graphics)

             if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏' or type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π' or type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                selected_kind_individual_graphics = radio_create_individual_graphics(option,st.session_state[f'list_keys_file_{option}'])

                if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                   selected_subject_individual_graphics = radio_create_individual_graphics(option,st.session_state[f'list_number_animal_{option}_{selected_kind_individual_graphics}'],True,selected_kind_individual_graphics)

             if st.session_state[f"{type_graphics}_{option}_checked_graphics"]:
                for i in list_range_count_graphics_for_visual:
                    if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
                       if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                          
                          graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]

                          match = re.findall(r'¬´(.*?)¬ª', graph_id)
                          file_name = match[0]

                          match =  (re.match(r".*‚Ññ(\S+)", graph_id))
                          number_animal = "‚Ññ" + match.group(1)

                          if selected_kind_individual_graphics == file_name and selected_subject_individual_graphics == number_animal:
                             if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                                kind_graphic = 'lin'
                             else:
                                kind_graphic = 'log'

                             rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,create_individual_graphics, st.session_state[f"list_time{graph_id}"],
                                                                    st.session_state[f"list_concentration{graph_id}"],
                                                                    st.session_state[f'measure_unit_{option}_time'],
                                                                    st.session_state[f'measure_unit_{option}_concentration'],
                                                                    kind_graphic,graph_id)
                             
                    if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
                       if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                             
                          graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]

                          match = re.findall(r'¬´(.*?)¬ª', graph_id)
                          file_name = match[0]

                          if selected_kind_individual_graphics == file_name:
                             if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                                kind_graphic = 'lin'
                             else:
                                kind_graphic = 'log'

                             rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_total_individual_pk_profiles, st.session_state[f"list_color{graph_id}"],
                                                                       st.session_state[f"df_for_plot_conc_1{graph_id}"],
                                                                       st.session_state[f"list_numer_animal_for_plot{graph_id}"],
                                                                       st.session_state[f'measure_unit_{option}_time'],
                                                                       st.session_state[f'measure_unit_{option}_concentration'], 
                                                                       len(st.session_state[f"list_numer_animal_for_plot{graph_id}"]),
                                                                       kind_graphic,graph_id)

                    if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
                       if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                             
                          graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]

                          match = re.findall(r'¬´(.*?)¬ª', graph_id)
                          file_name = match[0]

                          if selected_kind_individual_graphics == file_name:
                             
                             if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                                kind_graphic = 'lin'
                             else:
                                kind_graphic = 'log'

                             rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_pk_profile_individual_mean_std, st.session_state[f"list_time{graph_id}"],
                                                                       st.session_state[f"list_concentration{graph_id}"],
                                                                       st.session_state[f"err_y_1{graph_id}"],
                                                                       st.session_state[f'measure_unit_{option}_time'],
                                                                       st.session_state[f'measure_unit_{option}_concentration'],
                                                                       kind_graphic,graph_id,file_name)
                             
                    if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö"):
                      if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –±–∏–æ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏':
                         
                         graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]
                          
                         file_name = [i[15:-5] for i in st.session_state[f'list_keys_file_{option}']][0] #–∫–æ—Å—Ç—ã–ª—å, —Ç–∞–º –≤–≤–µ—Ä—Ö—É —Ç–∞–∫–∂–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è, –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∫–∞–∫ –æ—Å—Ç–∞–≤–∏–º
                         
                         if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                            kind_graphic = 'lin'
                         else:
                            kind_graphic = 'log'

                         rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_pk_profile_total_mean_std_doses_organs, st.session_state[f"list_zip_mean_std_colors{graph_id}"],
                                                                   st.session_state[f"list_t_doses{graph_id}"],
                                                                   st.session_state[f"df_concat_mean_std{graph_id}"],
                                                                   st.session_state[f'measure_unit_{option}_time'],
                                                                   st.session_state[f'measure_unit_{option}_concentration'],
                                                                   kind_graphic,graph_id)         
             with col2:
                     
                 #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ñ–æ—Ä–º–ª–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
                 selected = style_icon_report()
                  
                 if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":
                    ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
                       create_graphic(st.session_state[f"list_graphics_word_{option}"],st.session_state[f"list_heading_graphics_word_{option}"])
          else:
              st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

#####################################################################        
if option == '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ä–≥–∞–Ω–∞–º':
   
   st.header('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö')
   
   col1, col2 = st.columns([0.66, 0.34])
   
   with col1:
       
      panel = main_radio_button_study(option)

      initialization_dose_infusion_time_session(option)
      
      #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
      list_heading_word=[]
      list_table_word=[]
      list_graphics_word=[]
      list_heading_graphics_word=[]
      initializing_session_lists_tables_graphics(option,list_heading_word,list_table_word,list_graphics_word,list_heading_graphics_word)
       
      if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
         
         ######### –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞
         with col2:
              
              #–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
              settings_additional_research_parameters(option,custom_success)

         measure_unit_org_time = select_time_unit(f"select_time_unit{option}")
         measure_unit_org_blood = select_concentration_unit(f"select_concentration_unit{option}")
         measure_unit_org_organs = select_organ_concentration_unit(f"select_organ_concentration_unit{option}")
         measure_unit_org_dose = select_dose_unit(f"select_dose_unit{option}")
         #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
         save_session_state_measure_unit_value(measure_unit_org_time,measure_unit_org_blood,f"{option}",measure_unit_org_dose,measure_unit_org_organs=measure_unit_org_organs)
         
         dose = st.text_input("–î–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞", key='–î–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö', value = st.session_state[f"dose_{option}"])
         
         st.session_state[f"dose_{option}"] = dose

         if st.session_state[f"agree_injection - {option}"] == "infusion":
              
              infusion_time = st.text_input("–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ñ—É–∑–∏–∏", key=f'–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ñ—É–∑–∏–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ {option}', value = st.session_state[f"infusion_time_{option}"])
              st.session_state[f"infusion_time_{option}"] = infusion_time

         #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
         if f"index_method_auc - {option}" not in st.session_state:
             st.session_state[f"index_method_auc - {option}"] = 0

         method_auc = st.radio("üìà –ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC",('linear',"linear-up/log-down"),key = f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}", index = st.session_state[f"index_method_auc - {option}"])
         
         if st.session_state[f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}"] == 'linear':
            st.session_state[f"index_method_auc - {option}"] = 0
         if st.session_state[f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}"] == "linear-up/log-down":
            st.session_state[f"index_method_auc - {option}"] = 1
         
         if st.session_state[f"agree_injection - {option}"] == "intravenously":
              # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
              if f"extrapolate_first_points_{option}" not in st.session_state:
                  st.session_state[f"extrapolate_first_points_{option}"] = False

              # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ–∫–±–æ–∫—Å–∞
              extrapolate_first_points = st.checkbox(
                  "–≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç–æ—á–µ–∫",
                  value=st.session_state[f"extrapolate_first_points_{option}"],
                  key = "key" + f"extrapolate_first_points_{option}"
              )

              st.session_state[f"extrapolate_first_points_{option}"] = extrapolate_first_points

         file_uploader = st.file_uploader("",accept_multiple_files=True, key='–§–∞–π–ª—ã –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫–∏ –≤ –æ—Ä–≥–∞–Ω–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö',help = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤; —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ä–≥–∞–Ω—É; –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∫—Ä–æ–≤–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω '–ö—Ä–æ–≤—å'")

         if 'list_files_name_organs' not in st.session_state:
             st.session_state['list_files_name_organs'] = []

         ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
         list_files_name_organs = []
         if file_uploader is not None:
            for i in file_uploader:
                save_uploadedfile(i)
                st.session_state[str(i.name)] = i.name
                list_files_name_organs.append(i.name)
         
         st.session_state['list_files_name_organs'] = list_files_name_organs
         
         if st.session_state['list_files_name_organs'] != []:
              custom_success(f"–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {', '.join(st.session_state['list_files_name_organs'])}")       
         
         list_keys_file_org = []
         for i in st.session_state.keys():
             if i.__contains__("xlsx") and (not i.__contains__("–î–æ–∑–∏—Ä–æ–≤–∫–∞")) and (not i.__contains__("–ë–æ–ª—é—Å")) and (not i.__contains__("–ò–Ω—Ñ—É–∑–∏–æ–Ω–Ω–æ–µ")) and (not i.__contains__("–í–Ω–µ—Å–æ—Å—É–¥–∏—Å—Ç–æ–µ")) and (not i.__contains__("edited_df")):### —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–æ—Å—å —Å lin; #–æ–±—Ä–µ–∑–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è "edited_df"
                list_keys_file_org.append(i)

         if 'sorted_list_keys_file_organs' not in st.session_state and st.session_state['list_files_name_organs'] != []:
                  st.session_state['sorted_list_keys_file_organs'] = st.session_state['list_files_name_organs']
               
         if 'sorted_list_keys_file_organs' in st.session_state:
            #—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            list_keys_file_org = sort_items(st.session_state['sorted_list_keys_file_organs'],direction="vertical")
            st.session_state['sorted_list_keys_file_organs'] = list_keys_file_org

         st.session_state[f"list_keys_file_{option}"] = list_keys_file_org
         
         if ((list_keys_file_org != []) and dose and (st.session_state[f"agree_injection - {option}"] == "infusion" and st.session_state[f"infusion_time_{option}"] != "") and st.session_state[f'measure_unit_{option}_concentration'] and st.session_state[f'measure_unit_{option}_organs']):
              start = True
         elif ((list_keys_file_org != []) and dose and (st.session_state[f"agree_injection - {option}"] != "infusion" and st.session_state[f"infusion_time_{option}"] == "") and st.session_state[f'measure_unit_{option}_concentration'] and st.session_state[f'measure_unit_{option}_organs']):
            start = True
         else:
            start = False

         if start:

             list_name_organs=[]
             list_df_unrounded=[]
             list_df_for_mean_unround_for_graphics=[]
             list_t_graph=[]
             
             for i in list_keys_file_org:
                 df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",i))

                 file_name=st.session_state[i][:-5]

                 st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π ' + "("+file_name+")")
                 
                 ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                 df = edit_frame(df,i)

                 ###–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö 
                 count_rows_number_org = len(df.axes[0])
                 
                 table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π ' + "("+file_name+")"
                 
                 add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)

                 df_stats = create_table_descriptive_statistics(df)
                 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∫–æ–ª–æ–Ω–∫—É "–ù–æ–º–µ—Ä"
                 df_stats_reset = df_stats.reset_index()
                 # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –∏–Ω–¥–µ–∫—Å–∞
                 df_stats_reset.rename(columns={'index': '–ù–æ–º–µ—Ä'}, inplace=True)
                 # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (–Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ df)
                 df_stats_reset.index = range(df.index.max() + 1, df.index.max() + 1 + len(df_stats_reset))
                 # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                 df_concat_round_str_transpose = pd.concat([df, df_stats_reset], axis=0, ignore_index=False)

                 add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_concat_round_str_transpose)
                 
                 #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–ª–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
                 measure_unit_org = checking_file_names_organ_graphs(option,file_name)

                 ########### –≥—Ä–∞—Ñ–∏–∫–∏    

                 ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    

                 # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö 
                 col_mapping = df.columns.tolist()
                 col_mapping.remove('–ù–æ–º–µ—Ä')

                 count_row_df = len(df.axes[0])

                 list_time = []
                 for i in col_mapping:
                     numer=float(i)
                     list_time.append(numer)
                 list_t_graph.append(list_time)

                 list_time = remove_first_element(st.session_state[f"agree_injection - {option}"], list_time)
                 
                 list_number_animal = []

                 for r in range(0,count_row_df):

                     list_concentration=df.iloc[r].tolist()

                     numer_animal=list_concentration[0]

                     list_number_animal.append(numer_animal)

                     list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                     list_concentration = [float(v) for v in list_concentration]

                     list_concentration = remove_first_element(st.session_state[f"agree_injection - {option}"], list_concentration)

                     graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö '  + "("+file_name+")"',  '+numer_animal
                     graph_id = graphic
                     add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)  

                     first_creating_create_individual_graphics(graph_id,list_time,list_concentration,st.session_state[f'measure_unit_{option}_time'],
                                                               measure_unit_org,"lin",add_or_replace_df_graph, 
                                                               (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))
                     #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º np.nan
                     # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ 1 –Ω–∞ np.nan
                     list_concentration = [np.nan if x <= 0 else x for x in list_concentration]

                     graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' + "("+file_name+")"',  '+numer_animal
                     graph_id = graphic
                     add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic) 

                     first_creating_create_individual_graphics(graph_id,list_time,list_concentration,st.session_state[f'measure_unit_{option}_time'],
                                                               measure_unit_org,"log",add_or_replace_df_graph, 
                                                               (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))

                 st.session_state[f'list_number_animal_{option}_{file_name}'] = list_number_animal

                 # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

                 df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
                 df_for_plot_conc_1 = df_for_plot_conc.transpose()
                 
                 list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()
                 count_numer_animal = len(list_numer_animal_for_plot) ### –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥—ã

                 list_color = [
                   "blue", "green", "red", "#D6870C", "violet", "gold", "indigo", "magenta", "lime", "tan", 
                   "teal", "coral", "pink", "#510099", "lightblue", "yellowgreen", "cyan", "salmon", "brown", "black",
                   "darkblue", "darkgreen", "darkred", "navy", "purple", "orangered", "darkgoldenrod", "slateblue", 
                   "deepskyblue", "mediumseagreen", "chocolate", "peru", "crimson", "olive", "cadetblue", "chartreuse", 
                   "darkcyan", "lightcoral", "mediumvioletred", "midnightblue", "sienna", "tomato", "turquoise", 
                   "wheat", "plum", "thistle", "aquamarine", "dodgerblue", "lawngreen", "rosybrown", "seagreen"
                 ]
                 
                 df_for_plot_conc_1 = remove_first_element(st.session_state[f"agree_injection - {option}"], df_for_plot_conc_1)

                 graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö " + "("+file_name+")"
                 graph_id = graphic
                 add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic) 
                 
                 first_creating_plot_total_individual_pk_profiles(graph_id,list_color,df_for_plot_conc_1,list_numer_animal_for_plot,st.session_state[f'measure_unit_{option}_time'],
                                                                  measure_unit_org,count_numer_animal,
                                                                  'lin',add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))

                 # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã 0 –Ω–∞ None
                 df_for_plot_conc_1 = replace_value_less_one_plot_total_individual_pk_profiles(df_for_plot_conc_1)

                 graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö " + "("+file_name+")"
                 graph_id = graphic
                 add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                 first_creating_plot_total_individual_pk_profiles(graph_id,list_color,df_for_plot_conc_1,list_numer_animal_for_plot,st.session_state[f'measure_unit_{option}_time'],
                                                                  measure_unit_org,count_numer_animal,
                                                                  'log',add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))

                 ###—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ    
                 # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 list_time = []
                 for i in col_mapping:
                     numer=float(i)
                     list_time.append(numer)
                 
                 list_time = remove_first_element(st.session_state[f"agree_injection - {option}"], list_time)

                 df_averaged_concentrations=df_stats
                 list_concentration=df_averaged_concentrations.loc['Mean'].tolist()
                 err_y_1=df_averaged_concentrations.loc['SD'].tolist()
                 
                 list_concentration,err_y_1 = remove_first_element(st.session_state[f"agree_injection - {option}"], list_concentration,err_y_1)

                 graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' + "("+file_name+")"
                 graph_id = graphic
                 add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                 first_creating_plot_pk_profile_individual_mean_std(graph_id,list_time,list_concentration,err_y_1,st.session_state[f'measure_unit_{option}_time'],
                                                                    measure_unit_org,'lin',file_name,
                                                                    add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))
                 #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 #–¥–ª—è –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º. –ø–æ—Å—Ç–æ—Ä–∏–º –±–µ–∑ –Ω—É–ª—è
                 # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ 1 –Ω–∞ np.nan
                 list_concentration = [np.nan if x <= 0 else x for x in list_concentration]

                 graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ' + "("+file_name+")"
                 graph_id = graphic
                 add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                 first_creating_plot_pk_profile_individual_mean_std(graph_id,list_time,list_concentration,err_y_1,st.session_state[f'measure_unit_{option}_time'],
                                                                    measure_unit_org,'log',file_name,
                                                                    add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))
                 

                 ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö
                 if f"agree_cmax2 - {option} {file_name}" not in st.session_state:
                    st.session_state[f"agree_cmax2 - {option} {file_name}"] = False

                 if st.session_state[f"agree_injection - {option}"] == "extravascular":
                     result_PK = pk_parametrs_total_extravascular(df,f"{option} {file_name}",method_auc,dose,measure_unit_org,st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'])
                 elif st.session_state[f"agree_injection - {option}"] == "intravenously":
                     if st.session_state[f"extrapolate_first_points_{option}"]:
                        df = remove_second_column(df)
                     result_PK = pk_parametrs_total_intravenously(df,f"{option} {file_name}",method_auc,dose,measure_unit_org,st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'])
                 else:
                     result_PK = pk_parametrs_total_infusion(df,f"{option} {file_name}",method_auc,dose,measure_unit_org,st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'],infusion_time)
                 

                 if result_PK is not None:

                     df_total_PK_org = result_PK["df_total_PK"]
                     df_concat_PK_org = result_PK["df_concat_PK"]
                     list_cmax_1_org = result_PK["list_cmax_1"]

                     st.session_state[f"df_total_PK_{option}"] = df_total_PK_org

                     table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ' + "("+file_name+")"
                     add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)
                     
                     add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_total_PK_org)
                     
                     #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ñ—Ä–µ–π–º–æ–≤, –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ä–≥–∞–Ω–æ–≤ –∏ —Ç.–¥.

                     list_name_organs.append(file_name)
                     list_df_unrounded.append(df_concat_PK_org)
                     list_df_for_mean_unround_for_graphics.append(df_stats)

             ###–ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
             button_calculation = False
             
             if (list_keys_file_org != []) and dose and st.session_state[f'measure_unit_{option}_concentration'] and st.session_state[f'measure_unit_{option}_organs'] and result_PK is not None:
              
                condition_cmax1 =  len(list_cmax_1_org) == count_rows_number_org

                button_calculation = True
                
                if button_calculation == True:
                   custom_success('–†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã!')
                else:   
                   st.error('üîß–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã!')
             
             if (list_keys_file_org != []) and dose and st.session_state[f'measure_unit_{option}_concentration'] and st.session_state[f'measure_unit_{option}_organs'] and button_calculation:
                
                list_list_PK_par_mean=[]
                for i in list_df_unrounded: 
                    mean_—Åmax=i['Cmax'].loc['Mean']
                    mean_tmax=i['Tmax'].loc['Mean']
                    mean_mrt0inf=i['MRT0‚Üí‚àû'].loc['Mean']
                    mean_thalf=i['T1/2'].loc['Mean']
                    mean_auc0t=i['AUC0-t'].loc['Mean']
                    mean_auc0inf=i['AUC0‚Üí‚àû'].loc['Mean']
                    mean_aumc0inf=i['AUMC0-‚àû'].loc['Mean']
                    mean_kel=i['Kel'].loc['Mean']
                    list_list_PK_par_mean.append([mean_—Åmax,mean_tmax,mean_mrt0inf,mean_thalf,mean_auc0t,mean_auc0inf,mean_aumc0inf,mean_kel])
                
                list_list_PK_par_std=[]
                for i in list_df_unrounded: 
                    std_—Åmax=i['Cmax'].loc['SD']
                    std_tmax=i['Tmax'].loc['SD']
                    std_mrt0inf=i['MRT0‚Üí‚àû'].loc['SD']
                    std_thalf=i['T1/2'].loc['SD']
                    std_auc0t=i['AUC0-t'].loc['SD']
                    std_auc0inf=i['AUC0‚Üí‚àû'].loc['SD']
                    std_aumc0inf=i['AUMC0-‚àû'].loc['SD']
                    std_kel=i['Kel'].loc['SD']
                    list_list_PK_par_std.append([std_—Åmax,std_tmax,std_mrt0inf,std_thalf,std_auc0t,std_auc0inf,std_aumc0inf,std_kel])

                ### –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–≥–∞–Ω–æ–≤
                
                df_PK_organs_total = pd.DataFrame(list_list_PK_par_mean, columns =['Cmax','Tmax','MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-‚àû','Kel'],index=list_name_organs) 
                df_PK_organs_total_transpose=df_PK_organs_total.transpose()
                
                df_PK_organs_total_std = pd.DataFrame(list_list_PK_par_std, columns =['Cmax','Tmax','MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-‚àû','Kel'],index=list_name_organs) 
                df_PK_organs_total_std_transpose=df_PK_organs_total_std.transpose()
                
                ###ft
                list_aucot_for_ft=[]
                list_columns_df_PK_organs_total_transpose=df_PK_organs_total_transpose.columns.tolist()
                for i in list_columns_df_PK_organs_total_transpose:
                    aucot=df_PK_organs_total_transpose[i].loc['AUC0-t']
                    list_aucot_for_ft.append(aucot)

                list_ft=[]
                for i in list_aucot_for_ft:
                    ft=i/df_PK_organs_total_transpose["–ö—Ä–æ–≤—å"].loc['AUC0-t']
                    list_ft.append(ft)

                ###ft
                list_aucot_for_ft_std=[]
                list_columns_df_PK_organs_total_std_transpose=df_PK_organs_total_std_transpose.columns.tolist()
                for i in list_columns_df_PK_organs_total_std_transpose:
                    aucot_std=df_PK_organs_total_std_transpose[i].loc['AUC0-t']
                    list_aucot_for_ft_std.append(aucot_std)

                list_ft_std=[]
                for i in list_aucot_for_ft_std:
                    ft_std=i/df_PK_organs_total_std_transpose["–ö—Ä–æ–≤—å"].loc['AUC0-t']
                    list_ft_std.append(ft_std)

                df_PK_organs_total_transpose.loc[ len(df_PK_organs_total_transpose.index )] = list_ft


                df_PK_organs_total_transpose.index=['Cmax ' +"("+st.session_state[f'measure_unit_{option}_concentration']+")",'Tmax ' +"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'MRT0‚Üí‚àû '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'T1/2 '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'AUC0-t '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")",'AUC0‚Üí‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")",'AUMC0-‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}\u00B2" +")",'Kel '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")",'f—Ç']
                
                #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ df_PK_organs_total_transpose

                df_organs_trans_trans=df_PK_organs_total_transpose.transpose()


                series_Cmax=df_organs_trans_trans['Cmax ' +"("+st.session_state[f'measure_unit_{option}_concentration']+")"].tolist() 
                series_Cmax=pd.Series([v for v in series_Cmax])

                series_Tmax=df_organs_trans_trans['Tmax ' +"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")"].tolist()       
                series_Tmax=pd.Series([v for v in series_Tmax]) 
                
                series_MRT0_inf= df_organs_trans_trans['MRT0‚Üí‚àû '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")"].tolist()   
                series_MRT0_inf=pd.Series([v for v in series_MRT0_inf])

                series_half_live= df_organs_trans_trans['T1/2 '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")"].tolist()   
                series_half_live=pd.Series([v for v in series_half_live]) 

                series_AUC0_t= df_organs_trans_trans['AUC0-t '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")"].tolist()   
                series_AUC0_t=pd.Series([v for v in series_AUC0_t])

                series_AUC0_inf= df_organs_trans_trans['AUC0‚Üí‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")"].tolist()  
                series_AUC0_inf=pd.Series([v for v in series_AUC0_inf]) 

                series_AUMC0_inf= df_organs_trans_trans['AUMC0-‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}\u00B2" +")"].tolist()   
                series_AUMC0_inf=pd.Series([v for v in series_AUMC0_inf])
          
                series_Kel= df_organs_trans_trans['Kel '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")"].tolist()   
                series_Kel=pd.Series([v for v in series_Kel])

                series_ft= df_organs_trans_trans['f—Ç'].tolist()
                series_ft=pd.Series(series_ft)
                
                df_total_total_organs = pd.concat([series_Cmax,series_Tmax,series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_Kel,series_ft], axis= 1)

                df_total_total_organs.index=df_PK_organs_total_transpose.columns.tolist()
                df_total_total_organs.columns=df_PK_organs_total_transpose.index.tolist() 

                df_total_total_organs_total= df_total_total_organs.transpose()
                df_total_total_organs_total.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å'

                table_heading='–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∫–∞–Ω—è—Ö'
                add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading) 

                add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_total_total_organs_total) 

                ###–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ "–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö"

                ### –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ –æ—Ä–≥–∞–Ω–∞—Ö'
                graph_id = graphic
                add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic) 

                list_list_mean_conc=[]
                list_list_std_conc=[]
                for i in list_df_for_mean_unround_for_graphics: 
                    mean_conc_list=i.loc['Mean'].tolist()
                    std_conc_list=i.loc['SD'].tolist()
                    list_list_mean_conc.append(mean_conc_list)
                    list_list_std_conc.append(std_conc_list)

                list_name_organs_std=[]
                for i in list_name_organs:
                 j= i + " std"
                 list_name_organs_std.append(j)
                
                list_time_new_df = list_t_graph[0]
                
                if st.session_state[f"agree_injection - {option}"] == "intravenously":
                   if st.session_state[f"extrapolate_first_points_{option}"]:
                      #—Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—â–µ–≥–æ —Å—Ä–µ–¥–∏–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                      list_time_new_df = remove_first_element(st.session_state[f"agree_injection - {option}"], list_time_new_df)

                df_mean_conc_graph = pd.DataFrame(list_list_mean_conc, columns =list_time_new_df,index=list_name_organs)
                df_mean_conc_graph_1=df_mean_conc_graph.transpose()
                df_std_conc_graph = pd.DataFrame(list_list_std_conc, columns =list_time_new_df,index=list_name_organs_std)
                df_std_conc_graph_1=df_std_conc_graph.transpose()
                df_concat_mean_std = pd.concat([df_mean_conc_graph_1,df_std_conc_graph_1],sort=False,axis=1)
                
                df_concat_mean_std = remove_first_element(st.session_state[f"agree_injection - {option}"], df_concat_mean_std)

                list_colors = ["blue","green","red","#D6870C","violet","gold","indigo","magenta","lime","tan","teal","coral","pink","#510099","lightblue","yellowgreen","cyan","salmon","brown","black"]
                
                list_t_organs=list(df_concat_mean_std.index) #—É–∂–µ –Ω–æ–ª—å —É–¥–∞–ª–µ–Ω –≤ —Å–ª—É—á–∞–µ –≤–Ω—É—Ç—Ä–∏–≤–µ–Ω–Ω–æ–≥–æ –±–æ–ª—é—Å–∞

                list_zip_mean_std_colors=list(zip(list_name_organs,list_name_organs_std,list_colors))

                #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–µ–π
                initializing_checkbox_status_graph_scaling_widgets(graph_id)

                #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
                st.session_state[f"list_zip_mean_std_colors{graph_id}"] = list_zip_mean_std_colors
                st.session_state[f"list_t_organs{graph_id}"] = list_t_organs
                st.session_state[f"df_concat_mean_std{graph_id}"] = df_concat_mean_std

                if f"first_creating_graphic{graph_id}" not in st.session_state:
                    st.session_state[f"first_creating_graphic{graph_id}"] = True  # –ø–µ—Ä–≤–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                
                if st.session_state[f"first_creating_graphic{graph_id}"]:
                   #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ–ª–µ–π –ª–∏–Ω–µ–π–Ω—ã–µ
                   fig = plot_pk_profile_total_mean_std_doses_organs(list_zip_mean_std_colors,list_t_organs,df_concat_mean_std,st.session_state[f'measure_unit_{option}_time'],
                                                                st.session_state[f'measure_unit_{option}_concentration'],'lin',graph_id)
                   
                   add_or_replace_df_graph(st.session_state[f"list_heading_graphics_word_{option}"],st.session_state[f"list_graphics_word_{option}"],graphic,fig)  

                ### –≤ –ø–æ–ª—É–ª–æ–≥. –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ –æ—Ä–≥–∞–Ω–∞—Ö'
                graph_id = graphic
                add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                #–∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –Ω—É–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –º–µ–Ω—å—à–µ 1 –Ω–∞ np.nan –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                df_concat_mean_std = replace_value_less_one_plot_pk_profile_total_mean_std_doses_organs(df_concat_mean_std)

                list_zip_mean_std_colors=list(zip(list_name_organs,list_name_organs_std,list_colors))

                #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–µ–π
                initializing_checkbox_status_graph_scaling_widgets(graph_id)

                #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
                st.session_state[f"list_zip_mean_std_colors{graph_id}"] = list_zip_mean_std_colors
                st.session_state[f"list_t_organs{graph_id}"] = list_t_organs
                st.session_state[f"df_concat_mean_std{graph_id}"] = df_concat_mean_std
                
                if f"first_creating_graphic{graph_id}" not in st.session_state:
                    st.session_state[f"first_creating_graphic{graph_id}"] = True  # –ø–µ—Ä–≤–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                
                if st.session_state[f"first_creating_graphic{graph_id}"]:
                   #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ–ª–µ–π –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º
                   fig = plot_pk_profile_total_mean_std_doses_organs(list_zip_mean_std_colors,list_t_organs,df_concat_mean_std,st.session_state[f'measure_unit_{option}_time'],
                                                                st.session_state[f'measure_unit_{option}_concentration'],'log',graph_id)
                   add_or_replace_df_graph(st.session_state[f"list_heading_graphics_word_{option}"],st.session_state[f"list_graphics_word_{option}"],graphic,fig)

                ###–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è —Ç–∫–∞–Ω–µ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                graphic='–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö'
                graph_id = graphic
                add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)
            
                #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–µ–π
                initializing_checkbox_status_graph_scaling_widgets(graph_id)

                #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ 
                st.session_state[f"list_name_organs{graph_id}"] = list_name_organs
                st.session_state[f"list_ft{graph_id}"] = list_ft
                st.session_state[f"list_ft_std{graph_id}"] = list_ft_std

                if f"first_creating_graphic{graph_id}" not in st.session_state:
                    st.session_state[f"first_creating_graphic{graph_id}"] = True  # –ø–µ—Ä–≤–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ 
                
                if st.session_state[f"first_creating_graphic{graph_id}"]:
                   fig = plot_tissue_accessibility(list_name_organs,list_ft,list_ft_std,graph_id)

                   add_or_replace_df_graph(st.session_state[f"list_heading_graphics_word_{option}"],st.session_state[f"list_graphics_word_{option}"],graphic,fig)
                
   #–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

   col1, col2 = st.columns([0.66,0.34])
   
   #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
   if panel == "–¢–∞–±–ª–∏—Ü—ã": 
      if st.session_state[f"df_total_PK_{option}"] is not None:
         
         list_keys = [x[:-5] for x in st.session_state[f"list_keys_file_{option}"]]
         st.session_state[f"list_heading_word_{option}"], index_mapping = sort_by_keys_with_indices(st.session_state[f"list_heading_word_{option}"], list_keys)
         st.session_state[f"list_table_word_{option}"] = reorder_list_by_mapping(st.session_state[f"list_table_word_{option}"], index_mapping)

         ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
         visualize_table(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],option)

      else:
          st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

   with col1:
      if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
         if st.session_state[f"df_total_PK_{option}"] is not None:
            
            list_keys = [x[:-5] for x in st.session_state[f"list_keys_file_{option}"]]
            st.session_state[f"list_heading_graphics_word_{option}"], index_mapping = sort_by_keys_with_indices(st.session_state[f"list_heading_graphics_word_{option}"], list_keys)
            st.session_state[f"list_graphics_word_{option}"] = reorder_list_by_mapping(st.session_state[f"list_graphics_word_{option}"], index_mapping)

            #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

            #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
            type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
      ('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∞—Ö", "–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö"),disabled = False, key = f"–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - {option}" )

            count_graphics_for_visual = len(st.session_state[f"list_heading_graphics_word_{option}"])
            list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)

            #—Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–≤–µ—á. –∑–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–æ–≤
            create_session_type_graphics_checked_graphics(option,type_graphics)

            if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏' or type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π' or type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
               selected_kind_individual_graphics = radio_create_individual_graphics(option,st.session_state[f"list_keys_file_{option}"])
               
               if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                  selected_subject_individual_graphics = radio_create_individual_graphics(option,st.session_state[f'list_number_animal_{option}_{selected_kind_individual_graphics}'],True,selected_kind_individual_graphics)

            if st.session_state[f"{type_graphics}_{option}_checked_graphics"]:
               for i in list_range_count_graphics_for_visual:
                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
                      if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                         
                         graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]
                         match = re.search(r'\(([^)]+)\)', graph_id)
                         file_name = match.group(1)
                         
                         measure_unit_org = checking_file_names_organ_graphs(option,file_name)

                         match =  (re.match(r".*‚Ññ(\S+)", graph_id))
                         number_animal = "‚Ññ" + match.group(1)
                         
                         if selected_kind_individual_graphics == file_name and selected_subject_individual_graphics == number_animal:
                         
                            if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                               kind_graphic = 'lin'
                            else:
                               kind_graphic = 'log'

                            rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,create_individual_graphics, st.session_state[f"list_time{graph_id}"],
                                                                      st.session_state[f"list_concentration{graph_id}"],
                                                                      st.session_state[f'measure_unit_{option}_time'],
                                                                      measure_unit_org,
                                                                      kind_graphic,graph_id)

                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
                      if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                         
                         graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]

                         match = re.search(r'\(([^)]+)\)$', graph_id)
                         file_name = match.group(1)
                         
                         measure_unit_org = checking_file_names_organ_graphs(option,file_name)
                         
                         if selected_kind_individual_graphics == file_name:
                            if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                               kind_graphic = 'lin'
                            else:
                               kind_graphic = 'log'

                            rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_total_individual_pk_profiles, st.session_state[f"list_color{graph_id}"],
                                                                      st.session_state[f"df_for_plot_conc_1{graph_id}"],
                                                                      st.session_state[f"list_numer_animal_for_plot{graph_id}"],
                                                                      st.session_state[f'measure_unit_{option}_time'],
                                                                      measure_unit_org, 
                                                                      len(st.session_state[f"list_numer_animal_for_plot{graph_id}"]),
                                                                      kind_graphic,graph_id)

                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
                      if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                         
                         graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]
                         
                         match = re.search(r'\(([^)]+)\)$', graph_id)
                         file_name = match.group(1)
                         
                         measure_unit_org = checking_file_names_organ_graphs(option,file_name)

                         if selected_kind_individual_graphics == file_name:

                            if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                               kind_graphic = 'lin'
                            else:
                               kind_graphic = 'log'

                            rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_pk_profile_individual_mean_std, st.session_state[f"list_time{graph_id}"],
                                                                      st.session_state[f"list_concentration{graph_id}"],
                                                                      st.session_state[f"err_y_1{graph_id}"],
                                                                      st.session_state[f'measure_unit_{option}_time'],
                                                                      measure_unit_org,
                                                                      kind_graphic,graph_id,file_name)
                         
                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö"):
                      if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∞—Ö':
                         
                         graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]

                         if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                            kind_graphic = 'lin'
                         else:
                            kind_graphic = 'log'

                         rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_pk_profile_total_mean_std_doses_organs, st.session_state[f"list_zip_mean_std_colors{graph_id}"],
                                                                   st.session_state[f"list_t_organs{graph_id}"],
                                                                   st.session_state[f"df_concat_mean_std{graph_id}"],
                                                                   st.session_state[f'measure_unit_{option}_time'],
                                                                   st.session_state[f'measure_unit_{option}_concentration'],
                                                                   kind_graphic,graph_id)
                         
                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–¢–∫–∞–Ω–µ–≤–∞—è"):
                      if type_graphics == '–¢–∫–∞–Ω–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ –æ—Ä–≥–∞–Ω–∞—Ö':
                         graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]
                         
                         kind_graphic = 'lin'

                         rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_tissue_accessibility, st.session_state[f"list_name_organs{graph_id}"],
                                                                   st.session_state[f"list_ft{graph_id}"],st.session_state[f"list_ft_std{graph_id}"],
                                                                  graph_id)
            
            with col2:
                     
                 #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ñ–æ—Ä–º–ª–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
                 selected = style_icon_report()
                  
                 if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":
                    ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
                       create_graphic(st.session_state[f"list_graphics_word_{option}"],st.session_state[f"list_heading_graphics_word_{option}"])
         else:
             st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")
################################################################################################

if option == '–õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è':
   
   st.header('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è')
   
   col1, col2 = st.columns([0.66, 0.34])

   with col1:

      panel = main_radio_button_study(option)

      #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
      list_heading_word=[]
      list_table_word=[]
      list_graphics_word=[]
      list_heading_graphics_word=[]
      initializing_session_lists_tables_graphics(option,list_heading_word,list_table_word,list_graphics_word,list_heading_graphics_word)

      if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
         
         ######### –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞
         with col2:
              
              #–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
              settings_additional_research_parameters(option,custom_success)

         measure_unit_lin_time = select_time_unit(f"select_time_unit{option}")
         measure_unit_lin_concentration = select_concentration_unit(f"select_concentration_unit{option}")
         measure_unit_dose_lin = select_dose_unit(f"select_dose_unit{option}")
         #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
         save_session_state_measure_unit_value(measure_unit_lin_time,measure_unit_lin_concentration,f"{option}",measure_unit_dose_lin)

         #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "method_auc"
         if f"index_method_auc - {option}" not in st.session_state:
             st.session_state[f"index_method_auc - {option}"] = 0

         method_auc = st.radio("üìà –ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC",('linear',"linear-up/log-down"),key = f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}", index = st.session_state[f"index_method_auc - {option}"])
         
         if st.session_state[f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}"] == 'linear':
            st.session_state[f"index_method_auc - {option}"] = 0
         if st.session_state[f"–ú–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞ AUC –∏ AUMC - {option}"] == "linear-up/log-down":
            st.session_state[f"index_method_auc - {option}"] = 1

         if st.session_state[f"agree_injection - {option}"] == "intravenously":
              # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
              if f"extrapolate_first_points_{option}" not in st.session_state:
                  st.session_state[f"extrapolate_first_points_{option}"] = False

              # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ–∫–±–æ–∫—Å–∞
              extrapolate_first_points = st.checkbox(
                  "–≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç–æ—á–µ–∫",
                  value=st.session_state[f"extrapolate_first_points_{option}"],
                  key = "key" + f"extrapolate_first_points_{option}"
              )

              st.session_state[f"extrapolate_first_points_{option}"] = extrapolate_first_points   
            
         file_uploader = st.file_uploader("",accept_multiple_files=True, key='–§–∞–π–ª—ã –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è', help = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–æ–∫ (–Ω–µ –º–µ–Ω–µ–µ 3-—Ö —Ñ–∞–π–ª–æ–≤); —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–≤–æ–µ–π –¥–æ–∑–∏—Ä–æ–≤–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–æ–∑–∏—Ä–æ–≤–∫–∞ 50'. –ï—Å–ª–∏ –¥–æ–∑–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥c—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ, –¥—Ä–æ–±—å –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É. –°–ª–æ–≤–æ '–î–æ–∑–∏—Ä–æ–≤–∫–∞' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ!")
         
         if 'list_files_name_doses' not in st.session_state:
             st.session_state['list_files_name_doses'] = []

         ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
         list_files_name_doses = []
         if file_uploader is not None:
            for i in file_uploader:
                save_uploadedfile(i)
                st.session_state[str(i.name)] = i.name
                list_files_name_doses.append(i.name)
         
         st.session_state['list_files_name_doses'] = list_files_name_doses
         
         if st.session_state['list_files_name_doses'] != []: 
              custom_success(f"–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {', '.join(st.session_state['list_files_name_doses'])}")
         
         list_keys_file_lin = []
         for i in st.session_state.keys():
             if i.__contains__("xlsx") and i.__contains__("–î–æ–∑–∏—Ä–æ–≤–∫–∞") and (not i.__contains__("edited_df")): ###—Å–ª–æ–≤–æ –¥–æ–∑–∏—Ä–æ–≤–∫–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ—Ç –¥—Ä—É–≥–∏—Ö xlsx –æ—Ä–≥–∞–Ω–æ–≤, —Ç.–∫ —Ç–∞–º —Ç–æ–∂–µ –∫–ª—é—á–∏ –∏–º—è —Ñ–∞–π–ª–∞; #–æ–±—Ä–µ–∑–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è "edited_df"
                list_keys_file_lin.append(i)
         
         ###—Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–æ–∑—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω—Ñ—É–∑–∏–∏

         if list_keys_file_lin != []:
            
            list_keys_file_lin_float = []
            for i in list_keys_file_lin:
                if "." in i[10:-5]: 
                   list_keys_file_lin_float.append(float(i[10:-5]))
                else:
                   list_keys_file_lin_float.append(int(i[10:-5]))
            list_keys_file_lin_float.sort()

            list_keys_file_lin = [f"–î–æ–∑–∏—Ä–æ–≤–∫–∞ {str(float)}.xlsx" for float in list_keys_file_lin_float]

            for i in list_keys_file_lin:
                 
                 file_name=i[10:-5]

                 initialization_dose_infusion_time_session(option,file_name)
                 
                 col3, col4 = st.columns([0.34,0.66])

                 with col2:
                     
                     with st.container(border=True):

                          dose = st.text_input(f"–î–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–∑–∏—Ä–æ–≤–∫–æ–π {file_name}", key='–î–æ–∑–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ ' + f"dose_{option}_{file_name}", value = st.session_state[f"dose_{option}_{file_name}"])
                  
                          st.session_state[f"dose_{option}_{file_name}"] = dose

                          if st.session_state[f"agree_injection - {option}"] == "infusion":
                               
                               infusion_time = st.text_input(f"–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ñ—É–∑–∏–∏ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–∑–∏—Ä–æ–≤–∫–æ–π {file_name}", key='–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ñ—É–∑–∏–∏ ' + f"infusion_time_{option}_{file_name}", value = st.session_state[f"infusion_time_{option}_{file_name}"])
                               st.session_state[f"infusion_time_{option}_{file_name}"] = infusion_time
         
         
         # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∑—ã
         missing_doses = []
         for file_name in list_keys_file_lin:
             file_name=file_name[10:-5]
             dose = st.session_state[f"dose_{option}_{file_name}"]
             if dose != '':
                missing_doses.append(dose)

         if len(missing_doses) == len(list_keys_file_lin):
            cheking_doses = True
         else:
            cheking_doses = False

         if ((list_keys_file_lin != []) and cheking_doses and (st.session_state[f"agree_injection - {option}"] == "infusion" and st.session_state[f"infusion_time_{option}_{file_name}"] != "") and st.session_state[f'measure_unit_{option}_concentration']):
              start = True
         elif ((list_keys_file_lin != []) and cheking_doses and (st.session_state[f"agree_injection - {option}"] != "infusion" and st.session_state[f"infusion_time_{option}_{file_name}"] == "") and st.session_state[f'measure_unit_{option}_concentration']):
            start = True
         else:
            start = False

         if start:

             list_name_doses=[]
             list_df_unrounded=[]
             list_df_for_mean_unround_for_graphics=[]
             list_t_graph=[]
             
             list_keys_file_lin_float = []
             for i in list_keys_file_lin:
                 if "." in i[10:-5]: 
                    list_keys_file_lin_float.append(float(i[10:-5]))
                 else:
                    list_keys_file_lin_float.append(int(i[10:-5]))
             list_keys_file_lin_float.sort()

             list_keys_file_lin = [f"–î–æ–∑–∏—Ä–æ–≤–∫–∞ {str(float)}.xlsx" for float in list_keys_file_lin_float]
             st.session_state[f'list_keys_file_{option}'] = list_keys_file_lin

             for i in list_keys_file_lin:
                 df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",i))

                 file_name=i[10:-5]

                 st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ st.session_state[f'measure_unit_{option}_dose'])
                 
                 ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                 df = edit_frame(df,i)

                 ###–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö 
                 count_rows_number_lin= len(df.axes[0])

                 table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ st.session_state[f'measure_unit_{option}_dose']
                 add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)

                 df_stats = create_table_descriptive_statistics(df)
                 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∫–æ–ª–æ–Ω–∫—É "–ù–æ–º–µ—Ä"
                 df_stats_reset = df_stats.reset_index()
                 # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –∏–Ω–¥–µ–∫—Å–∞
                 df_stats_reset.rename(columns={'index': '–ù–æ–º–µ—Ä'}, inplace=True)
                 # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (–Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ df)
                 df_stats_reset.index = range(df.index.max() + 1, df.index.max() + 1 + len(df_stats_reset))
                 # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                 df_concat_round_str_transpose = pd.concat([df, df_stats_reset], axis=0, ignore_index=False)

                 add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_concat_round_str_transpose)

                 ########### –≥—Ä–∞—Ñ–∏–∫–∏    
                 ######–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ    
                 # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

                 col_mapping = df.columns.tolist()
                 col_mapping.remove('–ù–æ–º–µ—Ä')

                 count_row_df = len(df.axes[0])

                 list_time = []
                 for i in col_mapping:
                     numer=float(i)
                     list_time.append(numer)
                 list_t_graph.append(list_time) 
                 
                 list_time = remove_first_element(st.session_state[f"agree_injection - {option}"], list_time)

                 list_number_animal = []

                 for r in range(0,count_row_df):

                     list_concentration=df.iloc[r].tolist()

                     numer_animal=list_concentration[0]

                     list_number_animal.append(numer_animal)

                     list_concentration.pop(0) #—É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ

                     list_concentration = [float(v) for v in list_concentration]

                     list_concentration = remove_first_element(st.session_state[f"agree_injection - {option}"], list_concentration)

                     graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ '  +file_name+" "+ st.session_state[f'measure_unit_{option}_dose']+',  '+numer_animal
                     graph_id = graphic
                     add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                     first_creating_create_individual_graphics(graph_id,list_time,list_concentration,st.session_state[f'measure_unit_{option}_time'],
                                                               st.session_state[f'measure_unit_{option}_concentration'],"lin",add_or_replace_df_graph, 
                                                               (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))
 
                     #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º np.nan
                     graphic='–ì—Ä–∞—Ñ–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ st.session_state[f'measure_unit_{option}_dose']+',  '+numer_animal
                     graph_id = graphic
                     add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                     # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ 1 –Ω–∞ np.nan
                     list_concentration = [np.nan if x <= 0 else x for x in list_concentration]
                     
                     first_creating_create_individual_graphics(graph_id,list_time,list_concentration,st.session_state[f'measure_unit_{option}_time'],
                                                               st.session_state[f'measure_unit_{option}_concentration'],"log",add_or_replace_df_graph, 
                                                               (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))
                 
                 st.session_state[f'list_number_animal_{option}_{f"–î–æ–∑–∏—Ä–æ–≤–∫–∞ {file_name}"}'] = list_number_animal

                 # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

                 df_for_plot_conc=df.drop(['–ù–æ–º–µ—Ä'], axis=1)
                 df_for_plot_conc_1 = df_for_plot_conc.transpose()

                 list_numer_animal_for_plot=df['–ù–æ–º–µ—Ä'].tolist()
                 count_numer_animal = len(list_numer_animal_for_plot) ### –¥–ª—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–µ–≥–µ–Ω–¥—ã

                 list_color = [
                   "blue", "green", "red", "#D6870C", "violet", "gold", "indigo", "magenta", "lime", "tan", 
                   "teal", "coral", "pink", "#510099", "lightblue", "yellowgreen", "cyan", "salmon", "brown", "black",
                   "darkblue", "darkgreen", "darkred", "navy", "purple", "orangered", "darkgoldenrod", "slateblue", 
                   "deepskyblue", "mediumseagreen", "chocolate", "peru", "crimson", "olive", "cadetblue", "chartreuse", 
                   "darkcyan", "lightcoral", "mediumvioletred", "midnightblue", "sienna", "tomato", "turquoise", 
                   "wheat", "plum", "thistle", "aquamarine", "dodgerblue", "lawngreen", "rosybrown", "seagreen"
                 ]
                 
                 df_for_plot_conc_1 = remove_first_element(st.session_state[f"agree_injection - {option}"], df_for_plot_conc_1)

                 graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ " +file_name+" "+ st.session_state[f'measure_unit_{option}_dose']
                 graph_id = graphic
                 add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic) 

                 first_creating_plot_total_individual_pk_profiles(graph_id,list_color,df_for_plot_conc_1,list_numer_animal_for_plot,st.session_state[f'measure_unit_{option}_time'],
                                                                  st.session_state[f'measure_unit_{option}_concentration'],count_numer_animal,
                                                                  'lin',add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))
                 
                 # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –º–µ—Ç–æ–¥–æ–º –∑–∞–º–µ–Ω—ã np.nan
                 df_for_plot_conc_1 = replace_value_less_one_plot_total_individual_pk_profiles(df_for_plot_conc_1)

                 graphic="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ " +file_name+" "+ st.session_state[f'measure_unit_{option}_dose']
                 graph_id = graphic
                 add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                 first_creating_plot_total_individual_pk_profiles(graph_id,list_color,df_for_plot_conc_1,list_numer_animal_for_plot,st.session_state[f'measure_unit_{option}_time'],
                                                                  st.session_state[f'measure_unit_{option}_concentration'],count_numer_animal,
                                                                  'log',add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))

                  ###—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ    
                 # –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ st.session_state[f'measure_unit_{option}_dose']
                 graph_id = graphic
                 add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                 list_time = []
                 for i in col_mapping:
                     numer=float(i)
                     list_time.append(numer)
                 
                 list_time = remove_first_element(st.session_state[f"agree_injection - {option}"], list_time)

                 df_averaged_concentrations=df_stats
                 list_concentration=df_averaged_concentrations.loc['Mean'].tolist()
                 err_y_1=df_averaged_concentrations.loc['SD'].tolist()

                 list_concentration,err_y_1 = remove_first_element(st.session_state[f"agree_injection - {option}"], list_concentration,err_y_1)
                 
                 special_file_name = file_name.replace("–î–æ–∑–∏—Ä–æ–≤–∫–∞", "") + " " + st.session_state[f'measure_unit_{option}_dose']
                 

                 first_creating_plot_pk_profile_individual_mean_std(graph_id,list_time,list_concentration,err_y_1,st.session_state[f'measure_unit_{option}_time'],
                                                                    st.session_state[f'measure_unit_{option}_concentration'],'lin',special_file_name,
                                                                    add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))

                 #–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                 #–¥–ª—è –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º. –ø–æ—Å—Ç–æ—Ä–∏–º –±–µ–∑ –Ω—É–ª—è
                 # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ 1 –Ω–∞ np.nan
                 graphic='–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name+" "+ st.session_state[f'measure_unit_{option}_dose']
                 graph_id = graphic
                 add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                 list_concentration = [np.nan if x <= 0 else x for x in list_concentration]
                 
                 special_file_name = file_name.replace("–î–æ–∑–∏—Ä–æ–≤–∫–∞", "") + " " + st.session_state[f'measure_unit_{option}_dose']

                 first_creating_plot_pk_profile_individual_mean_std(graph_id,list_time,list_concentration,err_y_1,st.session_state[f'measure_unit_{option}_time'],
                                                                    st.session_state[f'measure_unit_{option}_concentration'],'log',special_file_name,
                                                                    add_or_replace_df_graph, (st.session_state[f"list_heading_graphics_word_{option}"],
                                                                                              st.session_state[f"list_graphics_word_{option}"],graphic))

                 ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

                 if f"agree_cmax2 - {option} {file_name}" not in st.session_state:
                    st.session_state[f"agree_cmax2 - {option} {file_name}"] = False

                 if st.session_state[f"agree_injection - {option}"] == "extravascular":
                     result_PK = pk_parametrs_total_extravascular(df,f"{option} {file_name}",method_auc,st.session_state[f"dose_{option}_{file_name}"],st.session_state[f'measure_unit_{option}_concentration'],st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'])
                 elif st.session_state[f"agree_injection - {option}"] == "intravenously":
                     if st.session_state[f"extrapolate_first_points_{option}"]:
                        df = remove_second_column(df)
                     result_PK = pk_parametrs_total_intravenously(df,f"{option} {file_name}",method_auc,st.session_state[f"dose_{option}_{file_name}"],st.session_state[f'measure_unit_{option}_concentration'],st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'])
                 else:
                     result_PK = pk_parametrs_total_infusion(df,f"{option} {file_name}",method_auc,st.session_state[f"dose_{option}_{file_name}"],st.session_state[f'measure_unit_{option}_concentration'],st.session_state[f'measure_unit_{option}_time'],st.session_state[f'measure_unit_{option}_dose'],st.session_state[f"infusion_time_{option}_{file_name}"])

                 if result_PK is not None:

                     df_total_PK_lin = result_PK["df_total_PK"]
                     df_concat_PK_lin = result_PK["df_concat_PK"]
                     list_cmax_1_lin = result_PK["list_cmax_1"]
                         
                     st.session_state[f"df_total_PK_{option}"] = df_total_PK_lin

                     table_heading='–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤ –¥–æ–∑–∏—Ä–æ–≤–∫–µ ' +file_name +" "+ st.session_state[f'measure_unit_{option}_dose']
                     add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)

                     add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_total_PK_lin)

                     #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ñ—Ä–µ–π–º–æ–≤, –¥–æ–∑ –∏ —Ç.–¥.

                     list_name_doses.append(file_name)
                     list_df_unrounded.append(df_concat_PK_lin)
                     list_df_for_mean_unround_for_graphics.append(df_stats)

             ###–ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
             button_calculation = False
             
             if (list_keys_file_lin != []) and st.session_state[f'measure_unit_{option}_concentration'] and st.session_state[f'measure_unit_{option}_dose']  and result_PK is not None:
              
                condition_cmax1 =  len(list_cmax_1_lin) == count_rows_number_lin

                button_calculation = True
                
                if button_calculation == True:
                   custom_success('–†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã!')
                else:   
                   st.error('üîß–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã!')
             
             if (list_keys_file_lin != []) and st.session_state[f'measure_unit_{option}_concentration'] and st.session_state[f'measure_unit_{option}_dose'] and button_calculation:
                
                
                list_list_PK_par_mean=[]
                for i in list_df_unrounded: 
                    mean_—Åmax=i['Cmax'].loc['Mean']
                    mean_tmax=i['Tmax'].loc['Mean']
                    mean_mrt0inf=i['MRT0‚Üí‚àû'].loc['Mean']
                    mean_thalf=i['T1/2'].loc['Mean']
                    mean_auc0t=i['AUC0-t'].loc['Mean']
                    mean_auc0inf=i['AUC0‚Üí‚àû'].loc['Mean']
                    mean_aumc0inf=i['AUMC0-‚àû'].loc['Mean']
                    mean_—Åmaxdevaucot=i['–°max/AUC0-t'].loc['Mean']
                    mean_kel=i['Kel'].loc['Mean']
                    if st.session_state[f"agree_injection - {option}"] == "extravascular":
                       mean_cl=i['Cl/F'].loc['Mean']
                       mean_vd=i['Vz/F'].loc['Mean']
                    else:
                       mean_cl=i['Cl'].loc['Mean']
                       mean_vd=i['Vz'].loc['Mean']
                    list_list_PK_par_mean.append([mean_—Åmax,mean_tmax,mean_mrt0inf,mean_thalf,mean_auc0t,mean_auc0inf,mean_aumc0inf,mean_—Åmaxdevaucot,mean_kel,mean_cl,mean_vd]) 

                list_name_doses_with_measure_unit=[]
                for i in list_name_doses:
                 j= i + " " + st.session_state[f'measure_unit_{option}_dose']
                 list_name_doses_with_measure_unit.append(j)

                ### –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–∑
                if st.session_state[f"agree_injection - {option}"] == "extravascular":
                   df_PK_doses_total = pd.DataFrame(list_list_PK_par_mean, columns =['Cmax ' +"("+st.session_state[f'measure_unit_{option}_concentration']+")",'Tmax ' +"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'MRT0‚Üí‚àû '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'T1/2 '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'AUC0-t '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")",'AUC0‚Üí‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")",'AUMC0-‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}\u00B2" +")",'–°max/AUC0-t '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")",'Kel '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")",'Cl/F ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})/{st.session_state[f'measure_unit_{option}_time']}"+")",'Vz/F ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})"+")"],index=list_name_doses_with_measure_unit)
                else:
                   df_PK_doses_total = pd.DataFrame(list_list_PK_par_mean, columns =['Cmax ' +"("+st.session_state[f'measure_unit_{option}_concentration']+")",'Tmax ' +"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'MRT0‚Üí‚àû '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'T1/2 '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")",'AUC0-t '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")",'AUC0‚Üí‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")",'AUMC0-‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}\u00B2" +")",'–°max/AUC0-t '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")",'Kel '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")",'Cl ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})/{st.session_state[f'measure_unit_{option}_time']}"+")",'Vz ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})"+")"],index=list_name_doses_with_measure_unit)
                
                df_PK_doses_total_transpose=df_PK_doses_total.transpose()

                #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ df_PK_doses_total_transpose

                df_doses_trans_trans=df_PK_doses_total_transpose.transpose()

                series_Cmax=df_doses_trans_trans['Cmax ' +"("+st.session_state[f'measure_unit_{option}_concentration']+")"].tolist() 
                series_Cmax=pd.Series([v for v in series_Cmax])

                series_Tmax=df_doses_trans_trans['Tmax ' +"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")"].tolist()       
                series_Tmax=pd.Series([v for v in series_Tmax])

                series_MRT0_inf= df_doses_trans_trans['MRT0‚Üí‚àû '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")"].tolist()   
                series_MRT0_inf=pd.Series([v for v in series_MRT0_inf])

                series_half_live= df_doses_trans_trans['T1/2 '+"("+f"{st.session_state[f'measure_unit_{option}_time']}"+")"].tolist()   
                series_half_live=pd.Series([v for v in series_half_live]) 

                series_AUC0_t= df_doses_trans_trans['AUC0-t '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")"].tolist()   
                series_AUC0_t=pd.Series([v for v in series_AUC0_t])

                series_AUC0_inf= df_doses_trans_trans['AUC0‚Üí‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}" +")"].tolist()  
                series_AUC0_inf=pd.Series([v for v in series_AUC0_inf]) 

                series_AUMC0_inf= df_doses_trans_trans['AUMC0-‚àû '+"("+st.session_state[f'measure_unit_{option}_concentration']+f"√ó{st.session_state[f'measure_unit_{option}_time']}\u00B2" +")"].tolist()   
                series_AUMC0_inf=pd.Series([v for v in series_AUMC0_inf])

                series_–°max_dev_AUC0_t= df_doses_trans_trans['–°max/AUC0-t '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")"].tolist()  
                series_–°max_dev_AUC0_t=pd.Series([v for v in series_–°max_dev_AUC0_t]) 

                series_Kel= df_doses_trans_trans['Kel '+"("+f"{st.session_state[f'measure_unit_{option}_time']}\u207B\u00B9"+")"].tolist()   
                series_Kel=pd.Series([v for v in series_Kel])
                
                if st.session_state[f"agree_injection - {option}"] == "extravascular":
                   series_CL= df_doses_trans_trans['Cl/F ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})/{st.session_state[f'measure_unit_{option}_time']}"+")"].tolist()  
                   series_CL=pd.Series([v for v in series_CL]) 

                   series_Vd= df_doses_trans_trans['Vz/F ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})"+")"].tolist()   
                   series_Vd=pd.Series([v for v in series_Vd])
                else:
                   series_CL= df_doses_trans_trans['Cl ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})/{st.session_state[f'measure_unit_{option}_time']}"+")"].tolist()  
                   series_CL=pd.Series([v for v in series_CL]) 

                   series_Vd= df_doses_trans_trans['Vz ' +"("+f"({st.session_state[f'measure_unit_{option}_dose']})/({st.session_state[f'measure_unit_{option}_concentration']})"+")"].tolist()   
                   series_Vd=pd.Series([v for v in series_Vd])
                
                df_total_total_doses = pd.concat([series_Cmax, series_Tmax,series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_inf,series_–°max_dev_AUC0_t,series_Kel,series_CL,series_Vd], axis= 1)

                df_total_total_doses.index=df_PK_doses_total_transpose.columns.tolist()
                df_total_total_doses.columns=df_PK_doses_total_transpose.index.tolist() 

                df_total_total_doses_total= df_total_total_doses.transpose()
                df_total_total_doses_total.index.name = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å'
             
                table_heading='–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö'
                add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading)

                add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_total_total_doses_total)

                ###–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ "–§–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö"

                graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö'
                graph_id= graphic
                add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic) 

                ### –≤ –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                list_list_mean_conc=[]
                list_list_std_conc=[]
                for i in list_df_for_mean_unround_for_graphics: 
                    mean_conc_list=i.loc['Mean'].tolist()
                    std_conc_list=i.loc['SD'].tolist()
                    list_list_mean_conc.append(mean_conc_list)
                    list_list_std_conc.append(std_conc_list)

                list_name_doses_with_measure_unit_std=[]
                for i in list_name_doses_with_measure_unit:
                 j= i + " std"
                 list_name_doses_with_measure_unit_std.append(j)

                list_time_new_df = list_t_graph[0]

                if st.session_state[f"agree_injection - {option}"] == "intravenously":
                   if st.session_state[f"extrapolate_first_points_{option}"]:
                      #—Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—â–µ–≥–æ —Å—Ä–µ–¥–∏–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                      list_time_new_df = remove_first_element(st.session_state[f"agree_injection - {option}"], list_time_new_df)

                df_mean_conc_graph = pd.DataFrame(list_list_mean_conc, columns =list_time_new_df,index=list_name_doses_with_measure_unit)
                df_mean_conc_graph_1=df_mean_conc_graph.transpose()
                df_std_conc_graph = pd.DataFrame(list_list_std_conc, columns =list_time_new_df,index=list_name_doses_with_measure_unit_std)
                df_std_conc_graph_1=df_std_conc_graph.transpose()
                df_concat_mean_std= pd.concat([df_mean_conc_graph_1,df_std_conc_graph_1],sort=False,axis=1)

                df_concat_mean_std = remove_first_element(st.session_state[f"agree_injection - {option}"], df_concat_mean_std)

                list_colors = ["black","red","blue","green","#D6870C"]

                list_t_doses=list(df_concat_mean_std.index)

                list_zip_mean_std_colors=list(zip(list_name_doses_with_measure_unit,list_name_doses_with_measure_unit_std,list_colors))
                
                #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–µ–π
                initializing_checkbox_status_graph_scaling_widgets(graph_id)
                
                #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
                st.session_state[f"list_zip_mean_std_colors{graph_id}"] = list_zip_mean_std_colors
                st.session_state[f"list_t_doses{graph_id}"] = list_t_doses
                st.session_state[f"df_concat_mean_std{graph_id}"] = df_concat_mean_std

                if f"first_creating_graphic{graph_id}" not in st.session_state:
                    st.session_state[f"first_creating_graphic{graph_id}"] = True  # –ø–µ—Ä–≤–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                
                if st.session_state[f"first_creating_graphic{graph_id}"]:
                   #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ–ª–µ–π –ª–∏–Ω–µ–π–Ω—ã–µ
                   fig = plot_pk_profile_total_mean_std_doses_organs(list_zip_mean_std_colors,list_t_doses,df_concat_mean_std,st.session_state[f'measure_unit_{option}_time'],
                                                                st.session_state[f'measure_unit_{option}_concentration'],'lin',graph_id)
                   add_or_replace_df_graph(st.session_state[f"list_heading_graphics_word_{option}"],st.session_state[f"list_graphics_word_{option}"],graphic,fig)

                ### –≤ –ø–æ–ª—É–ª–æ–≥. –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                graphic='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–≤ –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö) –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö'
                graph_id= graphic
                add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)
                
                #–∑–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –Ω—É–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –º–µ–Ω—å—à–µ 1 –Ω–∞ np.nan –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                df_concat_mean_std = df_concat_mean_std.copy(deep=True)
                df_concat_mean_std = replace_value_less_one_plot_pk_profile_total_mean_std_doses_organs(df_concat_mean_std)

                list_zip_mean_std_colors=list(zip(list_name_doses_with_measure_unit,list_name_doses_with_measure_unit_std,list_colors))
                
                #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–µ–π
                initializing_checkbox_status_graph_scaling_widgets(graph_id) 

                #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
                st.session_state[f"list_zip_mean_std_colors{graph_id}"] = list_zip_mean_std_colors
                st.session_state[f"list_t_doses{graph_id}"] = list_t_doses
                st.session_state[f"df_concat_mean_std{graph_id}"] = df_concat_mean_std
                
                if f"first_creating_graphic{graph_id}" not in st.session_state:
                    st.session_state[f"first_creating_graphic{graph_id}"] = True  # –ø–µ—Ä–≤–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                
                if st.session_state[f"first_creating_graphic{graph_id}"]:
                   #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ–ª–µ–π –ø–æ–ª—É–ª–æ–≥–∞—Ä–∏—Ñ–º
                   fig = plot_pk_profile_total_mean_std_doses_organs(list_zip_mean_std_colors,list_t_doses,df_concat_mean_std,st.session_state[f'measure_unit_{option}_time'],
                                                                st.session_state[f'measure_unit_{option}_concentration'],'log',graph_id)
                   add_or_replace_df_graph(st.session_state[f"list_heading_graphics_word_{option}"],st.session_state[f"list_graphics_word_{option}"],graphic,fig)
 
                # –õ–∏–Ω–µ–π–Ω–æ—Å—Ç—å –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
                list_AUC0_inf_lin = []
                for i in list_df_unrounded: 
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è AUC0‚Üí‚àû –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ–∑—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                    mean_auc0inf = i['AUC0‚Üí‚àû'][:'N'].iloc[:-1].to_list()
                    list_AUC0_inf_lin.extend(mean_auc0inf)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º extend, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–∑–∏—Ä–æ–≤–æ–∫, –ø–æ–≤—Ç–æ—Ä—è—è –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
                list_name_doses_lin_float = [float(dose) for dose in list_name_doses for _ in range(len(mean_auc0inf))]
                
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                df_for_lin = pd.DataFrame({
                    'AUC0‚Üí‚àû': list_AUC0_inf_lin,
                    'doses': list_name_doses_lin_float
                })

                # –ó–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                AUC0_inf = df_for_lin['AUC0‚Üí‚àû']

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –º–æ–¥–µ–ª–∏
                doses_with_const = sm.add_constant(df_for_lin['doses'])

                # –°—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                model = sm.OLS(AUC0_inf, doses_with_const).fit()
                
                df1_model = int(round(model.df_model,0))
                st.session_state['df1_model_lin'] = df1_model
                df2_model = int(round(model.df_resid,0))
                st.session_state['df2_model_lin'] = df2_model
                
                print_model = model.summary()

                graphic='–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π AUC0‚Üí‚àû –æ—Ç –≤–µ–ª–∏—á–∏–Ω –≤–≤–æ–¥–∏–º—ã—Ö –¥–æ–∑'
                graph_id = graphic
                add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                list_AUC0_inf_lin_mean = []
                list_AUC0_inf_lin_std = []
                for i in list_df_unrounded: 
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è AUC0‚Üí‚àû –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ–∑—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                    mean_auc0_inf = i['AUC0‚Üí‚àû'].loc['Mean']
                    std_auc0_inf = i['AUC0‚Üí‚àû'].loc['SD']
                    list_AUC0_inf_lin_mean.append(mean_auc0_inf)
                    list_AUC0_inf_lin_std.append(std_auc0_inf)
                
                list_name_doses_lin_float = [float(i) for i in list_name_doses]


                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                df_for_lin_mean = pd.DataFrame({
                    'AUC0‚Üí‚àû_mean': list_AUC0_inf_lin_mean,
                    'AUC0‚Üí‚àû_std': list_AUC0_inf_lin_std,
                    'doses': list_name_doses_lin_float
                    
                })

                if 'df1_model_lin' not in st.session_state:
                   st.session_state['df1_model_lin'] = 1

                if 'df2_model_lin' not in st.session_state:
                   st.session_state['df2_model_lin'] = 1

                ###–≥—Ä–∞—Ñ–∏–∫ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å–∏–∏

                #–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–µ–π
                initializing_checkbox_status_graph_scaling_widgets(graph_id)

                #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
                st.session_state.df_for_lin_mean = df_for_lin_mean  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, DataFrame
                st.session_state.model = model  # –ú–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏

                if f"first_creating_graphic{graph_id}" not in st.session_state:
                    st.session_state[f"first_creating_graphic{graph_id}"] = True  # –ø–µ—Ä–≤–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                
                if st.session_state[f"first_creating_graphic{graph_id}"]:
                   #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                   kind_graphic = 'lin'
                   fig = create_graphic_lin(df_for_lin_mean,st.session_state[f'measure_unit_{option}_dose'],st.session_state[f'measure_unit_{option}_concentration'],
                   st.session_state[f'measure_unit_{option}_time'],graph_id, model,kind_graphic)
    
                   add_or_replace_df_graph(st.session_state[f"list_heading_graphics_word_{option}"],st.session_state[f"list_graphics_word_{option}"],graphic,fig)

                graphic='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AUC0‚Üí‚àû'
                add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)

                #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∏—Å—É–Ω–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
                fig = create_graphic_lin_parameters(model)
                
                add_or_replace_df_graph(st.session_state[f"list_heading_graphics_word_{option}"],st.session_state[f"list_graphics_word_{option}"],graphic,fig)

   #–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

   col1, col2 = st.columns([0.66,0.34])
         
   #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
   if panel == "–¢–∞–±–ª–∏—Ü—ã":
      if st.session_state[f"df_total_PK_{option}"] is not None: 

         ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
         visualize_table(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],option)

      else:
          st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

   with col1:
      if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":
         if st.session_state[f"df_total_PK_{option}"] is not None: 
            #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

            #–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
            type_graphics = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥—Ä–∞—Ñ–∏–∫–æ–≤',
      ('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏', '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π', '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π AUC0‚Üí‚àû –æ—Ç –≤–µ–ª–∏—á–∏–Ω –≤–≤–æ–¥–∏–º—ã—Ö –¥–æ–∑", "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AUC0‚Üí‚àû"),disabled = False, key = "–í–∏–¥ –≥—Ä–∞—Ñ–∏–∫–∞ - –ò–õ" )

            count_graphics_for_visual = len(st.session_state[f"list_heading_graphics_word_{option}"])
            list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)

            #—Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–≤–µ—á. –∑–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≥—Ä–∞—Ñ–∏–∫–æ–≤
            create_session_type_graphics_checked_graphics(option,type_graphics)

            if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏' or type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π' or type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
               selected_kind_individual_graphics = radio_create_individual_graphics(option,st.session_state[f'list_keys_file_{option}'])

               if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                  selected_subject_individual_graphics = radio_create_individual_graphics(option,st.session_state[f'list_number_animal_{option}_{selected_kind_individual_graphics}'],True,selected_kind_individual_graphics)

            if st.session_state[f"{type_graphics}_{option}_checked_graphics"]:
               for i in list_range_count_graphics_for_visual:
                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ"): 
                      if type_graphics == '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏':
                         
                         graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]

                         match = re.search(r'\b–¥–æ–∑–∏—Ä–æ–≤–∫–µ\s+(\d+(?:[.,]\d+)*)', graph_id)
                         number = match.group(1)
                         file_name = f"–î–æ–∑–∏—Ä–æ–≤–∫–∞ {number}"

                         match =  (re.match(r".*‚Ññ(\S+)", graph_id))
                         number_animal = "‚Ññ" + match.group(1)

                         if selected_kind_individual_graphics == file_name and selected_subject_individual_graphics == number_animal:
                            if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                               kind_graphic = 'lin'
                            else:
                               kind_graphic = 'log'

                            rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,create_individual_graphics, st.session_state[f"list_time{graph_id}"],
                                                                   st.session_state[f"list_concentration{graph_id}"],
                                                                   st.session_state[f'measure_unit_{option}_time'],
                                                                   st.session_state[f'measure_unit_{option}_concentration'],
                                                                   kind_graphic,graph_id)
                            
                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö"):   
                      if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π':
                            
                         graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]

                         match = re.search(r'\b–¥–æ–∑–∏—Ä–æ–≤–∫–µ\s+(\d+(?:[.,]\d+)*)', graph_id)
                         number = match.group(1)
                         file_name = f"–î–æ–∑–∏—Ä–æ–≤–∫–∞ {number}"

                         if selected_kind_individual_graphics == file_name:
                            if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                               kind_graphic = 'lin'
                            else:
                               kind_graphic = 'log'

                            rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_total_individual_pk_profiles, st.session_state[f"list_color{graph_id}"],
                                                                      st.session_state[f"df_for_plot_conc_1{graph_id}"],
                                                                      st.session_state[f"list_numer_animal_for_plot{graph_id}"],
                                                                      st.session_state[f'measure_unit_{option}_time'],
                                                                      st.session_state[f'measure_unit_{option}_concentration'], 
                                                                      len(st.session_state[f"list_numer_animal_for_plot{graph_id}"]),
                                                                      kind_graphic,graph_id)

                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("—É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ"):
                      if type_graphics == '–ì—Ä–∞—Ñ–∏–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è':
                            
                         graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]

                         match = re.search(r'\b–¥–æ–∑–∏—Ä–æ–≤–∫–µ\s+(\d+(?:[.,]\d+)*)', graph_id)
                         number = match.group(1)
                         file_name = f"–î–æ–∑–∏—Ä–æ–≤–∫–∞ {number}"
                         special_file_name = file_name.replace("–î–æ–∑–∏—Ä–æ–≤–∫–∞", "") + " " + st.session_state[f'measure_unit_{option}_dose']

                         if selected_kind_individual_graphics == file_name:
                            
                            if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                               kind_graphic = 'lin'
                            else:
                               kind_graphic = 'log'

                            rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_pk_profile_individual_mean_std, st.session_state[f"list_time{graph_id}"],
                                                                      st.session_state[f"list_concentration{graph_id}"],
                                                                      st.session_state[f"err_y_1{graph_id}"],
                                                                      st.session_state[f'measure_unit_{option}_time'],
                                                                      st.session_state[f'measure_unit_{option}_concentration'],
                                                                      kind_graphic,graph_id,special_file_name)
     

                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö"):
                      if type_graphics == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞—Ö':
                         
                         graph_id = st.session_state[f"list_heading_graphics_word_{option}"][i]
                         if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ª–∏–Ω–µ–π–Ω—ã—Ö"):
                            kind_graphic = 'lin'
                         else:
                            kind_graphic = 'log'

                         rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,plot_pk_profile_total_mean_std_doses_organs, st.session_state[f"list_zip_mean_std_colors{graph_id}"],
                                                                   st.session_state[f"list_t_doses{graph_id}"],
                                                                   st.session_state[f"df_concat_mean_std{graph_id}"],
                                                                   st.session_state[f'measure_unit_{option}_time'],
                                                                   st.session_state[f'measure_unit_{option}_concentration'],
                                                                   kind_graphic,graph_id)

                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"):
                      if type_graphics == '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π AUC0‚Üí‚àû –æ—Ç –≤–µ–ª–∏—á–∏–Ω –≤–≤–æ–¥–∏–º—ã—Ö –¥–æ–∑':
                         
                         graph_id = '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π AUC0‚Üí‚àû –æ—Ç –≤–µ–ª–∏—á–∏–Ω –≤–≤–æ–¥–∏–º—ã—Ö –¥–æ–∑'

                         kind_graphic = 'lin'

                         rendering_graphs_with_scale_widgets(graph_id,option,i,kind_graphic,create_graphic_lin, st.session_state["df_for_lin_mean"],
                                                             st.session_state[f'measure_unit_{option}_dose'],
                                                             st.session_state[f"measure_unit_{option}_concentration"],
                                                             st.session_state[f"measure_unit_{option}_time"],
                                                             graph_id,st.session_state["model"],kind_graphic)

                   if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç"):
                      if type_graphics == '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –§–∏—à–µ—Ä–∞ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ AUC0‚Üí‚àû':

                         col3, col4 = st.columns([2, 1])

                         with col3:
                              st.pyplot(st.session_state[f"list_graphics_word_{option}"][i])
                              st.subheader(st.session_state[f"list_heading_graphics_word_{option}"][i])

                         with col4:
                              # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                              st.text("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ F")

                              # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏
                              if 'alpha' not in st.session_state:
                                  st.session_state.alpha = 0.05

                              if 'df1' not in st.session_state:
                                  st.session_state.df1 = st.session_state['df1_model_lin']

                              if 'df2' not in st.session_state:
                                  st.session_state.df2 = st.session_state['df2_model_lin']

                              # –í–≤–æ–¥ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (alpha)
                              alpha = st.number_input("–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (alpha)", min_value=0.01, max_value=0.10, value=st.session_state.alpha, step=0.01, format="%.2f")

                              # –í–≤–æ–¥ —Å—Ç–µ–ø–µ–Ω–µ–π —Å–≤–æ–±–æ–¥—ã –¥–ª—è —á–∏—Å–ª–∏—Ç–µ–ª—è (df1)
                              df1 = st.number_input("–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã –¥–ª—è —á–∏—Å–ª–∏—Ç–µ–ª—è (df1)", min_value=1, value=st.session_state.df1, step=1)

                              # –í–≤–æ–¥ —Å—Ç–µ–ø–µ–Ω–µ–π —Å–≤–æ–±–æ–¥—ã –¥–ª—è –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è (df2)
                              df2 = st.number_input("–°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã –¥–ª—è –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è (df2)", min_value=1, value=st.session_state.df2, step=1)

                              # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
                              st.session_state.alpha = alpha
                              st.session_state.df1 = df1
                              st.session_state.df2 = df2

                              # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                              if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
                                  f_critical = calculate_f_critical(alpha, df1, df2)
                                  st.write(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ F: {f_critical:.3f}")

            with col2:
                     
                 #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ñ–æ—Ä–º–ª–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
                 selected = style_icon_report()
                  
                 if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":
                    ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
                       create_graphic(st.session_state[f"list_graphics_word_{option}"],st.session_state[f"list_heading_graphics_word_{option}"])
         else:
             st.error("–í–≤–µ–¥–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!")

###########################################################################################
if option == '–≠–∫—Å–∫—Ä–µ—Ü–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞':
    
    st.header('–ò–∑—É—á–µ–Ω–∏–µ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞')

    col1, col2 = st.columns([0.66, 0.34])
    
    ####### –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
    with col1:
                  
         panel = main_radio_button_study(option)
                     
         #c–ø–∏—Å–∫–∏ –¥–ª—è word-–æ—Ç—á–µ—Ç–∞
         list_heading_word=[]
         list_table_word=[]
         list_graphics_word=[]
         list_heading_graphics_word=[]
         initializing_session_lists_tables_graphics(option,list_heading_word,list_table_word,list_graphics_word,list_heading_graphics_word)

         if panel == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
            
            #c–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "type_ex"
            if "index_type_ex" not in st.session_state:
                st.session_state["index_type_ex"] = 0

            type_excretion = st.radio('üß¥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏',('–§–µ–∫–∞–ª–∏–∏', '–ú–æ—á–∞', '–ñ–µ–ª—á—å'), key = "–í–∏–¥ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏",index = st.session_state["index_type_ex"])
            
            if st.session_state["–í–∏–¥ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏"] == '–§–µ–∫–∞–ª–∏–∏':
               st.session_state["index_type_ex"] = 0
            if st.session_state["–í–∏–¥ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏"] == '–ú–æ—á–∞':
               st.session_state["index_type_ex"] = 1
            if st.session_state["–í–∏–¥ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏"] == '–ñ–µ–ª—á—å':
               st.session_state["index_type_ex"] = 2

            if type_excretion == '–§–µ–∫–∞–ª–∏–∏':
               excretion_tv = "—Ñ–µ–∫–∞–ª–∏—è–º–∏"
               excretion_pr = "—Ñ–µ–∫–∞–ª–∏—è—Ö"
            if type_excretion == '–ú–æ—á–∞':
               excretion_tv = "–º–æ—á–æ–π"
               excretion_pr = "–º–æ—á–µ"
            if type_excretion == '–ñ–µ–ª—á—å':
               excretion_tv = "–∂–µ–ª—á—å—é"
               excretion_pr = "–∂–µ–ª—á–∏"

            st.subheader('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ —Å ' + excretion_tv)

            measure_unit_ex_time = select_time_unit("select_time_unit—ç–∫—Å–∫—Ä–µ—Ü–∏—è")
            measure_unit_ex_concentration = select_concentration_unit("select_time_unit—ç–∫—Å–∫—Ä–µ—Ü–∏—è")
            #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            save_session_state_measure_unit_value(measure_unit_ex_time,measure_unit_ex_concentration,"—ç–∫—Å–∫—Ä–µ—Ü–∏—è")

            uploaded_file_excrement = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —ç–∫—Å–∫—Ä–µ—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç XLSX)", key="–§–∞–π–ª —ç–∫—Å–∫—Ä–µ—Ü–∏–∏")

            if uploaded_file_excrement is not None:
                save_uploadedfile(uploaded_file_excrement)
                st.session_state["uploaded_file_excrement"] = uploaded_file_excrement.name
            
            if "uploaded_file_excrement" in st.session_state: 
               custom_success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {st.session_state['uploaded_file_excrement']}")

            if "uploaded_file_excrement" in st.session_state:
                
                df = pd.read_excel(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",st.session_state["uploaded_file_excrement"]))
                st.subheader('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ ' + excretion_pr)
                
                ###–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                df = edit_frame(df,st.session_state["uploaded_file_excrement"])

                table_heading='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π –≤ ' + excretion_pr
                add_or_replace(st.session_state[f"list_heading_word_{option}"], table_heading) 

                ## –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
                df_stats = create_table_descriptive_statistics(df)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –∫–æ–ª–æ–Ω–∫—É "–ù–æ–º–µ—Ä"
                df_stats_reset = df_stats.reset_index()
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –∏–Ω–¥–µ–∫—Å–∞
                df_stats_reset.rename(columns={'index': '–ù–æ–º–µ—Ä'}, inplace=True)
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã (–Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ df)
                df_stats_reset.index = range(df.index.max() + 1, df.index.max() + 1 + len(df_stats_reset))
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                df_concat_round_str_transpose = pd.concat([df, df_stats_reset], axis=0, ignore_index=False)

                add_or_replace_df_graph(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],table_heading,df_concat_round_str_transpose)

                ########### –¥–∏–∞–≥—Ä–∞–º–º–∞ —ç–∫—Å–∫—Ä–µ—Ü–∏–∏
                graphic='–í—ã–≤–µ–¥–µ–Ω–∏–µ —Å ' + excretion_tv
                add_or_replace(st.session_state[f"list_heading_graphics_word_{option}"], graphic)   
                
                fig = excretion_diagram(df,st.session_state['measure_unit_—ç–∫—Å–∫—Ä–µ—Ü–∏—è_time'],st.session_state['measure_unit_—ç–∫—Å–∫—Ä–µ—Ü–∏—è_concentration'])

                add_or_replace_df_graph(st.session_state[f"list_heading_graphics_word_{option}"],st.session_state[f"list_graphics_word_{option}"],graphic,fig)

            else:
               st.write("")    
            
            ##############################################################################################################
         
    #–æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    col1, col2 = st.columns([0.66,0.34])
    
    #####–°–æ–∑–¥–∞–Ω–∏–µ word –æ—Ç—á–µ—Ç–∞
    if panel == "–¢–∞–±–ª–∏—Ü—ã":

          ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü
          visualize_table(st.session_state[f"list_heading_word_{option}"],st.session_state[f"list_table_word_{option}"],option)

    with col1:
       if panel == "–ì—Ä–∞—Ñ–∏–∫–∏":

             #######–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

             count_graphics_for_visual = len(st.session_state[f"list_heading_graphics_word_{option}"])
             list_range_count_graphics_for_visual = range(0,count_graphics_for_visual)
             
             for i in list_range_count_graphics_for_visual:
                 if st.session_state[f"list_heading_graphics_word_{option}"][i].__contains__("–í—ã–≤–µ–¥–µ–Ω–∏–µ"):
                    st.pyplot(st.session_state[f"list_graphics_word_{option}"][i])
                    st.subheader(st.session_state[f"list_heading_graphics_word_{option}"][i])
                    
             with col2:
             
                  #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ñ–æ—Ä–º–ª–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
                  selected = style_icon_report()
                   
                  if selected == "C—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—áe—Ç":
                     ###–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                     if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
                        create_graphic(st.session_state[f"list_graphics_word_{option}"],st.session_state[f"list_heading_graphics_word_{option}"]) 


st.sidebar.caption('¬© 2025. –¶–µ–Ω—Ç—Ä –±–∏–æ—Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (–°–µ—á–µ–Ω–æ–≤—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)')