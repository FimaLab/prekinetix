import streamlit as st
import os
import pandas as pd
from io import BytesIO
from docx import Document

import tempfile
import numpy as np
import scipy.stats as stat
import math
from sklearn.linear_model import LinearRegression
from scipy import stats



from docx.shared import Pt, Cm
from docx.enum.section import WD_ORIENT
from docx.oxml.ns import nsdecls
from docx.oxml import parse_xml
from docx.shared import RGBColor

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è DataFrame –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False)
    output.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    return output

# –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª—é—á–∞
def download_excel_button(df, label="–°–∫–∞—á–∞—Ç—å Excel", file_name="data.xlsx", key=None):
    excel_data = to_excel(df)
    st.download_button(
        label=label,
        data=excel_data,
        file_name=file_name,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        key=key  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä key
    )

#–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–Ω–∞—á–∏—â–∏—Ö —Ü–∏—Ñ—Ä
def round_to_significant_figures(num, sig_figs):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É "-"
    if num == "-":
        return num
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
    elif isinstance(num, float) and math.isnan(num):
        return "-"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    elif num == 0:
        return 0
    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    else:
        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞—á–∞—â–∏—Ö —Ü–∏—Ñ—Ä
        rounded_num = round(num, sig_figs - int(math.floor(math.log10(abs(num))) + 1))
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ int
        if rounded_num.is_integer():
            return int(rounded_num)
        else:
            return rounded_num


#—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ 
def save_uploadedfile(uploadedfile):
    with open(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",uploadedfile.name),"wb") as f:
       f.write(uploadedfile.getbuffer())
     

#—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ df_edit
def save_editfile(df_edit,uploadedfile_name):
    writer=pd.ExcelWriter(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",uploadedfile_name))
    df_edit.to_excel(writer,index=False)
    writer.save()

#–ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç df –≤ excel —Ñ–∞–π–ª 
def to_excel(df_example_file):
       output = BytesIO()
       writer = pd.ExcelWriter(output, engine='xlsxwriter')
       df_example_file.to_excel(writer, index=False, sheet_name='Sheet1')
       workbook = writer.book
       worksheet = writer.sheets['Sheet1']
       format1 = workbook.add_format({'num_format': '0.00'}) 
       worksheet.set_column('A:A', None, format1)
       writer.save()  
       processed_data = output.getvalue()
       return processed_data
 
 ###–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–µ–π–º–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def edit_frame(df,uploadedfile_name):
       new_df = df
       list_columns_str = []
       for i in new_df.columns.tolist():
           i_new = str(i)
           list_columns_str.append(i_new)
       new_df.columns = list_columns_str

       edited_df = st.data_editor(new_df, key = ("edited_df" + uploadedfile_name))
       save_editfile(edited_df,uploadedfile_name)

       df_change = edited_df
       
       list_change_values = df_change.columns.tolist()
       list_change_values.remove("–ù–æ–º–µ—Ä")

       list_columns_number = []
       for i in list_change_values:
           i_new = float(i)
           list_columns_number.append(i_new)

       list_columns_number.insert(0,"–ù–æ–º–µ—Ä")

       df_change.columns = list_columns_number
       
       df = df_change
       return df

###—Å–æ–∑–¥–∞–Ω–∏–µ Word-–æ—Ç—á–µ—Ç–∞
## —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü

def create_table(list_heading_word, list_table_word):
    ### —Ç–∞–±–ª–∏—Ü—ã
    zip_heading_table = zip(list_heading_word, list_table_word)

    doc = Document()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    section = doc.sections[-1]
    section.orientation = WD_ORIENT.LANDSCAPE
    new_width, new_height = section.page_height, section.page_width
    section.page_width = new_width
    section.page_height = new_height

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Times New Roman'
    font.size = Pt(8)
    
    for heading, df in zip_heading_table:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        paragraph = doc.add_paragraph(heading, style='Heading 1')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        run = paragraph.runs[0]
        run.font.color.rgb = RGBColor(0, 0, 0)  # –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ DataFrame –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        name_columns = pd.DataFrame(df.columns.tolist()).T
        name_columns.columns = df.columns.tolist()
        df_columns = pd.concat([name_columns, df]).reset_index(drop=True)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        total_name_index = df.index.name
        list_index_names = df.index.tolist()
        list_index_names.insert(0, total_name_index)
        series_index_names = pd.Series(list_index_names, name=total_name_index)
        df_series_index_names = series_index_names.to_frame()

        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å —Ç–∞–±–ª–∏—Ü–µ–π
        df_columns_indexes = pd.concat([df_series_index_names, df_columns], axis=1)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        t = doc.add_table(rows=df_columns_indexes.shape[0], cols=df_columns_indexes.shape[1])
        t.style = 'Table Grid'

        # –ó–∞–¥–∞–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ
        for j in range(df_columns_indexes.shape[1]):
            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ
            max_len = max([len(str(df_columns_indexes.iat[i, j])) for i in range(df_columns_indexes.shape[0])])
            width_cm = min(max_len * 0.2, 5)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –≤ 5 —Å–º
            for i in range(df_columns_indexes.shape[0]):
                t.cell(i, j).width = Cm(width_cm)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏
        for i, row_data in df_columns_indexes.iterrows():
            row = t.rows[i]
            for j, value in enumerate(row_data):
                row.cells[j].text = str(value)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç—å
    bio = BytesIO()
    doc.save(bio)
    bio.seek(0)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    st.download_button(
        label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã üìÉ",
        data=bio.getvalue(),
        file_name="–¢–∞–±–ª–∏—Ü—ã.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

def visualize_table(list_heading_word,list_table_word):
    zip_heading_table = zip(list_heading_word,list_table_word) ###–µ—â–µ —Ä–∞–∑ –æ–±—ä—è–≤–ª—è–µ–º, –∏–Ω–∞—á–µ –Ω–µ –≤–∏–¥–∏—Ç zip-–æ–±—ä–µ–∫—Ç
    #####–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    for heading, df in zip_heading_table:
        st.subheader(heading)
        st.write(df)

## —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
def create_graphic(list_graphics_word,list_heading_graphics_word):
    ### –¥–æ–∫—É–º–µ–Ω—Ç Word
    zip_graphics_heading = zip(list_graphics_word,list_heading_graphics_word)
    doc = Document()

    # Settings
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Times New Roman'
    font.size = Pt(12)

    buf = BytesIO() #–∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–∞–∑–∏–ª–∞ –æ—à–∏–±–∫–∞
    for fig, heading in zip_graphics_heading:
        buf = BytesIO()
        fig.savefig(buf, format="jpg", dpi=300, bbox_inches='tight')
        fp = tempfile.NamedTemporaryFile() 
        with open(f"{fp.name}.jpg",'wb') as ff:
             ff.write(buf.getvalue()) 
        doc.add_picture(buf)
        doc.add_paragraph(heading)
    
    doc.save(buf)
    if doc:
        st.download_button(
            label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ üìà",
            data=buf.getvalue(),
            file_name="–ì—Ä–∞—Ñ–∏–∫–∏.docx",
            mime="docx",
            key = "graphics"
        )

## —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è–º–∏
def create_table_descriptive_statistics(df):
    col_mapping = df.columns.tolist()
    col_mapping.remove('–ù–æ–º–µ—Ä')

    list_gmean=[]
    list_cv=[]
    list_q1=[]
    list_q3=[]
    list_interquartile_range =[]
    list_confidence_interval = []
    for i in col_mapping:

        list_ser=df[i].tolist()
        list_ser_cv = list_ser#–Ω—É–∂–Ω–æ —Å –Ω—É–ª—è–º–∏ –¥–ª—è CV

        #—É–±—Ä–∞—Ç—å –Ω—É–ª–∏, —Ç.–∫ –Ω—É–ª–∏ –±—É–¥—É—Ç –¥–∞–≤–∞—Ç—å –Ω—É–ª–µ–≤–æ–µ gmean
        count_for_range_ser=len(list_ser)
        list_range_ser=range(0,count_for_range_ser)
        
        list_ser_without_0=[]
        for i in list_range_ser:
            if list_ser[i] !=0:
               list_ser_without_0.append(list_ser[i])

        list_ser = list_ser_without_0

        def g_mean(list_ser):
            a=np.log(list_ser)
            return np.exp(a.mean())
        Gmean=g_mean(list_ser)
        list_gmean.append(Gmean)

        ###–ø–æ–¥—Å—á–µ—Ç –∫–≤–∞—Ä—Ç–∏–ª–µ–π
        def quantile_exc(data, n):  # Where data is the data group, n is the quartile
            if n<1 or n>3:
                return False
            data.sort()
            position = (len(data) + 1)*n/4
            pos_integer = int(math.modf(position)[1])
            pos_decimal = position - pos_integer
            quartile = data[pos_integer - 1] + (data[pos_integer] - data[pos_integer - 1])*pos_decimal
            return quartile
        
        #–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4 —Ç–æ—á–∫–∏ –º–∏–Ω–∏–º—É–º –¥–ª—è q1,q3,–º–∫–¥
        if len(list_ser_cv)>3:
            q1=quantile_exc(list_ser_cv, 1)
            q3=quantile_exc(list_ser_cv, 3)
            interquartile_range = q3 - q1
        else:
            q1=None
            q3=None
            interquartile_range = None

        list_q1.append(q1)
        list_q3.append(q3)
        list_interquartile_range.append(interquartile_range)

        ###—Ä–∞—Å—á–µ—Ç 95% –∏–Ω—Ç—Ä–µ–≤–∞–ª–∞
        def confidence_interval(data):
            if len(data) <= 30:
                —Å_i = stat.t.interval(alpha=0.95, df=len(data)-1, 
                    loc=np.mean(data), ### –∏–ª–∏ –º–µ–¥–∏–∞–Ω–∞
                    scale=stat.sem(data))
            else:
                —Å_i = stat.norm.interval(alpha=0.95, 
                 loc=np.mean(data), ### –∏–ª–∏ –º–µ–¥–∏–∞–Ω–∞
                 scale=stat.sem(data))
            return —Å_i
        —Å_i=confidence_interval(list_ser_cv)

        list_confidence_interval.append(—Å_i)

        ####CV
        cv_std=lambda x: np.std(x, ddof= 1 )
        cv_mean=lambda x: np.mean(x)
        CV_std=cv_std(list_ser_cv)
        CV_mean=cv_mean(list_ser_cv)
        CV=CV_std/CV_mean * 100
        list_cv.append(CV)
        
    #–¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è None –∏–∑ —Ñ—Ä–µ–π–º–∞
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
    list_gmean_processed = []
    for gmean in list_gmean:
        if gmean is None:
            list_gmean_processed.append("-")
        else:
            list_gmean_processed.append(gmean)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏
    list_cv_processed = []
    for cv in list_cv:
        if cv is None:
            list_cv_processed.append("-")
        else:
            list_cv_processed.append(cv)

    list_gmean = list_gmean_processed
    list_cv = list_cv_processed
    
    df_averaged_concentrations=df.describe()
    df_averaged_concentrations_1= df_averaged_concentrations.drop(['25%','75%'],axis=0)
    df_averaged_concentrations_2= df_averaged_concentrations_1.rename(index={"50%": "median"})
    df_averaged_concentrations_2.loc[len(df_averaged_concentrations_2.index )] = list_gmean
    df_averaged_3 = df_averaged_concentrations_2.rename(index={6 : "Gmean"})
    df_averaged_3.loc[len(df_averaged_3.index )] = list_cv
    df_averaged_3 = df_averaged_3.rename(index={7 : "CV, %"})
    df_averaged_3.loc[len(df_averaged_3.index )] = list_q1
    df_averaged_3 = df_averaged_3.rename(index={8 : "25% –∫–≤–∞—Ä—Ç–∏–ª—å"})
    df_averaged_3.loc[len(df_averaged_3.index )] = list_q3
    df_averaged_3 = df_averaged_3.rename(index={9 : "75% –∫–≤–∞—Ä—Ç–∏–ª—å"})
    df_averaged_3.loc[len(df_averaged_3.index )] = list_interquartile_range
    df_averaged_3 = df_averaged_3.rename(index={10 : "–ú–ö–î"})

    df_index=df.set_index('–ù–æ–º–µ—Ä')
    df_concat = pd.concat([df_index,df_averaged_3],sort=False,axis=0)
    
    df_concat_round=df_concat
    
    ###–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–∞ —Å –Ω—É–ª—è–º–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    col_mapping = df_concat_round.columns.tolist()

    list_list_series=[]
    for i in col_mapping:
        list_series = df_concat_round[i].tolist()
         
        list_series_round = []
        for i in list_series:
            value = i
            list_series_round.append(value)
             
        list_list_series.append(list_series_round)

    df_concat_round_str = pd.DataFrame(list_list_series, columns = df_concat_round.index.tolist(),index=col_mapping) 
    df_concat_round_str_transpose = df_concat_round_str.transpose()
    df_concat_round_str_transpose.index.name = '–ù–æ–º–µ—Ä'
    
    #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–±–ª—Ü–æ–≤
    list_time_round =[v for v in df_concat_round_str_transpose.columns.tolist()]
    df_concat_round_str_transpose.columns = list_time_round

    #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É–±—ä–µ–∫—Ç–æ–≤ –¥–æ —Ü–µ–ª–æ–≥–æ
    list_count_subjects_round =[float(v) for v in df_concat_round_str_transpose.loc["count"].tolist()]
    list_count_subjects_round =[int(v) for v in list_count_subjects_round]
    df_concat_round_str_transpose.loc["count"] = list_count_subjects_round

    ###–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    df_concat_round_str_transpose.loc[len(df_concat_round_str_transpose.index )] = list_confidence_interval
    index_c_i = df_concat_round_str_transpose.index.values.tolist()[-1]
    df_concat_round_str_transpose = df_concat_round_str_transpose.rename(index={index_c_i : "95% –î–ò"})

    ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
    df_concat_round_str_transpose1.iloc[-9,:],df_concat_round_str_transpose1.iloc[-1,:]=df_concat_round_str_transpose.iloc[-1,:],df_concat_round_str_transpose.iloc[-9,:]
    df_concat_round_str_transpose=df_concat_round_str_transpose1
    df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
    df_concat_round_str_transpose1.iloc[-8,:],df_concat_round_str_transpose1.iloc[-6,:]=df_concat_round_str_transpose.iloc[-6,:],df_concat_round_str_transpose.iloc[-8,:]
    df_concat_round_str_transpose=df_concat_round_str_transpose1
    df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
    df_concat_round_str_transpose1.iloc[-7,:],df_concat_round_str_transpose1.iloc[-5,:]=df_concat_round_str_transpose.iloc[-5,:],df_concat_round_str_transpose.iloc[-7,:]
    df_concat_round_str_transpose=df_concat_round_str_transpose1
    df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
    df_concat_round_str_transpose1.iloc[-5,:],df_concat_round_str_transpose1.iloc[-4,:]=df_concat_round_str_transpose.iloc[-4,:],df_concat_round_str_transpose.iloc[-5,:]
    df_concat_round_str_transpose=df_concat_round_str_transpose1
    df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
    df_concat_round_str_transpose1.iloc[-4,:],df_concat_round_str_transpose1.iloc[-3,:]=df_concat_round_str_transpose.iloc[-3,:],df_concat_round_str_transpose.iloc[-4,:]
    df_concat_round_str_transpose=df_concat_round_str_transpose1
    df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
    df_concat_round_str_transpose1.iloc[-3,:],df_concat_round_str_transpose1.iloc[-2,:]=df_concat_round_str_transpose.iloc[-2,:],df_concat_round_str_transpose.iloc[-3,:]
    df_concat_round_str_transpose=df_concat_round_str_transpose1
    df_concat_round_str_transpose1=df_concat_round_str_transpose.copy()
    df_concat_round_str_transpose1.iloc[-2,:],df_concat_round_str_transpose1.iloc[-1,:]=df_concat_round_str_transpose.iloc[-1,:],df_concat_round_str_transpose.iloc[-2,:]
    df_concat_round_str_transpose=df_concat_round_str_transpose1
    df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'min': "95% CI","95% –î–ò": '–ú–∏–Ω–∏–º—É–º','median': "Gmean",'Gmean': "–ú–µ–¥–∏–∞–Ω–∞",'max': 'CV, %','CV, %': '–ú–∞–∫—Å–∏–º—É–º'}, axis='index')
    df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'–ú–∞–∫—Å–∏–º—É–º': 'Q1','25% –∫–≤–∞—Ä—Ç–∏–ª—å': '–ú–∞–∫—Å–∏–º—É–º',}, axis='index')
    df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'–ú–∞–∫—Å–∏–º—É–º': 'Q3','75% –∫–≤–∞—Ä—Ç–∏–ª—å': '–ú–∞–∫—Å–∏–º—É–º',}, axis='index')
    df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'–ú–∞–∫—Å–∏–º—É–º': 'IQR','–ú–ö–î': '–ú–∞–∫—Å–∏–º—É–º',}, axis='index')
    df_concat_round_str_transpose = df_concat_round_str_transpose.rename({'–ú–∞–∫—Å–∏–º—É–º': '–ú–∏–Ω–∏–º—É–º','–ú–∏–Ω–∏–º—É–º': '–ú–∞–∫—Å–∏–º—É–º','count': 'N','std': 'SD','mean': 'Mean',}, axis='index')
    
    list_CI = df_concat_round_str_transpose.loc["95% CI"].tolist()

    list_left_CI = []
    list_right_CI = []
    for i,j in list_CI:
        
        if i and not pd.isna(i) and i != 'None':
            i_round = i
            j_round = j
        else:
            i_round = "-"
            j_round = "-"
        list_left_CI.append(i_round)
        list_right_CI.append(j_round)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ —Å –Ω–∏–∂–Ω–µ–π –∏ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    df_concat_round_str_transpose.loc['Lower 95% CI'] = list_left_CI
    df_concat_round_str_transpose.loc['Upper 95% CI'] = list_right_CI

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ 95% CI, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
    df_concat_round_str_transpose = df_concat_round_str_transpose.drop("95% CI")
    
    list_zero_time_zero_new = []
    if 0.0 in col_mapping:
       list_zero_time_zero = df_concat_round_str_transpose[0.0].tolist()
       for i in list_zero_time_zero:
           if i == 0.0 and i == 0:
              list_zero_time_zero_new.append(int(i))
           else:
              list_zero_time_zero_new.append(i)
       
       # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π
       df_concat_round_str_transpose[0.0] = list_zero_time_zero_new
    
    #list_column_time_round = []
    #for i in col_mapping:
          # i = round_to_significant_figures(i, 4)
          # list_column_time_round.append(i)
    
    #df_concat_round_str_transpose.columns = list_column_time_round 
    
    #st.write(list_column_time_round)#

    #–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–π –∏ –Ω–µ—Ç
    dict_descriptive_statistics = {'df_concat_round_str_transpose': df_concat_round_str_transpose,'df_concat': df_concat}
    return dict_descriptive_statistics

## —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–ø–∏—Å—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ –î–ò 95% –¥–ª—è –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def create_table_descriptive_statistics_before_95CI_pk(df_PK):
    col_mapping_PK = df_PK.columns.tolist()

    list_gmean_PK=[]
    list_cv_PK=[]
    list_q1_PK=[]
    list_q3_PK=[]
    list_interquartile_range_PK =[]
    list_confidence_interval_PK = [] 

    for i in col_mapping_PK:

       list_ser_PK=df_PK[i].tolist()

       def g_mean(list_ser_PK):
             a=np.log(list_ser_PK)
             return np.exp(a.mean())
       Gmean_PK=g_mean(list_ser_PK)
       list_gmean_PK.append(Gmean_PK)

       ###–ø–æ–¥—Å—á–µ—Ç –∫–≤–∞—Ä—Ç–∏–ª–µ–π
       def quantile_exc(data, n):  # Where data is the data group, n is the quartile
             if n<1 or n>3:
                return False
             data.sort()
             position = (len(data) + 1)*n/4
             pos_integer = int(math.modf(position)[1])
             pos_decimal = position - pos_integer
             quartile = data[pos_integer - 1] + (data[pos_integer] - data[pos_integer - 1])*pos_decimal
             return quartile
       
       #–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4 —Ç–æ—á–∫–∏ –º–∏–Ω–∏–º—É–º –¥–ª—è q1,q3,–º–∫–¥
       if len(list_ser_PK)>3:
             q1=quantile_exc(list_ser_PK, 1)
             q3=quantile_exc(list_ser_PK, 3)
             interquartile_range = q3 - q1
       else:
             q1=None
             q3=None
             interquartile_range = None

       list_q1_PK.append(q1)
       list_q3_PK.append(q3)
       list_interquartile_range_PK.append(interquartile_range)

       ###—Ä–∞—Å—á–µ—Ç 95% –∏–Ω—Ç—Ä–µ–≤–∞–ª–∞
       def confidence_interval(data):
             if len(data) <= 30:
                —Å_i = stat.t.interval(alpha=0.95, df=len(data)-1, 
                   loc=np.mean(data), ### –∏–ª–∏ –º–µ–¥–∏–∞–Ω–∞
                   scale=stat.sem(data))
             else:
                —Å_i = stat.norm.interval(alpha=0.95, 
                loc=np.mean(data), ### –∏–ª–∏ –º–µ–¥–∏–∞–Ω–∞
                scale=stat.sem(data))
             return —Å_i
       —Å_i=confidence_interval(list_ser_PK)

       list_confidence_interval_PK.append(—Å_i)

       ####CV
       cv_std_PK=lambda x: np.std(x, ddof= 1 )
       cv_mean_PK=lambda x: np.mean(x)

       CV_std_PK=cv_std_PK(list_ser_PK)
       CV_mean_PK=cv_mean_PK(list_ser_PK)

       CV_PK=(CV_std_PK/CV_mean_PK * 100)
       list_cv_PK.append(CV_PK)


    df_averaged_concentrations_PK=df_PK.describe()
    df_averaged_concentrations_1_PK= df_averaged_concentrations_PK.drop(['25%','75%'],axis=0)
    df_averaged_concentrations_2_PK= df_averaged_concentrations_1_PK.rename(index={"50%": "median"})
    df_averaged_concentrations_2_PK.loc[len(df_averaged_concentrations_2_PK.index )] = list_gmean_PK
    df_averaged_3_PK = df_averaged_concentrations_2_PK.rename(index={6 : "Gmean"})
    df_averaged_3_PK.loc[len(df_averaged_3_PK.index )] = list_cv_PK
    df_averaged_3_PK = df_averaged_3_PK.rename(index={7 : "CV, %"})
    df_averaged_3_PK.loc[len(df_averaged_3_PK.index )] = list_q1_PK
    df_averaged_3_PK = df_averaged_3_PK.rename(index={8 : "25% –∫–≤–∞—Ä—Ç–∏–ª—å"})
    df_averaged_3_PK.loc[len(df_averaged_3_PK.index )] = list_q3_PK
    df_averaged_3_PK = df_averaged_3_PK.rename(index={9 : "75% –∫–≤–∞—Ä—Ç–∏–ª—å"})
    df_averaged_3_PK.loc[len(df_averaged_3_PK.index )] = list_interquartile_range_PK
    df_averaged_3_PK = df_averaged_3_PK.rename(index={10 : "–ú–ö–î"})

    return {"df_averaged_3_PK": df_averaged_3_PK,
              "list_confidence_interval_PK": list_confidence_interval_PK}

#–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É–±—ä–µ–∫—Ç–æ–≤ –¥–æ —Ü–µ–ª–æ–≥–æ
def round_subjects_count(df_total_PK):
   list_count_subjects_round =[float(v) for v in df_total_PK.loc["count"].tolist()]
   list_count_subjects_round =[int(v) for v in list_count_subjects_round]
   df_total_PK.loc["count"] = list_count_subjects_round

###–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
def add_ci_in_table(df_total_PK,list_confidence_interval_PK):
    df_total_PK.loc[len(df_total_PK.index )] = list_confidence_interval_PK
    index_c_i = df_total_PK.index.values.tolist()[-1]
    df_total_PK = df_total_PK.rename(index={index_c_i : "95% –î–ò"})
    return df_total_PK

##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def rename_parametrs_descriptive_statistics(df_total_PK):
    df_total_PK1=df_total_PK.copy()
    df_total_PK1.iloc[-9,:],df_total_PK1.iloc[-1,:]=df_total_PK.iloc[-1,:],df_total_PK.iloc[-9,:]
    df_total_PK=df_total_PK1
    df_total_PK1=df_total_PK.copy()
    df_total_PK1.iloc[-8,:],df_total_PK1.iloc[-6,:]=df_total_PK.iloc[-6,:],df_total_PK.iloc[-8,:]
    df_total_PK=df_total_PK1
    df_total_PK1=df_total_PK.copy()
    df_total_PK1.iloc[-7,:],df_total_PK1.iloc[-5,:]=df_total_PK.iloc[-5,:],df_total_PK.iloc[-7,:]
    df_total_PK=df_total_PK1
    df_total_PK1=df_total_PK.copy()
    df_total_PK1.iloc[-5,:],df_total_PK1.iloc[-4,:]=df_total_PK.iloc[-4,:],df_total_PK.iloc[-5,:]
    df_total_PK=df_total_PK1
    df_total_PK1=df_total_PK.copy()
    df_total_PK1.iloc[-4,:],df_total_PK1.iloc[-3,:]=df_total_PK.iloc[-3,:],df_total_PK.iloc[-4,:]
    df_total_PK=df_total_PK1
    df_total_PK1=df_total_PK.copy()
    df_total_PK1.iloc[-3,:],df_total_PK1.iloc[-2,:]=df_total_PK.iloc[-2,:],df_total_PK.iloc[-3,:]
    df_total_PK=df_total_PK1
    df_total_PK1=df_total_PK.copy()
    df_total_PK1.iloc[-2,:],df_total_PK1.iloc[-1,:]=df_total_PK.iloc[-1,:],df_total_PK.iloc[-2,:]
    df_total_PK=df_total_PK1
    df_total_PK = df_total_PK.rename({'min': "95% CI","95% –î–ò": '–ú–∏–Ω–∏–º—É–º','median': "Gmean",'Gmean': "–ú–µ–¥–∏–∞–Ω–∞",'max': 'CV, %','CV, %': '–ú–∞–∫—Å–∏–º—É–º'}, axis='index')
    df_total_PK = df_total_PK.rename({'–ú–∞–∫—Å–∏–º—É–º': 'Q1','25% –∫–≤–∞—Ä—Ç–∏–ª—å': '–ú–∞–∫—Å–∏–º—É–º',}, axis='index')
    df_total_PK = df_total_PK.rename({'–ú–∞–∫—Å–∏–º—É–º': 'Q3','75% –∫–≤–∞—Ä—Ç–∏–ª—å': '–ú–∞–∫—Å–∏–º—É–º',}, axis='index')
    df_total_PK = df_total_PK.rename({'–ú–∞–∫—Å–∏–º—É–º': 'IQR','–ú–ö–î': '–ú–∞–∫—Å–∏–º—É–º',}, axis='index')
    df_total_PK = df_total_PK.rename({'–ú–∞–∫—Å–∏–º—É–º': '–ú–∏–Ω–∏–º—É–º','–ú–∏–Ω–∏–º—É–º': '–ú–∞–∫—Å–∏–º—É–º','count': 'N','std': 'SD','mean': 'Mean',}, axis='index')

    list_CI = df_total_PK.loc["95% CI"].tolist()
    list_left_CI = []
    list_right_CI = []
    for i,j in list_CI:
        
        if i and not pd.isna(i) and i != 'None':
            i_round = i
            j_round = j
        else:
            i_round = "-"
            j_round = "-"
        list_left_CI.append(i_round)
        list_right_CI.append(j_round)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ —Å –Ω–∏–∂–Ω–µ–π –∏ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    df_total_PK.loc['Lower 95% CI'] = list_left_CI
    df_total_PK.loc['Upper 95% CI'] = list_right_CI

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ 95% CI, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
    df_total_PK = df_total_PK.drop("95% CI")

    return df_total_PK


def pk_parametrs_total_extravascular(df,selector_research,method_auc,dose,measure_unit_concentration,measure_unit_time,measure_unit_dose):
    
    ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

    df_without_numer=df.drop(['–ù–æ–º–µ—Ä'],axis=1)
    count_row=df_without_numer.shape[0]

    list_count_row=range(count_row)

    ###Cmax_True
    list_cmax_True_pk=[]
    for i in range(0,count_row):
        cmax=float(max(df_without_numer.iloc[[i]].iloc[0].tolist()))
        list_cmax_True_pk.append(cmax)
    
    #–≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –°max –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏ Cmax2 (–≤–∫–ª)
    if st.session_state[f"agree_cmax2 - {selector_research}"] == True:
       ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
       if f"selected_value_{selector_research}" not in st.session_state:
          st.session_state[f"selected_value_{selector_research}"] = []
       
       if f"feature_disable_selected_value_{selector_research}" not in st.session_state:
           st.session_state[f"feature_disable_selected_value_{selector_research}"] = True

       ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
       st.info('–í—ã–±–µ—Ä–∏ Cmax:')
       list_columns_without_numer = df.columns.tolist()
       list_columns_without_numer.remove('–ù–æ–º–µ—Ä')

       selected_columns = st.multiselect('–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É:', list_columns_without_numer, key=f'–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É Cmax –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}',max_selections=1)
       st.session_state[f"selected_columns_{selector_research}"] = selected_columns 

       list_keys_cmax = st.session_state[f"selected_value_{selector_research}"]
       if selected_columns != [] and st.session_state[f"feature_disable_selected_value_{selector_research}"]:
          selected_value = st.multiselect('–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏:', df[selected_columns], key=f'–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ Cmax –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}',max_selections=1)
          list_keys_cmax.append(selected_value)

       if list_keys_cmax != []:
          st.session_state[f"selected_value_{selector_research}"] = list_keys_cmax

       list_keys_cmax = st.session_state[f"selected_value_{selector_research}"]
       list_keys_cmax_sample = [item for sublist in list_keys_cmax for item in sublist]

       if st.button('–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ Cmax', key=f"–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ Cmax –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}"):
          del st.session_state[f"selected_value_{selector_research}"]
          list_keys_cmax_sample = []
          selected_columns = st.session_state[f"selected_columns_{selector_research}"]
          st.session_state[f"feature_disable_selected_value_{selector_research}"] = True
                              
       st.write("–°–ø–∏—Å–æ–∫ Cmax:")
       st.write(list_keys_cmax_sample)
       
       if st.session_state[f"agree_cmax2 - {selector_research}"] == True: #–¥–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞, —Ç.–∫ –∏—Å—Ç–∏–Ω–Ω–æ–µ cmax –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
          list_cmax_1_pk=list_keys_cmax_sample
          list_cmax_2_pk=[]
          
    if st.session_state[f"agree_cmax2 - {selector_research}"] == False:
       list_cmax_1_pk=list_cmax_True_pk # –¥–æ–ø—É—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–µ–∑–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
       

    if len(list_cmax_1_pk) == len(df.index.tolist()) and (st.session_state[f"agree_cmax2 - {selector_research}"] == True):
       st.session_state[f"feature_disable_selected_value_{selector_research}"] = False

       ######Cmax2

       if f"feature_disable_selected_value_{selector_research}_2" not in st.session_state:
        st.session_state[f"feature_disable_selected_value_{selector_research}_2"] = True

       st.info('–í—ã–±–µ—Ä–∏ Cmax(2):')
       
       selected_columns_2 = st.multiselect('–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É:', list_columns_without_numer, key=f'–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É Cmax2 –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}', max_selections=1)
       st.session_state[f"selected_columns_2_{selector_research}"] = selected_columns_2

       ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
       if f"selected_value_2_{selector_research}" not in st.session_state:
          st.session_state[f"selected_value_2_{selector_research}"] = []

       list_keys_cmax_2 = st.session_state[f"selected_value_2_{selector_research}"]
       if selected_columns_2 != [] and st.session_state[f"feature_disable_selected_value_{selector_research}_2"]:
          selected_value_2 = st.multiselect('–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏:', df[selected_columns_2], key=f'–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ Cmax2 –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}', max_selections=1)
          list_keys_cmax_2.append(selected_value_2)

       if list_keys_cmax_2 != []:
          st.session_state[f"selected_value_2_{selector_research}"] = list_keys_cmax_2

       list_keys_cmax_2 = st.session_state[f"selected_value_2_{selector_research}"]
       list_keys_cmax_sample_2 = [item for sublist in list_keys_cmax_2 for item in sublist]

       if st.button('–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ Cmax(2)', key=f"–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ Cmax(2) –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}"):
          del st.session_state[f"selected_value_2_{selector_research}"]
          list_keys_cmax_sample_2 = []
          selected_columns_2 = st.session_state[f"selected_columns_2_{selector_research}"]
          st.session_state[f"feature_disable_selected_value_{selector_research}_2"] = True

       st.write("–°–ø–∏—Å–æ–∫ Cmax(2):")
       st.write(list_keys_cmax_sample_2)

       list_cmax_2_pk= list_keys_cmax_sample_2

       if len(list_cmax_2_pk) == len(df.index.tolist()):
          st.session_state[f"feature_disable_selected_value_{selector_research}_2"] = False
       
    ###Tmax_True   
    list_Tmax_True_pk=[]
    for cmax in list_cmax_True_pk:
        for column in df.columns:
            for num, row in df.iterrows():
                if df.iloc[num][column] == cmax:
                   list_Tmax_True_pk.append(f"{column}")
   
    list_Tmax_float_True_pk=[]           
    for i in list_Tmax_True_pk:
        Tmax=float(i)
        list_Tmax_float_True_pk.append(Tmax)

    if (len(list_cmax_1_pk) == len(df.index.tolist())) and (st.session_state[f"agree_cmax2 - {selector_research}"] == True):
       
       ###Tmax   
       list_Tmax_1=[]
       for cmax in list_cmax_1_pk:
           for column in df.columns:
               for num, row in df.iterrows():
                   if df.iloc[num][column] == cmax:
                      list_Tmax_1.append(f"{column}")
     
       list_Tmax_float_1=[]           
       for i in list_Tmax_1:
           Tmax=float(i)
           list_Tmax_float_1.append(Tmax)
       
       list_Tmax_2=[]
       for cmax in list_cmax_2_pk:
           for column in df.columns:
               for num, row in df.iterrows():
                   if df.iloc[num][column] == cmax:
                      list_Tmax_2.append(f"{column}")
     
       list_Tmax_float_2=[]           
       for i in list_Tmax_2:
           Tmax=float(i)
           list_Tmax_float_2.append(Tmax)  

    if (len(list_cmax_1_pk) == len(df.index.tolist())):
       
       ###AUC0-t
       list_AUC_0_T=[]
       if method_auc == 'linear':
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              ###—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π —Å–∑–∞–¥–∏ –º–∞—Å—Å–∏–≤–∞, —Ç.–∫. AUC0-t —ç—Ç–æ AUClast (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–π —Ç–æ—á–∫–∏, –∞ –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π)
              cmax = max(list_concentration)
              index_cmax = list_concentration.index(cmax)
              list_before_cmax = list_concentration[0:index_cmax]
              list_after_cmax = list_concentration[index_cmax:]
              list_before_cmax_t = list_columns_T[0:index_cmax]
              list_after_cmax_t = list_columns_T[index_cmax:]

              count_list_concentration = len(list_after_cmax)
              list_range_for_remove_0 = range(0,count_list_concentration)

              list_conc_without_0=[]
              list_t_without_0=[]
              for i in list_range_for_remove_0:
                  if list_after_cmax[i] !=0:
                     list_conc_without_0.append(list_after_cmax[i])
                     list_t_without_0.append(list_after_cmax_t[i])

              list_concentration = list_before_cmax + list_conc_without_0
              list_columns_T = list_before_cmax_t + list_t_without_0
              ######################

              AUC_0_T=np.trapz(list_concentration,x=list_columns_T)
              list_AUC_0_T.append(AUC_0_T)

       if method_auc == 'linear-up/log-down':
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              ###—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π —Å–∑–∞–¥–∏ –º–∞—Å—Å–∏–≤–∞, —Ç.–∫. AUC0-t —ç—Ç–æ AUClast (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–π —Ç–æ—á–∫–∏, –∞ –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π)
              cmax = max(list_concentration)
              index_cmax = list_concentration.index(cmax)
              list_before_cmax = list_concentration[0:index_cmax]
              list_after_cmax = list_concentration[index_cmax:]
              list_before_cmax_t = list_columns_T[0:index_cmax]
              list_after_cmax_t = list_columns_T[index_cmax:]

              count_list_concentration = len(list_after_cmax)
              list_range_for_remove_0 = range(0,count_list_concentration)

              list_conc_without_0=[]
              list_t_without_0=[]
              for i in list_range_for_remove_0:
                  if list_after_cmax[i] !=0:
                     list_conc_without_0.append(list_after_cmax[i])
                     list_t_without_0.append(list_after_cmax_t[i])

              list_concentration = list_before_cmax + list_conc_without_0
              list_columns_T = list_before_cmax_t + list_t_without_0
              ######################
              
              list_c = list_concentration
              list_t = list_columns_T
              
              count_i = len(list_c)
              list_range= range(0,count_i)
              
              list_AUC_0_T_ascending=[]
              list_AUC_0_T_descending = []
              AUC_0_T_ascending=0
              AUC_0_T_descending = 0
              a=0
              a1=0
              d=0
              d1=0
              for i in list_range:
                  if a1<count_i-1:
                     if list_c[i+1] > list_c[i]:
                        if a<count_i-1:
                            AUC_0_T_ascending += ((list_c[i]+list_c[i+1])*(list_t[i+1]-list_t[i]))/2
                            a+=1
                            list_AUC_0_T_ascending.append(AUC_0_T_ascending)
                  if d1<count_i-1:
                     if list_c[i+1] < list_c[i]:      
                        if d<count_i-1:
                            AUC_0_T_descending+=(list_t[i+1]-list_t[i])/(np.log(np.asarray(list_c[i])/np.asarray(list_c[i+1]))) *(list_c[i]-list_c[i+1])
                            d+=1
                            list_AUC_0_T_descending.append(AUC_0_T_descending)
                     a1+=1
                     d1+=1

              AUC_O_T = list_AUC_0_T_ascending[-1]+list_AUC_0_T_descending[-1]
              
              
              list_AUC_0_T.append(AUC_O_T)

       ####–°max/AUC0-t
       list_–°max_division_AUC0_t_for_division=zip(list_cmax_True_pk,list_AUC_0_T)
       list_–°max_division_AUC0_t=[]
       for i,j in list_–°max_division_AUC0_t_for_division:
               list_–°max_division_AUC0_t.append(i/j)


       ####KEL
       list_kel_total=[]
       for i in range(0,count_row):
           list_columns_T=[]
           for column in df_without_numer.columns:
               list_columns_T.append(float(column))
           list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
           list_concentration.remove(0)
           list_c=list_concentration

           list_time=df_without_numer.columns.tolist()
           list_time.remove(0) 

           list_t=[]
           for i in list_time:
               i=float(i)
               list_t.append(i)

           #—Å—Ä–µ–∑_–±–µ–∑_cmax
           max_value_c=max(list_c)
           index_cmax=list_c.index(max_value_c)

           list_c_without_cmax=list_c[index_cmax+1:]
           list_t_without_cmax=list_t[index_cmax+1:]

           #—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
           count_for_0_1=len(list_c_without_cmax)
           list_range_for_0_1=range(0,count_for_0_1)

           list_time_0=[]
           list_conc_0=[]
           for i in list_range_for_0_1:
               if list_c_without_cmax[i] !=0:
                  list_conc_0.append(list_c_without_cmax[i])
                  list_time_0.append(list_t_without_cmax[i]) 
           ################################

           n_points=len(list_conc_0)
           list_n_points = range(0,n_points)

           #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —É–º–µ–Ω—å—â–∞—é—â–µ–º—Å—è –∫–æ–ª, —Ç–æ—á–µ–∫
           list_for_kel_c=[]
           for j in list_n_points:
               if j<n_points:
                  list_c_new=list_conc_0[j:n_points]
                  list_for_kel_c.append(list_c_new)
           list_for_kel_c.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
           list_for_kel_c.pop(-1)  #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏     

           list_for_kel_t=[]
           for j in list_n_points:
               if j<n_points:
                  list_t_new=list_time_0[j:n_points]
                  list_for_kel_t.append(list_t_new)
           list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
           list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ 

           list_ct_zip=zip(list_for_kel_c,list_for_kel_t)

           list_kel=[]
           list_r=[]
           for i,j in list_ct_zip:

               n_points_r=len(i)

               np_c=np.asarray(i)
               np_t_1=np.asarray(j).reshape((-1,1))

               np_c_log=np.log(np_c)

               model = LinearRegression().fit(np_t_1,np_c_log)

               np_t=np.asarray(j)
               a=np.corrcoef(np_t, np_c_log)
               cor=((a[0])[1])
               r_sq=cor**2

               adjusted_r_sq=1-((1-r_sq)*((n_points_r-1))/(n_points_r-2))

               ########################################
               kel=abs(model.coef_[0])
               list_kel.append(kel)
               list_r.append(adjusted_r_sq)

           #–¥–µ–ª–∞–µ–º —Å—Ä–µ–∑—ã —Å–ø–∏—Å–æ–∫–æ–≤ –¥–æ rmax
           max_r=max(list_r)

           index_max_r= list_r.index(max_r)

           list_r1=list_r
           list_kel1=list_kel

           number_elem_list_r1=len(list_r1)

           list_range_kel=range(0,number_elem_list_r1) 

           list_kel_total_1=[]
           for i in list_range_kel:

               if abs(list_r[index_max_r] - list_r1[i]) < 0.0001: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç rmax
                  list_kel_total.append(list_kel1[i]*math.log(math.exp(1))) #–æ—Ç–¥–∞—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ rmax —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
                  break #—Å–∞–º–∞—è —Ä–∞–Ω–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–æ–≤—Ä—è—é—â–∞—è —É—Å–ª–æ–≤–∏—é

           for i in list_kel_total_1:
               list_kel_total.append(i) 


       ####T1/2
       list_half_live=[]
       for i in list_kel_total:
           half_live=math.log(2)/i
           list_half_live.append(half_live)


       ###AUC0-inf 

       list_auc0_inf=[] 

       list_of_list_c=[]
       for i in range(0,count_row):
           list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
           list_concentration.remove(0)
           list_c = list_concentration
           list_c.reverse() ### –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∏—Å–∫–∞ Clast –Ω–µ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é
           list_of_list_c.append(list_c)

       list_zip_c_AUCt_inf=zip(list_kel_total,list_of_list_c)

           #AUCt-inf 
       list_auc_t_inf=[]     
       for i,j in list_zip_c_AUCt_inf:
           for clast in j:
               if clast != 0:
                  clast_true=clast
                  break
           auc_t_inf=clast_true/i
           list_auc_t_inf.append(auc_t_inf)

       list_auc_t_inf_and_AUC_0_T_zip=zip(list_AUC_0_T,list_auc_t_inf)

       for i,j in list_auc_t_inf_and_AUC_0_T_zip:
           auc0_inf=i+j    
           list_auc0_inf.append(auc0_inf)


       ####Cl_F
       list_Cl_F=[]

       for i in list_auc0_inf:
           Cl_F = float(dose)/i
           list_Cl_F.append(Cl_F) 


       ####Vz_F
       list_Vz_F=[]

       list_zip_kel_Cl_F=zip(list_kel_total,list_Cl_F)

       for i,j in list_zip_kel_Cl_F:
           Vz_F = j/i
           list_Vz_F.append(Vz_F)


       ###AUMC0-t –∏ ###AUMC0-inf
       list_AUMCO_inf=[]

       list_AUMC0_t=[]
       

       list_C_last=[]
       list_T_last=[]

       if method_auc == 'linear':
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              ###—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π —Å–∑–∞–¥–∏ –º–∞—Å—Å–∏–≤–∞, —Ç.–∫. AUMC0-t —ç—Ç–æ AUMClast (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–π —Ç–æ—á–∫–∏, –∞ –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π)
              cmax = max(list_concentration)
              index_cmax = list_concentration.index(cmax)
              list_before_cmax = list_concentration[0:index_cmax]
              list_after_cmax = list_concentration[index_cmax:]
              list_before_cmax_t = list_columns_T[0:index_cmax]
              list_after_cmax_t = list_columns_T[index_cmax:]

              count_list_concentration = len(list_after_cmax)
              list_range_for_remove_0 = range(0,count_list_concentration)

              list_conc_without_0=[]
              list_t_without_0=[]
              for i in list_range_for_remove_0:
                  if list_after_cmax[i] !=0:
                     list_conc_without_0.append(list_after_cmax[i])
                     list_t_without_0.append(list_after_cmax_t[i])

              list_concentration = list_before_cmax + list_conc_without_0
              list_columns_T = list_before_cmax_t + list_t_without_0
              ######################

              list_C_last.append(list_concentration[-1]) 
              list_T_last.append(list_columns_T[-1]) 

              list_len=len(list_concentration)

              list_aumc_i=[]
              for i in range(0,list_len):
                  AUMC=(list_columns_T[i] - list_columns_T[i-1]) *  ((list_concentration[i] * list_columns_T[i] + list_concentration[i-1] * list_columns_T[i-1])/2)
                  list_aumc_i.append(AUMC)

              list_aumc_i.pop(0)

              a=0
              list_AUMC0_t_1=[]
              for i in list_aumc_i:
                  a+=i
                  list_AUMC0_t_1.append(a)
              list_AUMC0_t.append(list_AUMC0_t_1[-1])
       
       if method_auc == 'linear-up/log-down':
          
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              ###—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π —Å–∑–∞–¥–∏ –º–∞—Å—Å–∏–≤–∞, —Ç.–∫. AUMC0-t —ç—Ç–æ AUMClast (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–π —Ç–æ—á–∫–∏, –∞ –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π)
              cmax = max(list_concentration)
              index_cmax = list_concentration.index(cmax)
              list_before_cmax = list_concentration[0:index_cmax]
              list_after_cmax = list_concentration[index_cmax:]
              list_before_cmax_t = list_columns_T[0:index_cmax]
              list_after_cmax_t = list_columns_T[index_cmax:]

              count_list_concentration = len(list_after_cmax)
              list_range_for_remove_0 = range(0,count_list_concentration)

              list_conc_without_0=[]
              list_t_without_0=[]
              for i in list_range_for_remove_0:
                  if list_after_cmax[i] !=0:
                     list_conc_without_0.append(list_after_cmax[i])
                     list_t_without_0.append(list_after_cmax_t[i])

              list_concentration = list_before_cmax + list_conc_without_0
              list_columns_T = list_before_cmax_t + list_t_without_0
              ######################

              list_C_last.append(list_concentration[-1]) 
              list_T_last.append(list_columns_T[-1])

              list_c = list_concentration
              list_t = list_columns_T

              count_i = len(list_c)
              list_range= range(0,count_i)

              list_AUMC_0_T_ascending=[]
              list_AUMC_0_T_descending = []
              AUMC_0_T_ascending=0
              AUMC_0_T_descending = 0
              a=0
              a1=0
              d=0
              d1=0
              for i in list_range:
                  if a1<count_i-1:
                      if list_c[i+1] > list_c[i]:
                          if a<count_i-1:
                              AUMC_0_T_ascending +=(list_t[i+1] - list_t[i]) *  ((list_c[i+1] * list_t[i+1] + list_c[i] * list_t[i])/2)
                              a+=1
                              list_AUMC_0_T_ascending.append(AUMC_0_T_ascending)
                  if d1<count_i-1:
                      if list_c[i+1] < list_c[i]:      
                          if d<count_i-1:
                              coeff = (list_t[i+1] - list_t[i]) / np.log(np.asarray(list_c[i+1])/np.asarray(list_c[i]))
                              AUMC_0_T_descending+= coeff * ((list_c[i+1] * list_t[i+1] - list_c[i] * list_t[i]) - coeff * (list_c[i+1] - list_c[i]))
                              d+=1
                              list_AUMC_0_T_descending.append(AUMC_0_T_descending)
                      a1+=1
                      d1+=1

              AUMC_O_T = list_AUMC_0_T_ascending[-1]+list_AUMC_0_T_descending[-1]

              list_AUMC0_t.append(AUMC_O_T)

       ########AUMC0-inf –∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
       list_zip_for_AUMC_inf=zip(list_kel_total,list_C_last,list_T_last)

       list_AUMCt_inf=[]
       for k,c,t in list_zip_for_AUMC_inf:
           AUMCt_inf=c*t/k+c/(k*k)
           list_AUMCt_inf.append(AUMCt_inf)


       list_AUMC_zip=zip(list_AUMC0_t,list_AUMCt_inf)

       for i,j in list_AUMC_zip:
           AUMCO_inf=i+j
           list_AUMCO_inf.append(AUMCO_inf)

       ###MRT0-t
       list_MRT0_t=[]

       list_zip_AUMCO_t_auc0_t = zip(list_AUMC0_t,list_AUC_0_T)

       for i,j in list_zip_AUMCO_t_auc0_t:
           MRT0_t=i/j
           list_MRT0_t.append(MRT0_t)

       ###MRT0-inf
       list_MRT0_inf=[]

       list_zip_AUMCO_inf_auc0_inf = zip(list_AUMCO_inf,list_auc0_inf)

       for i,j in list_zip_AUMCO_inf_auc0_inf:
           MRT0_inf=i/j
           list_MRT0_inf.append(MRT0_inf)
       

    
       ##################### –§—Ä–µ–π–º –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

       ### –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
       list_for_index=df["–ù–æ–º–µ—Ä"].tolist()
       df_PK=pd.DataFrame(list(zip(list_cmax_True_pk,list_Tmax_float_True_pk,list_C_last,list_T_last,list_MRT0_t,list_MRT0_inf,list_half_live,list_AUC_0_T,list_auc0_inf,list_AUMC0_t,list_AUMCO_inf,list_–°max_division_AUC0_t,list_kel_total,list_Cl_F,list_Vz_F)),columns=['Cmax','Tmax','Clast','Tlast','MRT0‚Üít','MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-t','AUMC0-‚àû','–°max/AUC0-t','Kel','Cl/F','Vz/F'],index=list_for_index)
    
    checking_condition_cmax2 = False

    if st.session_state[f"agree_cmax2 - {selector_research}"] == True:
        
       checking_condition_cmax2 = len(list_cmax_1_pk) == len(df.index.tolist()) and len(list_cmax_2_pk) == len(df.index.tolist()) and st.session_state[f"agree_cmax2 - {selector_research}"] == True
       
       if checking_condition_cmax2:
          
          zip_list_cmax_1_pk_cmax_2_pk = list(zip(list_cmax_1_pk, list_cmax_2_pk))

          zip_Tmax_float_1_Tmax_float_2 = list(zip(list_Tmax_float_1,list_Tmax_float_2))

          #CmaxH
          list_CmaxH = []
          
          for cmax_1_pk, cmax_2_pk in zip_list_cmax_1_pk_cmax_2_pk:
              CmaxH = max(cmax_1_pk, cmax_2_pk)
              list_CmaxH.append(CmaxH)

          #TmaxH
          list_TmaxH = []

          for Tmax_float_1, Tmax_float_2 in zip_Tmax_float_1_Tmax_float_2:
              TmaxH = max(Tmax_float_1, Tmax_float_2)
              list_TmaxH.append(TmaxH)

          #CmaxL/CmaxH
          list_CmaxL_CmaxH = []

          for cmax_1_pk, cmax_2_pk in zip_list_cmax_1_pk_cmax_2_pk:
              CmaxL_CmaxH = min(cmax_1_pk, cmax_2_pk)/max(cmax_1_pk, cmax_2_pk)
              list_CmaxL_CmaxH.append(CmaxL_CmaxH)

          #CmaxH-L
          list_CmaxH_L = []
          for cmax_1_pk, cmax_2_pk in zip_list_cmax_1_pk_cmax_2_pk:
              CmaxH_L = max(cmax_1_pk, cmax_2_pk) - min(cmax_1_pk, cmax_2_pk)
              list_CmaxH_L.append(CmaxH_L)

          #NumBtwPeaks
          list_NumBtwPeaks = []
          for Tmax_float_1, Tmax_float_2 in zip_Tmax_float_1_Tmax_float_2:
              if max(Tmax_float_1, Tmax_float_2) in list_Tmax_float_1:
                  index_max_Tmax_float = list_Tmax_float_1.index(max(Tmax_float_1, Tmax_float_2))
              else:
                  index_max_Tmax_float = list_Tmax_float_2.index(max(Tmax_float_1, Tmax_float_2))
              if min(Tmax_float_1, Tmax_float_2) in list_Tmax_float_1:
                  index_min_Tmax_float = list_Tmax_float_1.index(min(Tmax_float_1, Tmax_float_2))
              else:
                  index_min_Tmax_float = list_Tmax_float_2.index(min(Tmax_float_1, Tmax_float_2))

              NumBtwPeaks = index_max_Tmax_float - index_min_Tmax_float
              list_NumBtwPeaks.append(NumBtwPeaks)
          
          #DuraBtwPeaks
          list_DuraBtwPeaks = []
          for Tmax_float_1, Tmax_float_2 in zip_Tmax_float_1_Tmax_float_2:
              DuraBtwPeaks = max(Tmax_float_1, Tmax_float_2) - min(Tmax_float_1, Tmax_float_2)
              list_DuraBtwPeaks.append(DuraBtwPeaks)

          ### –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
          list_for_index=df["–ù–æ–º–µ—Ä"].tolist()
          df_PK_additional_double_peaks = pd.DataFrame(list(zip(list_cmax_1_pk,list_Tmax_float_1,list_cmax_2_pk,list_Tmax_float_2,list_CmaxH,list_TmaxH,list_CmaxL_CmaxH,list_CmaxH_L,list_NumBtwPeaks,list_DuraBtwPeaks)),columns=['Cmax1','Tmax1','Cmax2','Tmax2','CmaxH','TmaxH','CmaxL/CmaxH','CmaxH-L','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏',
          '–í—Ä–µ–º—è –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏'],index=list_for_index)

          ###–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

          series_Cmax_1=df_PK_additional_double_peaks['Cmax1']
          list_Cmax_str_f_1=[v for v in series_Cmax_1.tolist()]
          series_Cmax_1=pd.Series(list_Cmax_str_f_1, index = df_PK_additional_double_peaks.index.tolist(), name='Cmax1 ' +"("+measure_unit_concentration+")")

          series_Tmax_1=df_PK_additional_double_peaks['Tmax1']
          list_Tmax_str_f_1=[v for v in series_Tmax_1.tolist()]
          series_Tmax_1=pd.Series(list_Tmax_str_f_1, index = df_PK_additional_double_peaks.index.tolist(), name='Tmax1 ' +"("+f"{measure_unit_time}"+")")

          series_Cmax_2=df_PK_additional_double_peaks['Cmax2']
          list_Cmax_str_f_2=[v for v in series_Cmax_2.tolist()]
          series_Cmax_2=pd.Series(list_Cmax_str_f_2, index = df_PK_additional_double_peaks.index.tolist(), name='Cmax2 ' +"("+measure_unit_concentration+")")

          series_Tmax_2=df_PK_additional_double_peaks['Tmax2']
          list_Tmax_str_f_2=[v for v in series_Tmax_2.tolist()]
          series_Tmax_2=pd.Series(list_Tmax_str_f_2, index = df_PK_additional_double_peaks.index.tolist(), name='Tmax2 ' +"("+f"{measure_unit_time}"+")")

          series_CmaxH=df_PK_additional_double_peaks['CmaxH']
          list_CmaxH_str_f=[v for v in series_CmaxH.tolist()]
          series_CmaxH =pd.Series(list_CmaxH_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='CmaxH ' +"("+measure_unit_concentration+")")

          series_TmaxH=df_PK_additional_double_peaks['TmaxH']
          list_TmaxH_str_f=[v for v in series_TmaxH.tolist()]
          series_TmaxH=pd.Series(list_TmaxH_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='TmaxH ' +"("+f"{measure_unit_time}"+")")

          series_CmaxL_CmaxH=df_PK_additional_double_peaks['CmaxL/CmaxH']
          list_CmaxL_CmaxH_str_f=[v for v in series_CmaxL_CmaxH.tolist()]
          series_CmaxL_CmaxH=pd.Series(list_CmaxL_CmaxH_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='CmaxL/CmaxH')

          series_CmaxH_L=df_PK_additional_double_peaks['CmaxH-L']
          list_CmaxH_L_str_f=[v for v in series_CmaxH_L.tolist()]
          series_CmaxH_L=pd.Series(list_CmaxH_L_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='CmaxH-L ' +"("+measure_unit_concentration+")")

          series_NumBtwPeaks=df_PK_additional_double_peaks['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏']
          list_NumBtwPeaks_str_f=[v for v in series_NumBtwPeaks.tolist()]
          series_NumBtwPeaks=pd.Series(list_NumBtwPeaks_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏ ')

          series_DuraBtwPeaks=df_PK_additional_double_peaks['–í—Ä–µ–º—è –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏']
          list_DuraBtwPeaks_str_f=[v for v in series_DuraBtwPeaks.tolist()]
          series_DuraBtwPeaks=pd.Series(list_DuraBtwPeaks_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='–í—Ä–µ–º—è –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏ ' +"("+f"{measure_unit_time}"+")")
          
          df_total_PK_additional_double_peaks = pd.concat([series_Cmax_1, series_Tmax_1, series_Cmax_2, series_Tmax_2, series_CmaxH, series_TmaxH, 
          series_CmaxL_CmaxH, series_CmaxH_L,series_NumBtwPeaks,series_DuraBtwPeaks], axis= 1)
        
          df_total_PK_additional_double_peaks.index.name = '–ù–æ–º–µ—Ä'
      
    if checking_condition_cmax2 or (len(list_cmax_1_pk) == len(df.index.tolist()) and (st.session_state[f"agree_cmax2 - {selector_research}"] == False)):
    
       ###–æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

       dict_df_averaged_3_PK = create_table_descriptive_statistics_before_95CI_pk(df_PK)
       df_averaged_3_PK = dict_df_averaged_3_PK.get("df_averaged_3_PK")

       df_concat_PK_pk= pd.concat([df_PK,df_averaged_3_PK],sort=False,axis=0)

       ###–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

       series_Cmax=df_concat_PK_pk['Cmax']
       list_Cmax_str_f=[v for v in series_Cmax.tolist()]
       series_Cmax=pd.Series(list_Cmax_str_f, index = df_concat_PK_pk.index.tolist(), name='Cmax ' +"("+measure_unit_concentration+")")

       series_Tmax=df_concat_PK_pk['Tmax']
       list_Tmax_str_f=[v for v in series_Tmax.tolist()]
       series_Tmax=pd.Series(list_Tmax_str_f, index = df_concat_PK_pk.index.tolist(), name='Tmax ' +"("+f"{measure_unit_time}"+")")

       series_Clast=df_concat_PK_pk['Clast']
       list_Clast_str_f=[v for v in series_Clast.tolist()]
       series_Clast=pd.Series(list_Clast_str_f, index = df_concat_PK_pk.index.tolist(), name='Clast ' +"("+measure_unit_concentration+")")

       series_Tlast=df_concat_PK_pk['Tlast']
       list_Tlast_str_f=[v for v in series_Tlast.tolist()]
       series_Tlast=pd.Series(list_Tlast_str_f, index = df_concat_PK_pk.index.tolist(), name='Tlast ' +"("+f"{measure_unit_time}"+")")
       
       series_MRT0_t= df_concat_PK_pk['MRT0‚Üít']
       list_MRT0_t_str_f=[v for v in series_MRT0_t.tolist()]
       series_MRT0_t=pd.Series(list_MRT0_t_str_f, index = df_concat_PK_pk.index.tolist(), name='MRT0‚Üít '+"("+f"{measure_unit_time}"+")")

       series_MRT0_inf= df_concat_PK_pk['MRT0‚Üí‚àû']
       list_MRT0_inf_str_f=[v for v in series_MRT0_inf.tolist()]
       series_MRT0_inf=pd.Series(list_MRT0_inf_str_f, index = df_concat_PK_pk.index.tolist(), name='MRT0‚Üí‚àû '+"("+f"{measure_unit_time}"+")")

       series_half_live= df_concat_PK_pk['T1/2']
       list_half_live_str_f=[v for v in series_half_live.tolist()]
       series_half_live=pd.Series(list_half_live_str_f, index = df_concat_PK_pk.index.tolist(), name='T1/2 '+"("+f"{measure_unit_time}"+")")

       series_AUC0_t= df_concat_PK_pk['AUC0-t']
       list_AUC0_t_str_f=[v for v in series_AUC0_t.tolist()]
       series_AUC0_t=pd.Series(list_AUC0_t_str_f, index = df_concat_PK_pk.index.tolist(), name='AUC0-t '+"("+measure_unit_concentration+f"√ó{measure_unit_time}" +")")

       series_AUC0_inf= df_concat_PK_pk['AUC0‚Üí‚àû']
       list_AUC0_inf_str_f=[v for v in series_AUC0_inf.tolist()]
       series_AUC0_inf=pd.Series(list_AUC0_inf_str_f, index = df_concat_PK_pk.index.tolist(), name='AUC0‚Üí‚àû '+"("+measure_unit_concentration+f"√ó{measure_unit_time}" +")")
       
       series_AUMC0_t= df_concat_PK_pk['AUMC0-t']
       list_AUMC0_t_str_f=[v for v in series_AUMC0_t.tolist()]
       series_AUMC0_t=pd.Series(list_AUMC0_t_str_f, index = df_concat_PK_pk.index.tolist(), name='AUMC0-t '+"("+measure_unit_concentration+f"√ó{measure_unit_time}\u00B2" +")")

       series_AUMC0_inf= df_concat_PK_pk['AUMC0-‚àû']
       list_AUMC0_inf_str_f=[v for v in series_AUMC0_inf.tolist()]
       series_AUMC0_inf=pd.Series(list_AUMC0_inf_str_f, index = df_concat_PK_pk.index.tolist(), name='AUMC0-‚àû '+"("+measure_unit_concentration+f"√ó{measure_unit_time}\u00B2" +")")

       series_–°max_dev_AUC0_t= df_concat_PK_pk['–°max/AUC0-t']
       list_–°max_dev_AUC0_t_str_f=[v for v in series_–°max_dev_AUC0_t.tolist()]
       series_–°max_dev_AUC0_t=pd.Series(list_–°max_dev_AUC0_t_str_f, index = df_concat_PK_pk.index.tolist(), name='–°max/AUC0-t '+"("+f"{measure_unit_time}\u207B\u00B9"+")")

       series_Kel= df_concat_PK_pk['Kel']
       list_Kel_str_f=[v for v in series_Kel.tolist()]
       series_Kel=pd.Series(list_Kel_str_f, index = df_concat_PK_pk.index.tolist(), name='Kel '+"("+f"{measure_unit_time}\u207B\u00B9"+")")

       series_Cl_F= df_concat_PK_pk['Cl/F']
       list_Cl_F_str_f=[v for v in series_Cl_F.tolist()]
       series_Cl_F=pd.Series(list_Cl_F_str_f, index = df_concat_PK_pk.index.tolist(), name='Cl/F ' +"("+f"({measure_unit_dose})/({measure_unit_concentration})/{measure_unit_time}"+")")

       series_Vz_F= df_concat_PK_pk['Vz/F']
       list_Vz_F_str_f=[v for v in series_Vz_F.tolist()]
       series_Vz_F=pd.Series(list_Vz_F_str_f, index = df_concat_PK_pk.index.tolist(), name='Vz/F ' +"("+f"({measure_unit_dose})/({measure_unit_concentration})"+")")
       
       df_total_PK_pk = pd.concat([series_Cmax, series_Tmax, series_Clast, series_Tlast, series_MRT0_t, series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_t,series_AUMC0_inf,series_–°max_dev_AUC0_t,series_Kel,series_Cl_F,series_Vz_F], axis= 1) 
        
       
       df_total_PK_pk.index.name = '–ù–æ–º–µ—Ä'

       #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É–±—ä–µ–∫—Ç–æ–≤ –¥–æ —Ü–µ–ª–æ–≥–æ
       round_subjects_count(df_total_PK_pk)
       
       #–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
       list_confidence_interval_PK = dict_df_averaged_3_PK.get("list_confidence_interval_PK")

       ###–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
       df_total_PK_pk = add_ci_in_table(df_total_PK_pk,list_confidence_interval_PK)

       ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

       df_total_PK_pk = rename_parametrs_descriptive_statistics(df_total_PK_pk)

       if st.session_state[f"agree_cmax2 - {selector_research}"] == False:
          dict_PK_parametrs = {
              "df_total_PK": df_total_PK_pk,
              "df_PK":df_PK,
              "df_concat_PK":df_concat_PK_pk,
              "list_cmax_1": list_cmax_True_pk #–∑–¥–µ—Å—å —Ç–∞–∫–æ–µ –¥–æ–ø—É—â–µ–Ω–∏–µ, –≤ —Ü–µ–ª–æ–º –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –ª–µ–Ω—å –º–µ–Ω—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å–ª–æ–≤–∞—Ä—è, —ç—Ç–æ –Ω–µ –∫–∞–∫ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–æ–¥–µ –æ—Å–Ω–æ–≤–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
          }
       else:
          dict_PK_parametrs = {
              "df_total_PK": df_total_PK_pk,
              "df_PK":df_PK,
              "df_concat_PK":df_concat_PK_pk,
              "list_cmax_1": list_cmax_1_pk,
              "list_cmax_2": list_cmax_2_pk,
              "df_total_PK_additional_double_peaks": df_total_PK_additional_double_peaks
          }

       return dict_PK_parametrs
       























def pk_parametrs_total_intravenously(df,selector_research,method_auc,dose,measure_unit_concentration,measure_unit_time,measure_unit_dose):
    
    ############ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ö

    df_without_numer=df.drop(['–ù–æ–º–µ—Ä'],axis=1)
    count_row=df_without_numer.shape[0]

    list_count_row=range(count_row)

    ###Cmax_True
    list_cmax_True_pk=[]
    for i in range(0,count_row):
        cmax=float(max(df_without_numer.iloc[[i]].iloc[0].tolist()))
        list_cmax_True_pk.append(cmax)
    
    #–≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –°max –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏ Cmax2 (–≤–∫–ª)
    if st.session_state[f"agree_cmax2 - {selector_research}"] == True:
       ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
       if f"selected_value_{selector_research}" not in st.session_state:
          st.session_state[f"selected_value_{selector_research}"] = []
       
       if f"feature_disable_selected_value_{selector_research}" not in st.session_state:
           st.session_state[f"feature_disable_selected_value_{selector_research}"] = True

       ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
       st.info('–í—ã–±–µ—Ä–∏ Cmax:')
       list_columns_without_numer = df.columns.tolist()
       list_columns_without_numer.remove('–ù–æ–º–µ—Ä')
       selected_columns = st.multiselect('–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É:', list_columns_without_numer, key=f'–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É Cmax –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}',max_selections=1)
       st.session_state[f"selected_columns_{selector_research}"] = selected_columns 

       list_keys_cmax = st.session_state[f"selected_value_{selector_research}"]
       if selected_columns != [] and st.session_state[f"feature_disable_selected_value_{selector_research}"]:
          selected_value = st.multiselect('–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏:', df[selected_columns], key=f'–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ Cmax –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}',max_selections=1)
          list_keys_cmax.append(selected_value)

       if list_keys_cmax != []:
          st.session_state[f"selected_value_{selector_research}"] = list_keys_cmax

       list_keys_cmax = st.session_state[f"selected_value_{selector_research}"]
       list_keys_cmax_sample = [item for sublist in list_keys_cmax for item in sublist]

       if st.button('–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ Cmax', key=f"–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ Cmax –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}"):
          del st.session_state[f"selected_value_{selector_research}"]
          list_keys_cmax_sample = []
          selected_columns = st.session_state[f"selected_columns_{selector_research}"]
          st.session_state[f"feature_disable_selected_value_{selector_research}"] = True
                              
       st.write("–°–ø–∏—Å–æ–∫ Cmax:")
       st.write(list_keys_cmax_sample)
       
       if st.session_state[f"agree_cmax2 - {selector_research}"] == True: #–¥–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞, —Ç.–∫ –∏—Å—Ç–∏–Ω–Ω–æ–µ cmax –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
          list_cmax_1_pk=list_keys_cmax_sample
          list_cmax_2_pk=[]
          
    if st.session_state[f"agree_cmax2 - {selector_research}"] == False:
       list_cmax_1_pk=list_cmax_True_pk # –¥–æ–ø—É—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–µ–∑–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    if len(list_cmax_1_pk) == len(df.index.tolist()) and (st.session_state[f"agree_cmax2 - {selector_research}"] == True):
       st.session_state[f"feature_disable_selected_value_{selector_research}"] = False

       ######Cmax2

       if f"feature_disable_selected_value_{selector_research}_2" not in st.session_state:
        st.session_state[f"feature_disable_selected_value_{selector_research}_2"] = True

       st.info('–í—ã–±–µ—Ä–∏ Cmax(2):')
       
       selected_columns_2 = st.multiselect('–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É:', list_columns_without_numer, key=f'–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É Cmax2 –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}', max_selections=1)
       st.session_state[f"selected_columns_2_{selector_research}"] = selected_columns_2

       ###—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
       if f"selected_value_2_{selector_research}" not in st.session_state:
          st.session_state[f"selected_value_2_{selector_research}"] = []

       list_keys_cmax_2 = st.session_state[f"selected_value_2_{selector_research}"]
       if selected_columns_2 != [] and st.session_state[f"feature_disable_selected_value_{selector_research}_2"]:
          selected_value_2 = st.multiselect('–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏:', df[selected_columns_2], key=f'–í—ã–±–µ—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ Cmax2 –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}', max_selections=1)
          list_keys_cmax_2.append(selected_value_2)

       if list_keys_cmax_2 != []:
          st.session_state[f"selected_value_2_{selector_research}"] = list_keys_cmax_2

       list_keys_cmax_2 = st.session_state[f"selected_value_2_{selector_research}"]
       list_keys_cmax_sample_2 = [item for sublist in list_keys_cmax_2 for item in sublist]

       if st.button('–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ Cmax(2)', key=f"–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ Cmax(2) –≤–≤–µ–¥–µ–Ω–∏—è –õ–° {selector_research}"):
          del st.session_state[f"selected_value_2_{selector_research}"]
          list_keys_cmax_sample_2 = []
          selected_columns_2 = st.session_state[f"selected_columns_2_{selector_research}"]
          st.session_state[f"feature_disable_selected_value_{selector_research}_2"] = True

       st.write("–°–ø–∏—Å–æ–∫ Cmax(2):")
       st.write(list_keys_cmax_sample_2)

       list_cmax_2_pk= list_keys_cmax_sample_2

       if len(list_cmax_2_pk) == len(df.index.tolist()):
          st.session_state[f"feature_disable_selected_value_{selector_research}_2"] = False

    ###Tmax_True   
    list_Tmax_True_pk=[]
    for cmax in list_cmax_True_pk:
        for column in df.columns:
            for num, row in df.iterrows():
                if df.iloc[num][column] == cmax:
                   list_Tmax_True_pk.append(f"{column}")
   
    list_Tmax_float_True_pk=[]           
    for i in list_Tmax_True_pk:
        Tmax=float(i)
        list_Tmax_float_True_pk.append(Tmax)

    if (len(list_cmax_1_pk) == len(df.index.tolist())) and (st.session_state[f"agree_cmax2 - {selector_research}"] == True):
       
       ###Tmax   
       list_Tmax_1=[]
       for cmax in list_cmax_1_pk:
           for column in df.columns:
               for num, row in df.iterrows():
                   if df.iloc[num][column] == cmax:
                      list_Tmax_1.append(f"{column}")
     
       list_Tmax_float_1=[]           
       for i in list_Tmax_1:
           Tmax=float(i)
           list_Tmax_float_1.append(Tmax)

       list_Tmax_2=[]
       for cmax in list_cmax_2_pk:
           for column in df.columns:
               for num, row in df.iterrows():
                   if df.iloc[num][column] == cmax:
                      list_Tmax_2.append(f"{column}")
     
       list_Tmax_float_2=[]           
       for i in list_Tmax_2:
           Tmax=float(i)
           list_Tmax_float_2.append(Tmax)  

    if (len(list_cmax_1_pk) == len(df.index.tolist())):
       
       ###C0
       list_C0_total = []
       for i in range(0,count_row):
             list_columns_T=[]
             for column in df_without_numer.columns:
                 list_columns_T.append(float(column))
             list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
             
             # –û—Ü–µ–Ω–∫–∞ C‚ÇÄ —á–µ—Ä–µ–∑ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ç–æ—á–µ–∫
             if list_concentration[0] > 0 and list_concentration[1] > 0:
                 log_conc = np.log(list_concentration[:2])
                 slope, intercept, r_value, p_value, std_err = stats.linregress(list_columns_T[:2], log_conc)

                 if slope < 0:
                     # –û—Ü–µ–Ω–∫–∞ C‚ÇÄ —á–µ—Ä–µ–∑ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—é
                     C0 = np.exp(intercept)
                     list_C0_total.append(C0)
                 else:
                     # –ï—Å–ª–∏ –Ω–∞–∫–ª–æ–Ω >= 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                     C0 = list_concentration[0]
                     list_C0_total.append(C0)
             else:
                 C0 = list_concentration[0]
                 list_C0_total.append(C0)

       ###AUC0-t
       list_AUC_0_T=[]
       if method_auc == 'linear':
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              ###C0
              list_C0 = []
              # –û—Ü–µ–Ω–∫–∞ C‚ÇÄ —á–µ—Ä–µ–∑ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ç–æ—á–µ–∫
              if list_concentration[0] > 0 and list_concentration[1] > 0:
                  log_conc = np.log(list_concentration[:2])
                  slope, intercept, r_value, p_value, std_err = stats.linregress(list_columns_T[:2], log_conc)

                  if slope < 0:
                      # –û—Ü–µ–Ω–∫–∞ C‚ÇÄ —á–µ—Ä–µ–∑ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—é
                      C0 = np.exp(intercept)
                      list_C0.append(C0)
                  else:
                      # –ï—Å–ª–∏ –Ω–∞–∫–ª–æ–Ω >= 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                      C0 = list_concentration[0]
                      list_C0.append(C0)
              else:
                  C0 = list_concentration[0]
                  list_C0.append(C0)

              ###—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π —Å–∑–∞–¥–∏ –º–∞—Å—Å–∏–≤–∞, —Ç.–∫. AUC0-t —ç—Ç–æ AUClast (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–π —Ç–æ—á–∫–∏, –∞ –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π)
              cmax = max(list_concentration)
              index_cmax = list_concentration.index(cmax)
              list_before_cmax = list_concentration[0:index_cmax]
              list_after_cmax = list_concentration[index_cmax:]
              list_before_cmax_t = list_columns_T[0:index_cmax]
              list_after_cmax_t = list_columns_T[index_cmax:]

              count_list_concentration = len(list_after_cmax)
              list_range_for_remove_0 = range(0,count_list_concentration)

              list_conc_without_0=[]
              list_t_without_0=[]
              for i in list_range_for_remove_0:
                  if list_after_cmax[i] !=0:
                     list_conc_without_0.append(list_after_cmax[i])
                     list_t_without_0.append(list_after_cmax_t[i])

              list_concentration = list_before_cmax + list_conc_without_0
              list_columns_T = list_before_cmax_t + list_t_without_0
              ######################
              # –¥–æ–±–∞–≤–∏–ª–∏ —ç–∫—Å—Ä–æ–ø–æ–ª—è—Ü–∏—é –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ AUC
              AUC_0_T=np.trapz(list_C0 + list_concentration,[0] + list_columns_T)
              list_AUC_0_T.append(AUC_0_T)

       if method_auc == 'linear-up/log-down':
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              # –û—Ü–µ–Ω–∫–∞ C‚ÇÄ —á–µ—Ä–µ–∑ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ç–æ—á–µ–∫
              if list_concentration[0] > 0 and list_concentration[1] > 0:
                  log_conc = np.log(list_concentration[:2])
                  slope, intercept, _, _, _ = stats.linregress(list_columns_T[:2], log_conc)
                  if slope < 0:
                      C0 = np.exp(intercept)
                  else:
                      C0 = list_concentration[0]
              else:
                  C0 = list_concentration[0]

              # –£–¥–∞–ª–µ–Ω–∏–µ –Ω—É–ª–µ–π –≤ –∫–æ–Ω—Ü–µ –º–∞—Å—Å–∏–≤–∞
              while list_concentration and list_concentration[-1] == 0:
                  list_concentration.pop()
                  list_columns_T.pop()

              # –í—Å—Ç–∞–≤–∫–∞ C‚ÇÄ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–æ–≤
              if list_columns_T[0] != 0:
                  list_columns_T.insert(0, 0)
                  list_concentration.insert(0, C0)

              # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ AUC
              AUC_0_T = 0
              for i in range(len(list_concentration) - 1):
                  delta_t = list_columns_T[i+1] - list_columns_T[i]
                  c_current = list_concentration[i]
                  c_next = list_concentration[i+1]

                  if c_next > c_current:
                      # –õ–∏–Ω–µ–π–Ω—ã–π –º–µ—Ç–æ–¥
                      AUC_increment = ((c_current + c_next) / 2) * delta_t
                  elif c_next < c_current and c_next > 0 and c_current > 0:
                      # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
                      AUC_increment = (c_current - c_next) * delta_t / np.log(c_current / c_next)
                  else:
                      # –õ–∏–Ω–µ–π–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–≤–Ω—ã—Ö –∏–ª–∏ –Ω—É–ª–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π
                      AUC_increment = ((c_current + c_next) / 2) * delta_t

                  AUC_0_T += AUC_increment

              list_AUC_0_T.append(AUC_0_T)

       ####–°max/AUC0-t
       list_–°max_division_AUC0_t_for_division=zip(list_cmax_True_pk,list_AUC_0_T)
       list_–°max_division_AUC0_t=[]
       for i,j in list_–°max_division_AUC0_t_for_division:
               list_–°max_division_AUC0_t.append(i/j)


       ####KEL
       list_kel_total=[]
       for i in range(0,count_row):
           list_columns_T=[]
           for column in df_without_numer.columns:
               list_columns_T.append(float(column))
           list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()
           list_c=list_concentration

           list_time=df_without_numer.columns.tolist()

           list_t=[]
           for i in list_time:
               i=float(i)
               list_t.append(i)

           #—Å—Ä–µ–∑_–±–µ–∑_cmax
           max_value_c=max(list_c)
           index_cmax=list_c.index(max_value_c)
           
           #—Å–æ—Ö—Ä–∞–Ω—è–µ–º cmax, —Å–ø–∏—Å–∫–∏ –Ω–∞–∑–≤–∞–Ω—ã –ø–æ —Å—Ç–∞—Ä–æ–º—É
           list_c_without_cmax=list_c[index_cmax:]
           list_t_without_cmax=list_t[index_cmax:]

           #—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
           count_for_0_1=len(list_c_without_cmax)
           list_range_for_0_1=range(0,count_for_0_1)

           list_time_0=[]
           list_conc_0=[]
           for i in list_range_for_0_1:
               if list_c_without_cmax[i] !=0:
                  list_conc_0.append(list_c_without_cmax[i])
                  list_time_0.append(list_t_without_cmax[i]) 
           ################################

           n_points=len(list_conc_0)
           list_n_points = range(0,n_points)

           #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —É–º–µ–Ω—å—â–∞—é—â–µ–º—Å—è –∫–æ–ª, —Ç–æ—á–µ–∫
           list_for_kel_c=[]
           for j in list_n_points:
               if j<n_points:
                  list_c_new=list_conc_0[j:n_points]
                  list_for_kel_c.append(list_c_new)
           list_for_kel_c.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
           #list_for_kel_c.pop(-1)  #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏     

           list_for_kel_t=[]
           for j in list_n_points:
               if j<n_points:
                  list_t_new=list_time_0[j:n_points]
                  list_for_kel_t.append(list_t_new)
           list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π
           #list_for_kel_t.pop(-1) #—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ 

           list_ct_zip=zip(list_for_kel_c,list_for_kel_t)

           list_kel=[]
           list_r=[]
           for i,j in list_ct_zip:

               n_points_r=len(i)

               np_c=np.asarray(i)
               np_t_1=np.asarray(j).reshape((-1,1))

               np_c_log=np.log(np_c)

               model = LinearRegression().fit(np_t_1,np_c_log)

               np_t=np.asarray(j)
               a=np.corrcoef(np_t, np_c_log)
               cor=((a[0])[1])
               r_sq=cor**2

               adjusted_r_sq=1-((1-r_sq)*((n_points_r-1))/(n_points_r-2))

               ########################################
               kel=abs(model.coef_[0])
               list_kel.append(kel)
               list_r.append(adjusted_r_sq)

           #–¥–µ–ª–∞–µ–º —Å—Ä–µ–∑—ã —Å–ø–∏—Å–æ–∫–æ–≤ –¥–æ rmax
           max_r=max(list_r)

           index_max_r= list_r.index(max_r)

           list_r1=list_r
           list_kel1=list_kel

           number_elem_list_r1=len(list_r1)

           list_range_kel=range(0,number_elem_list_r1) 

           list_kel_total_1=[]
           for i in list_range_kel:

               if abs(list_r[index_max_r] - list_r1[i]) < 0.0001: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç rmax
                  list_kel_total.append(list_kel1[i]*math.log(math.exp(1))) #–æ—Ç–¥–∞—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ rmax —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–µ–∫
                  break #—Å–∞–º–∞—è —Ä–∞–Ω–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–æ–≤—Ä—è—é—â–∞—è —É—Å–ª–æ–≤–∏—é

           for i in list_kel_total_1:
               list_kel_total.append(i) 


       ####T1/2
       list_half_live=[]
       for i in list_kel_total:
           half_live=math.log(2)/i
           list_half_live.append(half_live)


       ###AUC0-inf 

       list_auc0_inf=[] 

       list_of_list_c=[]
       
       for i in range(0,count_row):
           list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

           list_c = list_concentration
           list_c.reverse() ### –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–∏—Å–∫–∞ Clast –Ω–µ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é
           list_of_list_c.append(list_c)

       list_zip_c_AUCt_inf=zip(list_kel_total,list_of_list_c)

           #AUCt-inf 
       list_auc_t_inf=[]     
       for i,j in list_zip_c_AUCt_inf:
           for clast in j:
               if clast != 0:
                  clast_true=clast
                  break
           auc_t_inf=clast_true/i
           list_auc_t_inf.append(auc_t_inf)

       list_auc_t_inf_and_AUC_0_T_zip=zip(list_AUC_0_T,list_auc_t_inf)

       for i,j in list_auc_t_inf_and_AUC_0_T_zip:
           auc0_inf=i+j    
           list_auc0_inf.append(auc0_inf)


       ####Cl
       list_cl=[]

       for i in list_auc0_inf:
           cl = float(dose)/i
           list_cl.append(cl) 


       ####Vz
       list_Vz=[]

       list_zip_kel_cl=zip(list_kel_total,list_cl)

       for i,j in list_zip_kel_cl:
           Vz = j/i
           list_Vz.append(Vz)


       ###AUMC0-t –∏ ###AUMC0-inf
       list_AUMCO_inf=[]

       list_AUMC0_t=[]
       

       list_C_last=[]
       list_T_last=[]

       if method_auc == 'linear':
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              ###C0
              list_C0 = []
              # –û—Ü–µ–Ω–∫–∞ C‚ÇÄ —á–µ—Ä–µ–∑ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫—É—é –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —Ç–æ—á–µ–∫
              if list_concentration[0] > 0 and list_concentration[1] > 0:
                  log_conc = np.log(list_concentration[:2])
                  slope, intercept, r_value, p_value, std_err = stats.linregress(list_columns_T[:2], log_conc)

                  if slope < 0:
                      # –û—Ü–µ–Ω–∫–∞ C‚ÇÄ —á–µ—Ä–µ–∑ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—é
                      C0 = np.exp(intercept)
                      list_C0.append(C0)
                  else:
                      # –ï—Å–ª–∏ –Ω–∞–∫–ª–æ–Ω >= 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                      C0 = list_concentration[0]
                      list_C0.append(C0)
              else:
                  C0 = list_concentration[0]
                  list_C0.append(C0)

              ###—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—É–ª–µ–π —Å–∑–∞–¥–∏ –º–∞—Å—Å–∏–≤–∞, —Ç.–∫. AUMC0-t —ç—Ç–æ AUMClast (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–π —Ç–æ—á–∫–∏, –∞ –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π)
              cmax = max(list_concentration)
              index_cmax = list_concentration.index(cmax)
              list_before_cmax = list_concentration[0:index_cmax]
              list_after_cmax = list_concentration[index_cmax:]
              list_before_cmax_t = list_columns_T[0:index_cmax]
              list_after_cmax_t = list_columns_T[index_cmax:]

              count_list_concentration = len(list_after_cmax)
              list_range_for_remove_0 = range(0,count_list_concentration)

              list_conc_without_0=[]
              list_t_without_0=[]
              for i in list_range_for_remove_0:
                  if list_after_cmax[i] !=0:
                     list_conc_without_0.append(list_after_cmax[i])
                     list_t_without_0.append(list_after_cmax_t[i])
              
              list_concentration = list_before_cmax + list_conc_without_0
              list_columns_T = list_before_cmax_t + list_t_without_0
              #–ø—Ä–∏–±–∞–≤–ª—è–µ–º —ç–∫—Ç—Ä–æ–ø–æ–ª—è—Ü–∏—é –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
              list_concentration.insert(0, list_C0[0])
              list_columns_T.insert(0, 0)
              ######################

              list_C_last.append(list_concentration[-1]) 
              list_T_last.append(list_columns_T[-1]) 

              list_len=len(list_concentration)

              list_aumc_i=[]
              for i in range(0,list_len):
                  AUMC=(list_columns_T[i] - list_columns_T[i-1]) *  ((list_concentration[i] * list_columns_T[i] + list_concentration[i-1] * list_columns_T[i-1])/2)
                  list_aumc_i.append(AUMC)

              list_aumc_i.pop(0)

              a=0
              list_AUMC0_t_1=[]
              for i in list_aumc_i:
                  a+=i
                  list_AUMC0_t_1.append(a)
              list_AUMC0_t.append(list_AUMC0_t_1[-1])
       
       if method_auc == 'linear-up/log-down':
          
          for i in range(0,count_row):
              list_columns_T=[]
              for column in df_without_numer.columns:
                  list_columns_T.append(float(column))
              list_concentration=df_without_numer.iloc[[i]].iloc[0].tolist()

              ### C‚ÇÄ
              if list_concentration[0] > 0 and list_concentration[1] > 0:
                  log_conc = np.log(list_concentration[:2])
                  slope, intercept, _, _, _ = stats.linregress(list_columns_T[:2], log_conc)
                  if slope < 0:
                      C0 = np.exp(intercept)
                  else:
                      C0 = list_concentration[0]
              else:
                  C0 = list_concentration[0]

              ### –£–¥–∞–ª–µ–Ω–∏–µ –Ω—É–ª–µ–π —Å–∑–∞–¥–∏ –º–∞—Å—Å–∏–≤–∞
              while list_concentration and list_concentration[-1] == 0:
                  list_concentration.pop()
                  list_columns_T.pop()

              # –í—Å—Ç–∞–≤–∫–∞ C‚ÇÄ
              list_concentration.insert(0, C0)
              list_columns_T.insert(0, 0)

              # –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
              list_C_last.append(list_concentration[-1])
              list_T_last.append(list_columns_T[-1])

              ### AUMC —Ä–∞—Å—á–µ—Ç
              AUMC_0_T = 0
              for i in range(len(list_concentration) - 1):
                  delta_t = list_columns_T[i+1] - list_columns_T[i]
                  c_current = list_concentration[i]
                  c_next = list_concentration[i+1]

                  if c_next > c_current:
                      # –õ–∏–Ω–µ–π–Ω—ã–π –º–µ—Ç–æ–¥
                      AUMC_increment = delta_t * ((c_next * list_columns_T[i+1] + c_current * list_columns_T[i]) / 2)
                  elif c_next < c_current and c_next > 0 and c_current > 0:
                      # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
                      coeff = delta_t / np.log(c_next / c_current)
                      AUMC_increment = coeff * ((c_next * list_columns_T[i+1] - c_current * list_columns_T[i]) - coeff * (c_next - c_current))
                  else:
                      # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–≤–Ω—ã—Ö –∏–ª–∏ –Ω—É–ª–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π
                      AUMC_increment = delta_t * ((c_next * list_columns_T[i+1] + c_current * list_columns_T[i]) / 2)

                  AUMC_0_T += AUMC_increment

              list_AUMC0_t.append(AUMC_0_T)

       ########AUMC0-inf –∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
       list_zip_for_AUMC_inf=zip(list_kel_total,list_C_last,list_T_last)

       list_AUMCt_inf=[]
       for k,c,t in list_zip_for_AUMC_inf:
           AUMCt_inf=c*t/k+c/(k*k)
           list_AUMCt_inf.append(AUMCt_inf)


       list_AUMC_zip=zip(list_AUMC0_t,list_AUMCt_inf)

       for i,j in list_AUMC_zip:
           AUMCO_inf=i+j
           list_AUMCO_inf.append(AUMCO_inf)

       ###MRT0-t
       list_MRT0_t=[]

       list_zip_AUMCO_t_auc0_t = zip(list_AUMC0_t,list_AUC_0_T)

       for i,j in list_zip_AUMCO_t_auc0_t:
           MRT0_t=i/j
           list_MRT0_t.append(MRT0_t)

       ###MRT0-inf
       list_MRT0_inf=[]

       list_zip_AUMCO_inf_auc0_inf = zip(list_AUMCO_inf,list_auc0_inf)

       for i,j in list_zip_AUMCO_inf_auc0_inf:
           MRT0_inf=i/j
           list_MRT0_inf.append(MRT0_inf)

       ####Vss
       list_Vss=[]

       list_zip_MRT0_inf_cl=zip(list_MRT0_inf,list_cl)

       for i,j in list_zip_MRT0_inf_cl:
           Vss = j*i
           list_Vss.append(Vss)
    
       ##################### –§—Ä–µ–π–º –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

       ### –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
       list_for_index=df["–ù–æ–º–µ—Ä"].tolist()
       df_PK=pd.DataFrame(list(zip(list_cmax_True_pk,list_Tmax_float_True_pk,list_C0_total,list_C_last,list_T_last,list_MRT0_t,list_MRT0_inf,list_half_live,list_AUC_0_T,list_auc0_inf,list_AUMC0_t,list_AUMCO_inf,list_–°max_division_AUC0_t,list_kel_total,list_cl,list_Vz,list_Vss)),columns=['Cmax','Tmax','C0','Clast','Tlast','MRT0‚Üít','MRT0‚Üí‚àû','T1/2','AUC0-t','AUC0‚Üí‚àû','AUMC0-t','AUMC0-‚àû','–°max/AUC0-t','Kel','Cl','Vz','Vss'],index=list_for_index)
    
    checking_condition_cmax2 = False

    if st.session_state[f"agree_cmax2 - {selector_research}"] == True:
        
       checking_condition_cmax2 = len(list_cmax_1_pk) == len(df.index.tolist()) and len(list_cmax_2_pk) == len(df.index.tolist()) and st.session_state[f"agree_cmax2 - {selector_research}"] == True
       
       if checking_condition_cmax2:
          
          zip_list_cmax_1_pk_cmax_2_pk = list(zip(list_cmax_1_pk, list_cmax_2_pk))

          zip_Tmax_float_1_Tmax_float_2 = list(zip(list_Tmax_float_1,list_Tmax_float_2))

          #CmaxH
          list_CmaxH = []
          
          for cmax_1_pk, cmax_2_pk in zip_list_cmax_1_pk_cmax_2_pk:
              CmaxH = max(cmax_1_pk, cmax_2_pk)
              list_CmaxH.append(CmaxH)

          #TmaxH
          list_TmaxH = []

          for Tmax_float_1, Tmax_float_2 in zip_Tmax_float_1_Tmax_float_2:
              TmaxH = max(Tmax_float_1, Tmax_float_2)
              list_TmaxH.append(TmaxH)

          #CmaxL/CmaxH
          list_CmaxL_CmaxH = []

          for cmax_1_pk, cmax_2_pk in zip_list_cmax_1_pk_cmax_2_pk:
              CmaxL_CmaxH = min(cmax_1_pk, cmax_2_pk)/max(cmax_1_pk, cmax_2_pk)
              list_CmaxL_CmaxH.append(CmaxL_CmaxH)

          #CmaxH-L
          list_CmaxH_L = []
          for cmax_1_pk, cmax_2_pk in zip_list_cmax_1_pk_cmax_2_pk:
              CmaxH_L = max(cmax_1_pk, cmax_2_pk) - min(cmax_1_pk, cmax_2_pk)
              list_CmaxH_L.append(CmaxH_L)

          #NumBtwPeaks
          list_NumBtwPeaks = []
          for Tmax_float_1, Tmax_float_2 in zip_Tmax_float_1_Tmax_float_2:
              if max(Tmax_float_1, Tmax_float_2) in list_Tmax_float_1:
                  index_max_Tmax_float = list_Tmax_float_1.index(max(Tmax_float_1, Tmax_float_2))
              else:
                  index_max_Tmax_float = list_Tmax_float_2.index(max(Tmax_float_1, Tmax_float_2))
              if min(Tmax_float_1, Tmax_float_2) in list_Tmax_float_1:
                  index_min_Tmax_float = list_Tmax_float_1.index(min(Tmax_float_1, Tmax_float_2))
              else:
                  index_min_Tmax_float = list_Tmax_float_2.index(min(Tmax_float_1, Tmax_float_2))

              NumBtwPeaks = index_max_Tmax_float - index_min_Tmax_float
              list_NumBtwPeaks.append(NumBtwPeaks)
          
          #DuraBtwPeaks
          list_DuraBtwPeaks = []
          for Tmax_float_1, Tmax_float_2 in zip_Tmax_float_1_Tmax_float_2:
              DuraBtwPeaks = max(Tmax_float_1, Tmax_float_2) - min(Tmax_float_1, Tmax_float_2)
              list_DuraBtwPeaks.append(DuraBtwPeaks)

          ### –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
          list_for_index=df["–ù–æ–º–µ—Ä"].tolist()
          df_PK_additional_double_peaks = pd.DataFrame(list(zip(list_cmax_1_pk,list_Tmax_float_1,list_cmax_2_pk,list_Tmax_float_2,list_CmaxH,list_TmaxH,list_CmaxL_CmaxH,list_CmaxH_L,list_NumBtwPeaks,list_DuraBtwPeaks)),columns=['Cmax1','Tmax1','Cmax2','Tmax2','CmaxH','TmaxH','CmaxL/CmaxH','CmaxH-L','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏',
          '–í—Ä–µ–º—è –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏'],index=list_for_index)

          ###–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

          series_Cmax_1=df_PK_additional_double_peaks['Cmax1']
          list_Cmax_str_f_1=[v for v in series_Cmax_1.tolist()]
          series_Cmax_1=pd.Series(list_Cmax_str_f_1, index = df_PK_additional_double_peaks.index.tolist(), name='Cmax1 ' +"("+measure_unit_concentration+")")

          series_Tmax_1=df_PK_additional_double_peaks['Tmax1']
          list_Tmax_str_f_1=[v for v in series_Tmax_1.tolist()]
          series_Tmax_1=pd.Series(list_Tmax_str_f_1, index = df_PK_additional_double_peaks.index.tolist(), name='Tmax1 ' +"("+f"{measure_unit_time}"+")")

          series_Cmax_2=df_PK_additional_double_peaks['Cmax2']
          list_Cmax_str_f_2=[v for v in series_Cmax_2.tolist()]
          series_Cmax_2=pd.Series(list_Cmax_str_f_2, index = df_PK_additional_double_peaks.index.tolist(), name='Cmax2 ' +"("+measure_unit_concentration+")")

          series_Tmax_2=df_PK_additional_double_peaks['Tmax2']
          list_Tmax_str_f_2=[v for v in series_Tmax_2.tolist()]
          series_Tmax_2=pd.Series(list_Tmax_str_f_2, index = df_PK_additional_double_peaks.index.tolist(), name='Tmax2 ' +"("+f"{measure_unit_time}"+")")

          series_CmaxH=df_PK_additional_double_peaks['CmaxH']
          list_CmaxH_str_f=[v for v in series_CmaxH.tolist()]
          series_CmaxH =pd.Series(list_CmaxH_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='CmaxH ' +"("+measure_unit_concentration+")")

          series_TmaxH=df_PK_additional_double_peaks['TmaxH']
          list_TmaxH_str_f=[v for v in series_TmaxH.tolist()]
          series_TmaxH=pd.Series(list_TmaxH_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='TmaxH ' +"("+f"{measure_unit_time}"+")")

          series_CmaxL_CmaxH=df_PK_additional_double_peaks['CmaxL/CmaxH']
          list_CmaxL_CmaxH_str_f=[v for v in series_CmaxL_CmaxH.tolist()]
          series_CmaxL_CmaxH=pd.Series(list_CmaxL_CmaxH_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='CmaxL/CmaxH')

          series_CmaxH_L=df_PK_additional_double_peaks['CmaxH-L']
          list_CmaxH_L_str_f=[v for v in series_CmaxH_L.tolist()]
          series_CmaxH_L=pd.Series(list_CmaxH_L_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='CmaxH-L ' +"("+measure_unit_concentration+")")

          series_NumBtwPeaks=df_PK_additional_double_peaks['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏']
          list_NumBtwPeaks_str_f=[v for v in series_NumBtwPeaks.tolist()]
          series_NumBtwPeaks=pd.Series(list_NumBtwPeaks_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏ ')

          series_DuraBtwPeaks=df_PK_additional_double_peaks['–í—Ä–µ–º—è –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏']
          list_DuraBtwPeaks_str_f=[v for v in series_DuraBtwPeaks.tolist()]
          series_DuraBtwPeaks=pd.Series(list_DuraBtwPeaks_str_f, index = df_PK_additional_double_peaks.index.tolist(), name='–í—Ä–µ–º—è –º–µ–∂–¥—É –ø–∏–∫–∞–º–∏ ' +"("+f"{measure_unit_time}"+")")
          
          df_total_PK_additional_double_peaks = pd.concat([series_Cmax_1, series_Tmax_1, series_Cmax_2, series_Tmax_2, series_CmaxH, series_TmaxH, 
          series_CmaxL_CmaxH, series_CmaxH_L,series_NumBtwPeaks,series_DuraBtwPeaks], axis= 1)
        
          df_total_PK_additional_double_peaks.index.name = '–ù–æ–º–µ—Ä'

    if checking_condition_cmax2 or (len(list_cmax_1_pk) == len(df.index.tolist()) and (st.session_state[f"agree_cmax2 - {selector_research}"] == False)):
    
       ###–æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

       dict_df_averaged_3_PK = create_table_descriptive_statistics_before_95CI_pk(df_PK)
       df_averaged_3_PK = dict_df_averaged_3_PK.get("df_averaged_3_PK")

       df_concat_PK_pk= pd.concat([df_PK,df_averaged_3_PK],sort=False,axis=0)

       ###–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –§–ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

       series_Cmax=df_concat_PK_pk['Cmax']
       list_Cmax_str_f=[v for v in series_Cmax.tolist()]
       series_Cmax=pd.Series(list_Cmax_str_f, index = df_concat_PK_pk.index.tolist(), name='Cmax ' +"("+measure_unit_concentration+")")

       series_Tmax=df_concat_PK_pk['Tmax']
       list_Tmax_str_f=[v for v in series_Tmax.tolist()]
       series_Tmax=pd.Series(list_Tmax_str_f, index = df_concat_PK_pk.index.tolist(), name='Tmax ' +"("+f"{measure_unit_time}"+")")

       series_C0=df_concat_PK_pk['C0']
       list_C0_str_f=[v for v in series_C0.tolist()]
       series_C0=pd.Series(list_C0_str_f, index = df_concat_PK_pk.index.tolist(), name='C0 ' +"("+measure_unit_concentration+")")

       series_Clast=df_concat_PK_pk['Clast']
       list_Clast_str_f=[v for v in series_Clast.tolist()]
       series_Clast=pd.Series(list_Clast_str_f, index = df_concat_PK_pk.index.tolist(), name='Clast ' +"("+measure_unit_concentration+")")

       series_Tlast=df_concat_PK_pk['Tlast']
       list_Tlast_str_f=[v for v in series_Tlast.tolist()]
       series_Tlast=pd.Series(list_Tlast_str_f, index = df_concat_PK_pk.index.tolist(), name='Tlast ' +"("+f"{measure_unit_time}"+")")
       
       series_MRT0_t= df_concat_PK_pk['MRT0‚Üít']
       list_MRT0_t_str_f=[v for v in series_MRT0_t.tolist()]
       series_MRT0_t=pd.Series(list_MRT0_t_str_f, index = df_concat_PK_pk.index.tolist(), name='MRT0‚Üít '+"("+f"{measure_unit_time}"+")")

       series_MRT0_inf= df_concat_PK_pk['MRT0‚Üí‚àû']
       list_MRT0_inf_str_f=[v for v in series_MRT0_inf.tolist()]
       series_MRT0_inf=pd.Series(list_MRT0_inf_str_f, index = df_concat_PK_pk.index.tolist(), name='MRT0‚Üí‚àû '+"("+f"{measure_unit_time}"+")")

       series_half_live= df_concat_PK_pk['T1/2']
       list_half_live_str_f=[v for v in series_half_live.tolist()]
       series_half_live=pd.Series(list_half_live_str_f, index = df_concat_PK_pk.index.tolist(), name='T1/2 '+"("+f"{measure_unit_time}"+")")

       series_AUC0_t= df_concat_PK_pk['AUC0-t']
       list_AUC0_t_str_f=[v for v in series_AUC0_t.tolist()]
       series_AUC0_t=pd.Series(list_AUC0_t_str_f, index = df_concat_PK_pk.index.tolist(), name='AUC0-t '+"("+measure_unit_concentration+f"√ó{measure_unit_time}" +")")

       series_AUC0_inf= df_concat_PK_pk['AUC0‚Üí‚àû']
       list_AUC0_inf_str_f=[v for v in series_AUC0_inf.tolist()]
       series_AUC0_inf=pd.Series(list_AUC0_inf_str_f, index = df_concat_PK_pk.index.tolist(), name='AUC0‚Üí‚àû '+"("+measure_unit_concentration+f"√ó{measure_unit_time}" +")")
       
       series_AUMC0_t= df_concat_PK_pk['AUMC0-t']
       list_AUMC0_t_str_f=[v for v in series_AUMC0_t.tolist()]
       series_AUMC0_t=pd.Series(list_AUMC0_t_str_f, index = df_concat_PK_pk.index.tolist(), name='AUMC0-t '+"("+measure_unit_concentration+f"√ó{measure_unit_time}\u00B2" +")")

       series_AUMC0_inf= df_concat_PK_pk['AUMC0-‚àû']
       list_AUMC0_inf_str_f=[v for v in series_AUMC0_inf.tolist()]
       series_AUMC0_inf=pd.Series(list_AUMC0_inf_str_f, index = df_concat_PK_pk.index.tolist(), name='AUMC0-‚àû '+"("+measure_unit_concentration+f"√ó{measure_unit_time}\u00B2" +")")

       series_–°max_dev_AUC0_t= df_concat_PK_pk['–°max/AUC0-t']
       list_–°max_dev_AUC0_t_str_f=[v for v in series_–°max_dev_AUC0_t.tolist()]
       series_–°max_dev_AUC0_t=pd.Series(list_–°max_dev_AUC0_t_str_f, index = df_concat_PK_pk.index.tolist(), name='–°max/AUC0-t '+"("+f"{measure_unit_time}\u207B\u00B9"+")")

       series_Kel= df_concat_PK_pk['Kel']
       list_Kel_str_f=[v for v in series_Kel.tolist()]
       series_Kel=pd.Series(list_Kel_str_f, index = df_concat_PK_pk.index.tolist(), name='Kel '+"("+f"{measure_unit_time}\u207B\u00B9"+")")

       series_CL= df_concat_PK_pk['Cl']
       list_CL_str_f=[v for v in series_CL.tolist()]
       series_CL=pd.Series(list_CL_str_f, index = df_concat_PK_pk.index.tolist(), name='Cl ' +"("+f"({measure_unit_dose})/({measure_unit_concentration})/{measure_unit_time}"+")")

       series_Vz= df_concat_PK_pk['Vz']
       list_Vz_str_f=[v for v in series_Vz.tolist()]
       series_Vz=pd.Series(list_Vz_str_f, index = df_concat_PK_pk.index.tolist(), name='Vz ' +"("+f"({measure_unit_dose})/({measure_unit_concentration})"+")")

       series_Vss= df_concat_PK_pk['Vss']
       list_Vss_str_f=[v for v in series_Vss.tolist()]
       series_Vss=pd.Series(list_Vss_str_f, index = df_concat_PK_pk.index.tolist(), name='Vss ' +"("+f"({measure_unit_dose})/({measure_unit_concentration})"+")")
       
       df_total_PK_pk = pd.concat([series_Cmax, series_Tmax,series_C0,series_Clast, series_Tlast, series_MRT0_t, series_MRT0_inf,series_half_live,series_AUC0_t,series_AUC0_inf,series_AUMC0_t,series_AUMC0_inf,series_–°max_dev_AUC0_t,series_Kel,series_CL,series_Vz,series_Vss], axis= 1) 
       
       df_total_PK_pk.index.name = '–ù–æ–º–µ—Ä'

       #–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É–±—ä–µ–∫—Ç–æ–≤ –¥–æ —Ü–µ–ª–æ–≥–æ
       round_subjects_count(df_total_PK_pk)
       
       #–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
       list_confidence_interval_PK = dict_df_averaged_3_PK.get("list_confidence_interval_PK")

       ###–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
       df_total_PK_pk = add_ci_in_table(df_total_PK_pk,list_confidence_interval_PK)

       ##–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

       df_total_PK_pk = rename_parametrs_descriptive_statistics(df_total_PK_pk)

       if st.session_state[f"agree_cmax2 - {selector_research}"] == False:
           dict_PK_parametrs = {
               "df_total_PK": df_total_PK_pk,
               "df_PK":df_PK,
               "df_concat_PK":df_concat_PK_pk,
               "list_cmax_1": list_cmax_1_pk
           }
       else:
          dict_PK_parametrs = {
              "df_total_PK": df_total_PK_pk,
              "df_PK":df_PK,
              "df_concat_PK": df_concat_PK_pk,
              "list_cmax_1": list_cmax_1_pk,
              "list_cmax_2": list_cmax_2_pk,
              "df_total_PK_additional_double_peaks": df_total_PK_additional_double_peaks
          }

       return dict_PK_parametrs
