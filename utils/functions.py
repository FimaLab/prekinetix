import streamlit as st
import os
import pandas as pd
from io import BytesIO
from docx import Document

import tempfile
import math

from docx.shared import Pt, Cm
from docx.enum.section import WD_ORIENT
from docx.oxml.ns import nsdecls
from docx.oxml import parse_xml
from docx.shared import RGBColor


def save_session_lists_tables_graphics(option,list_heading_word,list_table_word,list_graphics_word,list_heading_graphics_word):
    ###—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
    st.session_state[f"list_heading_word_{option}"] = list_heading_word
    st.session_state[f"list_table_word_{option}"] = list_table_word
    st.session_state[f"list_graphics_word_{option}"] = list_graphics_word
    st.session_state[f"list_heading_graphics_word_{option}"] = list_heading_graphics_word

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è DataFrame –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
def to_excel_results(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=True)
    output.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    return output


# –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–ª—é—á–∞
def download_excel_button(df, label, key, file_name):
    excel_data = to_excel_results(df)
    st.download_button(
        label=label,
        data=excel_data,
        file_name=file_name,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        key=key  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä key
    )


#–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–Ω–∞—á–∏—â–∏—Ö —Ü–∏—Ñ—Ä
def round_to_significant_figures(num, sig_figs):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É "-"
    if num == "-":
        return num
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
    elif isinstance(num, float) and math.isnan(num):
        return "-"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    elif num == 0:
        return 0
    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    else:
        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞—á–∞—â–∏—Ö —Ü–∏—Ñ—Ä
        rounded_num = round(num, sig_figs - int(math.floor(math.log10(abs(num))) + 1))
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ int
        if rounded_num.is_integer():
            return int(rounded_num)
        else:
            return rounded_num


#—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ 
def save_uploadedfile(uploadedfile):
    with open(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",uploadedfile.name),"wb") as f:
       f.write(uploadedfile.getbuffer())
     

#—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ df_edit
def save_editfile(df_edit,uploadedfile_name):
    writer=pd.ExcelWriter(os.path.join("–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",uploadedfile_name))
    df_edit.to_excel(writer,index=False)
    writer.save()


#–ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç df –≤ excel —Ñ–∞–π–ª-–ø—Ä–∏–º–µ—Ä
def to_excel(df_example_file):
       output = BytesIO()
       writer = pd.ExcelWriter(output, engine='xlsxwriter')
       df_example_file.to_excel(writer, index=False, sheet_name='Sheet1')
       workbook = writer.book
       worksheet = writer.sheets['Sheet1']
       format1 = workbook.add_format({'num_format': '0.00'}) 
       worksheet.set_column('A:A', None, format1)
       writer.save()  
       processed_data = output.getvalue()
       return processed_data
 

###–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–µ–π–º–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def edit_frame(df,uploadedfile_name):
       new_df = df
       list_columns_str = []
       for i in new_df.columns.tolist():
           i_new = str(i)
           list_columns_str.append(i_new)
       new_df.columns = list_columns_str

       edited_df = st.data_editor(new_df, key = ("edited_df" + uploadedfile_name))
       save_editfile(edited_df,uploadedfile_name)

       df_change = edited_df
       
       list_change_values = df_change.columns.tolist()
       list_change_values.remove("–ù–æ–º–µ—Ä")

       list_columns_number = []
       for i in list_change_values:
           i_new = float(i)
           list_columns_number.append(i_new)

       list_columns_number.insert(0,"–ù–æ–º–µ—Ä")

       df_change.columns = list_columns_number
       
       df = df_change
       return df


###—Å–æ–∑–¥–∞–Ω–∏–µ Word-–æ—Ç—á–µ—Ç–∞
## —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü
def create_table(list_heading_word, list_table_word):
    zip_heading_table = zip(list_heading_word, list_table_word)

    doc = Document()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    section = doc.sections[-1]
    section.orientation = WD_ORIENT.LANDSCAPE
    new_width, new_height = section.page_height, section.page_width
    section.page_width = new_width
    section.page_height = new_height

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Times New Roman'
    font.size = Pt(10)

    for heading, df in zip_heading_table:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        paragraph = doc.add_paragraph(heading, style='Heading 1')
        run = paragraph.runs[0]
        run.font.color.rgb = RGBColor(0, 0, 0)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ DataFrame –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        name_columns = pd.DataFrame(df.columns.tolist()).T
        name_columns.columns = df.columns.tolist()
        df_columns = pd.concat([name_columns, df]).reset_index(drop=True)

        total_name_index = df.index.name or "Index"
        list_index_names = df.index.tolist()
        list_index_names.insert(0, total_name_index)
        series_index_names = pd.Series(list_index_names, name=total_name_index)
        df_series_index_names = series_index_names.to_frame()
        df_columns_indexes = pd.concat([df_series_index_names, df_columns], axis=1)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        t = doc.add_table(rows=df_columns_indexes.shape[0], cols=df_columns_indexes.shape[1])
        t.style = 'Table Grid'

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        max_col_widths = [max([len(str(df_columns_indexes.iat[i, j])) for i in range(df_columns_indexes.shape[0])]) for j in range(df_columns_indexes.shape[1])]
        total_width = 26.0  # –î–æ—Å—Ç—É–ø–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤ —Å–º
        col_widths = [min(w * 0.2, total_width / len(max_col_widths)) for w in max_col_widths]

        for j, width in enumerate(col_widths):
            for row in t.rows:
                row.cells[j].width = Cm(width)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏
        for i, row_data in df_columns_indexes.iterrows():
            for j, value in enumerate(row_data):
                cell = t.cell(i, j)
                cell.text = str(value)
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è —Ç–µ–∫—Å—Ç–∞
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.size = Pt(8)
                        run.font.name = 'Times New Roman'

        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        for row in t.rows:
            for cell in row.cells:
                cell.vertical_alignment = 1  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ø–∞–º—è—Ç—å
    bio = BytesIO()
    doc.save(bio)
    bio.seek(0)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    st.download_button(
        label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã üìÉ",
        data=bio.getvalue(),
        file_name="–¢–∞–±–ª–∏—Ü—ã.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

#–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤—ã–≥—Ä—É–∑–∫–∞ –≤ excel
def visualize_table(list_heading_word,list_table_word):
    zip_heading_table = zip(list_heading_word,list_table_word) ###–µ—â–µ —Ä–∞–∑ –æ–±—ä—è–≤–ª—è–µ–º, –∏–Ω–∞—á–µ –Ω–µ –≤–∏–¥–∏—Ç zip-–æ–±—ä–µ–∫—Ç
    #####–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    for heading, df in zip_heading_table:
        st.subheader(heading)
        st.write(df)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ Excel
        download_excel_button(df, f"C–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª {heading}", heading,f"{heading}.xlsx")

## —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
def create_graphic(list_graphics_word,list_heading_graphics_word):
    ### –¥–æ–∫—É–º–µ–Ω—Ç Word
    zip_graphics_heading = zip(list_graphics_word,list_heading_graphics_word)
    doc = Document()

    # Settings
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Times New Roman'
    font.size = Pt(12)

    buf = BytesIO() #–∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–∞–∑–∏–ª–∞ –æ—à–∏–±–∫–∞
    for fig, heading in zip_graphics_heading:
        buf = BytesIO()
        fig.savefig(buf, format="jpg", dpi=300, bbox_inches='tight')
        fp = tempfile.NamedTemporaryFile() 
        with open(f"{fp.name}.jpg",'wb') as ff:
             ff.write(buf.getvalue()) 
        doc.add_picture(buf)
        doc.add_paragraph(heading)
    
    doc.save(buf)
    if doc:
        st.download_button(
            label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ üìà",
            data=buf.getvalue(),
            file_name="–ì—Ä–∞—Ñ–∏–∫–∏.docx",
            mime="docx",
            key = "graphics"
        )